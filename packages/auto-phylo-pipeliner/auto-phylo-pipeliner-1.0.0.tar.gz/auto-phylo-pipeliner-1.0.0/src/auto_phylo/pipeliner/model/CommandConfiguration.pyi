from auto_phylo.pipeliner.model.Command import Command as Command
from auto_phylo.pipeliner.model.CommandConfigurationEvent import CommandConfigurationEvent
from auto_phylo.pipeliner.util.Observable import Observable
from typing import Dict, List, Optional

class CommandConfiguration(Observable[CommandConfigurationEvent]):
    def __init__(self, command: Command, input_dir: Optional[str] = ..., output_dir: Optional[str] = ..., special: Optional[int] = ..., param_values: Optional[Dict[str, str]] = ...) -> None: ...
    @property
    def command(self) -> Command: ...
    @property
    def input_dir(self) -> Optional[str]: ...
    def has_input_dir(self) -> bool: ...
    @property
    def output_dir(self) -> Optional[str]: ...
    def has_output_dir(self) -> bool: ...
    @property
    def special(self) -> Optional[int]: ...
    def is_valid_pipeline(self) -> bool: ...
    def is_valid_config(self) -> bool: ...
    def is_special_supported(self) -> bool: ...
    def has_special(self) -> bool: ...
    def remove_special(self) -> None: ...
    @property
    def param_values(self) -> Dict[str, str]: ...
    def has_param(self, param: str) -> bool: ...
    def list_param_names(self) -> List[str]: ...
    def has_param_value(self, param: str) -> bool: ...
    def has_valid_param_value(self, param: str) -> bool: ...
    def get_param_value(self, param: str) -> str: ...
    def set_param_value(self, param: str, new_value: str) -> None: ...
    def remove_param_value(self, param: str) -> None: ...
    def set_param_values(self, params: Dict[str, str]) -> None: ...
    def clear_param_values(self) -> None: ...
    def has_param_values(self): ...
    def copy_to(self, command_config: CommandConfiguration) -> None: ...
    def __copy__(self) -> CommandConfiguration: ...
    def __deepcopy__(self, memodict=...) -> CommandConfiguration: ...
