from auto_phylo.pipeliner.model.Command import Command as Command
from auto_phylo.pipeliner.model.CommandConfiguration import CommandConfiguration
from auto_phylo.pipeliner.model.CommandConfigurationEvent import CommandConfigurationEvent as CommandConfigurationEvent
from auto_phylo.pipeliner.model.Pipeline import Pipeline as Pipeline
from auto_phylo.pipeliner.model.PipelineChangeEvent import PipelineChangeEvent as PipelineChangeEvent
from auto_phylo.pipeliner.util.Observable import Observable
from typing import Dict, List, Optional, Union

class PipelineConfiguration(Observable):
    def __init__(self, pipeline: Pipeline, seda_version: Optional[str] = ..., output_dir: Optional[str] = ..., command_configs: Optional[List[CommandConfiguration]] = ...) -> None: ...
    @property
    def pipeline(self) -> Pipeline: ...
    @property
    def seda_version(self) -> Optional[str]: ...
    @property
    def output_dir(self) -> Optional[str]: ...
    @property
    def command_configs(self) -> List[CommandConfiguration]: ...
    def is_valid_pipeline(self) -> bool: ...
    def is_valid_config(self) -> bool: ...
    def set_command_param_value(self, command: Union[Command, str], param: str, new_value: str) -> None: ...
    def get_command_param_value(self, command: Union[Command, str], param: str) -> str: ...
    def get_command_param_values(self, command: Union[Command, str]) -> Dict[str, str]: ...
    def list_command_param_names(self, command: Command) -> List[str]: ...
    def get_command_configuration(self, index: int) -> CommandConfiguration: ...
    def set_command_configuration(self, index: int, command_config: CommandConfiguration) -> None: ...
    def replace_command_configuration(self, index: int, command_config: CommandConfiguration) -> None: ...
    def __copy__(self) -> PipelineConfiguration: ...
    def __deepcopy__(self, memodict=...) -> PipelineConfiguration: ...
