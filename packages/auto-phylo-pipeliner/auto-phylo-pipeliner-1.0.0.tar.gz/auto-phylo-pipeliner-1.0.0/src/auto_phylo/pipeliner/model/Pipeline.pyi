from auto_phylo.pipeliner.model.Command import Command
from auto_phylo.pipeliner.util.Observable import Observable
from typing import Iterable, Iterator, List, Optional, Sized, Union

class PipelineIterator(Iterator[Command]):
    def __init__(self, pipeline: Pipeline) -> None: ...
    def __next__(self) -> Command: ...

class Pipeline(Observable, Iterable[Command], Sized):
    def __init__(self, commands: Optional[List[Command]] = ...) -> None: ...
    @property
    def commands(self) -> List[Command]: ...
    def is_valid(self) -> bool: ...
    def has_command(self, target_command: Union[Command, str]) -> bool: ...
    def add_command(self, command: Command) -> int: ...
    def insert_command(self, index: int, command: Command) -> None: ...
    def remove_command(self, index: int) -> None: ...
    def remove_all_instances_of_command(self, command: Command) -> None: ...
    def swap_command_position(self, index_a: int, index_b: int) -> None: ...
    def get_command_indexes(self, command: Command) -> List[int]: ...
    def find_command_with_param(self, param: str) -> Command: ...
    def clear(self) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Command]: ...
    def __copy__(self) -> Pipeline: ...
    def __deepcopy__(self, memodict=...) -> Pipeline: ...
