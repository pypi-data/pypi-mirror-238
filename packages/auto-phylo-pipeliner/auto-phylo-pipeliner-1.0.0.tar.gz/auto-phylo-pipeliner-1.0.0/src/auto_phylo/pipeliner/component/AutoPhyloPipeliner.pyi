from auto_phylo.pipeliner.model.Commands import Commands as Commands
from auto_phylo.pipeliner.model.PipelineConfiguration import PipelineConfiguration
from auto_phylo.pipeliner.model.PipelineConfigurationChangeEvent import PipelineConfigurationChangeEvent as PipelineConfigurationChangeEvent
from auto_phylo.pipeliner.util.EventListeners import EventListeners
from tkinter import Misc, Tk
from tkinter.ttk import Frame
from typing import Optional, Tuple

class AutoPhyloPipeliner(Tk):
    def __init__(self, pipeline_configuration: Optional[PipelineConfiguration] = ..., commands: Commands = ..., auto_phylo_version: str = ..., *args, **kwargs) -> None: ...

class _Toolbar(Frame):
    def __init__(self, auto_phylo_version: str, master: Optional[Misc] = ..., relief=..., *args, **kwargs) -> None: ...
    @property
    def auto_phylo_version(self) -> str: ...
    @property
    def event_new_pipeline(self) -> EventListeners[Tuple[str, bool]]: ...
    @property
    def event_auto_phylo_version_change(self) -> EventListeners[str]: ...

class _DesignerFrame(Frame):
    def __init__(self, pipeline_configuration: PipelineConfiguration, commands: Commands = ..., master: Optional[Misc] = ..., *args, **kwargs) -> None: ...
    @property
    def pipeline_configuration(self) -> PipelineConfiguration: ...

class _StatusBar(Frame):
    def __init__(self, initial_message: str = ..., master: Optional[Misc] = ..., *args, **kwargs) -> None: ...
    @property
    def message(self) -> str: ...
    def set_warning(self, message: str) -> None: ...
    def set_error(self, message: str) -> None: ...
    def set_ok(self, message: str) -> None: ...
