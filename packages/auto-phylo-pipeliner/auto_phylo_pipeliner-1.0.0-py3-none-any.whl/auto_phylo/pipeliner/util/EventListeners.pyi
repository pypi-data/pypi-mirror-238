from typing import Callable, Generic, TypeVar

E = TypeVar('E')

class EventQueue(Generic[E]):
    def __init__(self) -> None: ...
    def register_callback(self, callback: Callable[[E], None]): ...
    def notify(self, event: E): ...

class EventListeners(Generic[E]):
    def __init__(self, queue: EventQueue[E]) -> None: ...
    def add_callback(self, callback: Callable[[E], None]) -> None: ...
    def remove_callback(self, callback: Callable[[E], None]) -> None: ...
    def has_callback(self, callback: Callable[[E], None]) -> bool: ...
    def clear_callbacks(self) -> None: ...
