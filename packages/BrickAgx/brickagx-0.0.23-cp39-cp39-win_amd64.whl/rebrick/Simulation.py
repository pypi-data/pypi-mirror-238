# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SimulationSwig
else:
    import _SimulationSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _SimulationSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimulationSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _SimulationSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _SimulationSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _SimulationSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _SimulationSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _SimulationSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _SimulationSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _SimulationSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _SimulationSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _SimulationSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _SimulationSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _SimulationSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _SimulationSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _SimulationSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _SimulationSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _SimulationSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _SimulationSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SimulationSwig:
_SimulationSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.Physics3D
import rebrick.DriveTrain
class Output(rebrick.Core.Object):
    r"""Proxy of C++ Simulation::Output class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Output self) -> Output"""
        _SimulationSwig.Output_swiginit(self, _SimulationSwig.new_Output())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Output self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.Output_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Output self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.Output_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Output self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.Output_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Output self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.Output_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Output self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.Output_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Output self)"""
        return _SimulationSwig.Output_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_Output

# Register Output in _SimulationSwig:
_SimulationSwig.Output_swigregister(Output)

class HingeAngleOutput(Output):
    r"""Proxy of C++ Simulation::HingeAngleOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HingeAngleOutput self) -> HingeAngleOutput"""
        _SimulationSwig.HingeAngleOutput_swiginit(self, _SimulationSwig.new_HingeAngleOutput())

    def hinge(self):
        r"""hinge(HingeAngleOutput self) -> std::shared_ptr< Physics3D::Hinge >"""
        return _SimulationSwig.HingeAngleOutput_hinge(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(HingeAngleOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.HingeAngleOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(HingeAngleOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.HingeAngleOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(HingeAngleOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.HingeAngleOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(HingeAngleOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.HingeAngleOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(HingeAngleOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.HingeAngleOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(HingeAngleOutput self)"""
        return _SimulationSwig.HingeAngleOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_HingeAngleOutput

# Register HingeAngleOutput in _SimulationSwig:
_SimulationSwig.HingeAngleOutput_swigregister(HingeAngleOutput)

class HingeAngularVelocityOutput(Output):
    r"""Proxy of C++ Simulation::HingeAngularVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HingeAngularVelocityOutput self) -> HingeAngularVelocityOutput"""
        _SimulationSwig.HingeAngularVelocityOutput_swiginit(self, _SimulationSwig.new_HingeAngularVelocityOutput())

    def hinge(self):
        r"""hinge(HingeAngularVelocityOutput self) -> std::shared_ptr< Physics3D::Hinge >"""
        return _SimulationSwig.HingeAngularVelocityOutput_hinge(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(HingeAngularVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.HingeAngularVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(HingeAngularVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.HingeAngularVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(HingeAngularVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.HingeAngularVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(HingeAngularVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.HingeAngularVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(HingeAngularVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.HingeAngularVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(HingeAngularVelocityOutput self)"""
        return _SimulationSwig.HingeAngularVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_HingeAngularVelocityOutput

# Register HingeAngularVelocityOutput in _SimulationSwig:
_SimulationSwig.HingeAngularVelocityOutput_swigregister(HingeAngularVelocityOutput)

class Input(rebrick.Core.Object):
    r"""Proxy of C++ Simulation::Input class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Input self) -> Input"""
        _SimulationSwig.Input_swiginit(self, _SimulationSwig.new_Input())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Input self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.Input_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Input self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.Input_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Input self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.Input_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Input self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.Input_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Input self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.Input_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Input self)"""
        return _SimulationSwig.Input_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_Input

# Register Input in _SimulationSwig:
_SimulationSwig.Input_swigregister(Input)

class InputSignal(rebrick.Core.Object):
    r"""Proxy of C++ Simulation::InputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InputSignal self) -> InputSignal"""
        _SimulationSwig.InputSignal_swiginit(self, _SimulationSwig.new_InputSignal())

    def target(self):
        r"""target(InputSignal self) -> std::shared_ptr< Simulation::Input >"""
        return _SimulationSwig.InputSignal_target(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(InputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.InputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(InputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.InputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(InputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.InputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(InputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.InputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(InputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.InputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(InputSignal self)"""
        return _SimulationSwig.InputSignal_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_InputSignal

# Register InputSignal in _SimulationSwig:
_SimulationSwig.InputSignal_swigregister(InputSignal)

class LinearVelocityMotorVelocityInput(Input):
    r"""Proxy of C++ Simulation::LinearVelocityMotorVelocityInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LinearVelocityMotorVelocityInput self) -> LinearVelocityMotorVelocityInput"""
        _SimulationSwig.LinearVelocityMotorVelocityInput_swiginit(self, _SimulationSwig.new_LinearVelocityMotorVelocityInput())

    def motor(self):
        r"""motor(LinearVelocityMotorVelocityInput self) -> std::shared_ptr< Physics3D::LinearVelocityMotor >"""
        return _SimulationSwig.LinearVelocityMotorVelocityInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(LinearVelocityMotorVelocityInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.LinearVelocityMotorVelocityInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(LinearVelocityMotorVelocityInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.LinearVelocityMotorVelocityInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(LinearVelocityMotorVelocityInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.LinearVelocityMotorVelocityInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(LinearVelocityMotorVelocityInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.LinearVelocityMotorVelocityInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(LinearVelocityMotorVelocityInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.LinearVelocityMotorVelocityInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(LinearVelocityMotorVelocityInput self)"""
        return _SimulationSwig.LinearVelocityMotorVelocityInput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_LinearVelocityMotorVelocityInput

# Register LinearVelocityMotorVelocityInput in _SimulationSwig:
_SimulationSwig.LinearVelocityMotorVelocityInput_swigregister(LinearVelocityMotorVelocityInput)

class OutputSignal(rebrick.Core.Object):
    r"""Proxy of C++ Simulation::OutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OutputSignal self) -> OutputSignal"""
        _SimulationSwig.OutputSignal_swiginit(self, _SimulationSwig.new_OutputSignal())

    def source(self):
        r"""source(OutputSignal self) -> std::shared_ptr< Simulation::Output >"""
        return _SimulationSwig.OutputSignal_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(OutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.OutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(OutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.OutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(OutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.OutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(OutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.OutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(OutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.OutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(OutputSignal self)"""
        return _SimulationSwig.OutputSignal_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_OutputSignal

# Register OutputSignal in _SimulationSwig:
_SimulationSwig.OutputSignal_swigregister(OutputSignal)

class PrismaticPositionOutput(Output):
    r"""Proxy of C++ Simulation::PrismaticPositionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PrismaticPositionOutput self) -> PrismaticPositionOutput"""
        _SimulationSwig.PrismaticPositionOutput_swiginit(self, _SimulationSwig.new_PrismaticPositionOutput())

    def prismatic(self):
        r"""prismatic(PrismaticPositionOutput self) -> std::shared_ptr< Physics3D::Prismatic >"""
        return _SimulationSwig.PrismaticPositionOutput_prismatic(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(PrismaticPositionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.PrismaticPositionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(PrismaticPositionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.PrismaticPositionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(PrismaticPositionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.PrismaticPositionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(PrismaticPositionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.PrismaticPositionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(PrismaticPositionOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.PrismaticPositionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(PrismaticPositionOutput self)"""
        return _SimulationSwig.PrismaticPositionOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_PrismaticPositionOutput

# Register PrismaticPositionOutput in _SimulationSwig:
_SimulationSwig.PrismaticPositionOutput_swigregister(PrismaticPositionOutput)

class PrismaticVelocityOutput(Output):
    r"""Proxy of C++ Simulation::PrismaticVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PrismaticVelocityOutput self) -> PrismaticVelocityOutput"""
        _SimulationSwig.PrismaticVelocityOutput_swiginit(self, _SimulationSwig.new_PrismaticVelocityOutput())

    def prismatic(self):
        r"""prismatic(PrismaticVelocityOutput self) -> std::shared_ptr< Physics3D::Prismatic >"""
        return _SimulationSwig.PrismaticVelocityOutput_prismatic(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(PrismaticVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.PrismaticVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(PrismaticVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.PrismaticVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(PrismaticVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.PrismaticVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(PrismaticVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.PrismaticVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(PrismaticVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.PrismaticVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(PrismaticVelocityOutput self)"""
        return _SimulationSwig.PrismaticVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_PrismaticVelocityOutput

# Register PrismaticVelocityOutput in _SimulationSwig:
_SimulationSwig.PrismaticVelocityOutput_swigregister(PrismaticVelocityOutput)

class RealInputSignal(InputSignal):
    r"""Proxy of C++ Simulation::RealInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RealInputSignal self) -> RealInputSignal"""
        _SimulationSwig.RealInputSignal_swiginit(self, _SimulationSwig.new_RealInputSignal())

    def value(self):
        r"""value(RealInputSignal self) -> double"""
        return _SimulationSwig.RealInputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(double value, std::shared_ptr< Simulation::Input > target) -> std::shared_ptr< Simulation::RealInputSignal >

        Parameters
        ----------
        value: double
        target: std::shared_ptr< Simulation::Input >

        """
        return _SimulationSwig.RealInputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RealInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RealInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RealInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RealInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RealInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RealInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RealInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RealInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RealInputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RealInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RealInputSignal self)"""
        return _SimulationSwig.RealInputSignal_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RealInputSignal

# Register RealInputSignal in _SimulationSwig:
_SimulationSwig.RealInputSignal_swigregister(RealInputSignal)

def RealInputSignal_create(value, target):
    r"""
    RealInputSignal_create(double value, std::shared_ptr< Simulation::Input > target) -> std::shared_ptr< Simulation::RealInputSignal >

    Parameters
    ----------
    value: double
    target: std::shared_ptr< Simulation::Input >

    """
    return _SimulationSwig.RealInputSignal_create(value, target)

class RealOutputSignal(OutputSignal):
    r"""Proxy of C++ Simulation::RealOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RealOutputSignal self) -> RealOutputSignal"""
        _SimulationSwig.RealOutputSignal_swiginit(self, _SimulationSwig.new_RealOutputSignal())

    def value(self):
        r"""value(RealOutputSignal self) -> double"""
        return _SimulationSwig.RealOutputSignal_value(self)

    @staticmethod
    def create(v, source):
        r"""
        create(double v, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Simulation::RealOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Simulation::Output >

        """
        return _SimulationSwig.RealOutputSignal_create(v, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RealOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RealOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RealOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RealOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RealOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RealOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RealOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RealOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RealOutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RealOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RealOutputSignal self)"""
        return _SimulationSwig.RealOutputSignal_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RealOutputSignal

# Register RealOutputSignal in _SimulationSwig:
_SimulationSwig.RealOutputSignal_swigregister(RealOutputSignal)

def RealOutputSignal_create(v, source):
    r"""
    RealOutputSignal_create(double v, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Simulation::RealOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Simulation::Output >

    """
    return _SimulationSwig.RealOutputSignal_create(v, source)

class RigidBodyPositionOutput(Output):
    r"""Proxy of C++ Simulation::RigidBodyPositionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RigidBodyPositionOutput self) -> RigidBodyPositionOutput"""
        _SimulationSwig.RigidBodyPositionOutput_swiginit(self, _SimulationSwig.new_RigidBodyPositionOutput())

    def rigid_body(self):
        r"""rigid_body(RigidBodyPositionOutput self) -> std::shared_ptr< Physics3D::RigidBody >"""
        return _SimulationSwig.RigidBodyPositionOutput_rigid_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RigidBodyPositionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RigidBodyPositionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RigidBodyPositionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RigidBodyPositionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RigidBodyPositionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RigidBodyPositionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RigidBodyPositionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RigidBodyPositionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RigidBodyPositionOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RigidBodyPositionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RigidBodyPositionOutput self)"""
        return _SimulationSwig.RigidBodyPositionOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RigidBodyPositionOutput

# Register RigidBodyPositionOutput in _SimulationSwig:
_SimulationSwig.RigidBodyPositionOutput_swigregister(RigidBodyPositionOutput)

class RigidBodyVelocityOutput(Output):
    r"""Proxy of C++ Simulation::RigidBodyVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RigidBodyVelocityOutput self) -> RigidBodyVelocityOutput"""
        _SimulationSwig.RigidBodyVelocityOutput_swiginit(self, _SimulationSwig.new_RigidBodyVelocityOutput())

    def rigid_body(self):
        r"""rigid_body(RigidBodyVelocityOutput self) -> std::shared_ptr< Physics3D::RigidBody >"""
        return _SimulationSwig.RigidBodyVelocityOutput_rigid_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RigidBodyVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RigidBodyVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RigidBodyVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RigidBodyVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RigidBodyVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RigidBodyVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RigidBodyVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RigidBodyVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RigidBodyVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RigidBodyVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RigidBodyVelocityOutput self)"""
        return _SimulationSwig.RigidBodyVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RigidBodyVelocityOutput

# Register RigidBodyVelocityOutput in _SimulationSwig:
_SimulationSwig.RigidBodyVelocityOutput_swigregister(RigidBodyVelocityOutput)

class RotationalVelocityMotor1DVelocityInput(Input):
    r"""Proxy of C++ Simulation::RotationalVelocityMotor1DVelocityInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RotationalVelocityMotor1DVelocityInput self) -> RotationalVelocityMotor1DVelocityInput"""
        _SimulationSwig.RotationalVelocityMotor1DVelocityInput_swiginit(self, _SimulationSwig.new_RotationalVelocityMotor1DVelocityInput())

    def motor(self):
        r"""motor(RotationalVelocityMotor1DVelocityInput self) -> std::shared_ptr< Physics1D::RotationalVelocityMotor >"""
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RotationalVelocityMotor1DVelocityInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RotationalVelocityMotor1DVelocityInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RotationalVelocityMotor1DVelocityInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RotationalVelocityMotor1DVelocityInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RotationalVelocityMotor1DVelocityInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RotationalVelocityMotor1DVelocityInput self)"""
        return _SimulationSwig.RotationalVelocityMotor1DVelocityInput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RotationalVelocityMotor1DVelocityInput

# Register RotationalVelocityMotor1DVelocityInput in _SimulationSwig:
_SimulationSwig.RotationalVelocityMotor1DVelocityInput_swigregister(RotationalVelocityMotor1DVelocityInput)

class RotationalVelocityMotorVelocityInput(Input):
    r"""Proxy of C++ Simulation::RotationalVelocityMotorVelocityInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RotationalVelocityMotorVelocityInput self) -> RotationalVelocityMotorVelocityInput"""
        _SimulationSwig.RotationalVelocityMotorVelocityInput_swiginit(self, _SimulationSwig.new_RotationalVelocityMotorVelocityInput())

    def motor(self):
        r"""motor(RotationalVelocityMotorVelocityInput self) -> std::shared_ptr< Physics3D::RotationalVelocityMotor >"""
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RotationalVelocityMotorVelocityInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RotationalVelocityMotorVelocityInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RotationalVelocityMotorVelocityInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RotationalVelocityMotorVelocityInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RotationalVelocityMotorVelocityInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RotationalVelocityMotorVelocityInput self)"""
        return _SimulationSwig.RotationalVelocityMotorVelocityInput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_RotationalVelocityMotorVelocityInput

# Register RotationalVelocityMotorVelocityInput in _SimulationSwig:
_SimulationSwig.RotationalVelocityMotorVelocityInput_swigregister(RotationalVelocityMotorVelocityInput)

class TorqueMotorInput(Input):
    r"""Proxy of C++ Simulation::TorqueMotorInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorqueMotorInput self) -> TorqueMotorInput"""
        _SimulationSwig.TorqueMotorInput_swiginit(self, _SimulationSwig.new_TorqueMotorInput())

    def motor(self):
        r"""motor(TorqueMotorInput self) -> std::shared_ptr< DriveTrain::TorqueMotor >"""
        return _SimulationSwig.TorqueMotorInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(TorqueMotorInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.TorqueMotorInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TorqueMotorInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.TorqueMotorInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TorqueMotorInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.TorqueMotorInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TorqueMotorInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.TorqueMotorInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TorqueMotorInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.TorqueMotorInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TorqueMotorInput self)"""
        return _SimulationSwig.TorqueMotorInput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_TorqueMotorInput

# Register TorqueMotorInput in _SimulationSwig:
_SimulationSwig.TorqueMotorInput_swigregister(TorqueMotorInput)

class TorsionSpringAngleInput(Input):
    r"""Proxy of C++ Simulation::TorsionSpringAngleInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorsionSpringAngleInput self) -> TorsionSpringAngleInput"""
        _SimulationSwig.TorsionSpringAngleInput_swiginit(self, _SimulationSwig.new_TorsionSpringAngleInput())

    def spring(self):
        r"""spring(TorsionSpringAngleInput self) -> std::shared_ptr< Physics3D::TorsionSpring >"""
        return _SimulationSwig.TorsionSpringAngleInput_spring(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(TorsionSpringAngleInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.TorsionSpringAngleInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TorsionSpringAngleInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.TorsionSpringAngleInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TorsionSpringAngleInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.TorsionSpringAngleInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TorsionSpringAngleInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.TorsionSpringAngleInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TorsionSpringAngleInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.TorsionSpringAngleInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TorsionSpringAngleInput self)"""
        return _SimulationSwig.TorsionSpringAngleInput_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_TorsionSpringAngleInput

# Register TorsionSpringAngleInput in _SimulationSwig:
_SimulationSwig.TorsionSpringAngleInput_swigregister(TorsionSpringAngleInput)

class Vec3OutputSignal(OutputSignal):
    r"""Proxy of C++ Simulation::Vec3OutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vec3OutputSignal self) -> Vec3OutputSignal"""
        _SimulationSwig.Vec3OutputSignal_swiginit(self, _SimulationSwig.new_Vec3OutputSignal())

    def value(self):
        r"""value(Vec3OutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _SimulationSwig.Vec3OutputSignal_value(self)

    @staticmethod
    def create(vec3, source):
        r"""
        create(std::shared_ptr< Math::Vec3 > vec3, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Simulation::Vec3OutputSignal >

        Parameters
        ----------
        vec3: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Simulation::Output >

        """
        return _SimulationSwig.Vec3OutputSignal_create(vec3, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vec3OutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _SimulationSwig.Vec3OutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vec3OutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _SimulationSwig.Vec3OutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vec3OutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _SimulationSwig.Vec3OutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vec3OutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _SimulationSwig.Vec3OutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vec3OutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _SimulationSwig.Vec3OutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Vec3OutputSignal self)"""
        return _SimulationSwig.Vec3OutputSignal_triggerOnInit(self)
    __swig_destroy__ = _SimulationSwig.delete_Vec3OutputSignal

# Register Vec3OutputSignal in _SimulationSwig:
_SimulationSwig.Vec3OutputSignal_swigregister(Vec3OutputSignal)

def Vec3OutputSignal_create(vec3, source):
    r"""
    Vec3OutputSignal_create(std::shared_ptr< Math::Vec3 > vec3, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Simulation::Vec3OutputSignal >

    Parameters
    ----------
    vec3: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Simulation::Output >

    """
    return _SimulationSwig.Vec3OutputSignal_create(vec3, source)

class Simulation_HingeAngleOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::HingeAngleOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_HingeAngleOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_HingeAngleOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_HingeAngleOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type j) -> Simulation_HingeAngleOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type

        __setslice__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type j, Simulation_HingeAngleOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::HingeAngleOutput >,std::allocator< std::shared_ptr< Simulation::HingeAngleOutput > > > const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type

        __delitem__(Simulation_HingeAngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_HingeAngleOutput_Vector self, PySliceObject * slice) -> Simulation_HingeAngleOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_HingeAngleOutput_Vector self, PySliceObject * slice, Simulation_HingeAngleOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::HingeAngleOutput >,std::allocator< std::shared_ptr< Simulation::HingeAngleOutput > > > const &

        __setitem__(Simulation_HingeAngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_HingeAngleOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_HingeAngleOutput_Vector self, Simulation_HingeAngleOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > > &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_HingeAngleOutput_Vector self)"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_HingeAngleOutput_Vector self)"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator

        erase(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_HingeAngleOutput_Vector self) -> Simulation_HingeAngleOutput_Vector
        __init__(Simulation_HingeAngleOutput_Vector self, Simulation_HingeAngleOutput_Vector other) -> Simulation_HingeAngleOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > > const &

        __init__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type size) -> Simulation_HingeAngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type

        __init__(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & value) -> Simulation_HingeAngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_HingeAngleOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_HingeAngleOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type

        resize(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        insert(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type

        """
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngleOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngleOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_HingeAngleOutput_Vector

# Register Simulation_HingeAngleOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_HingeAngleOutput_Vector_swigregister(Simulation_HingeAngleOutput_Vector)

class Simulation_HingeAngularVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_HingeAngularVelocityOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type j) -> Simulation_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type

        __setslice__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type j, Simulation_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput >,std::allocator< std::shared_ptr< Simulation::HingeAngularVelocityOutput > > > const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type

        __delitem__(Simulation_HingeAngularVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_HingeAngularVelocityOutput_Vector self, PySliceObject * slice) -> Simulation_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_HingeAngularVelocityOutput_Vector self, PySliceObject * slice, Simulation_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput >,std::allocator< std::shared_ptr< Simulation::HingeAngularVelocityOutput > > > const &

        __setitem__(Simulation_HingeAngularVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_HingeAngularVelocityOutput_Vector self, Simulation_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > > &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_HingeAngularVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_HingeAngularVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator

        erase(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_HingeAngularVelocityOutput_Vector self) -> Simulation_HingeAngularVelocityOutput_Vector
        __init__(Simulation_HingeAngularVelocityOutput_Vector self, Simulation_HingeAngularVelocityOutput_Vector other) -> Simulation_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > > const &

        __init__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type size) -> Simulation_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type

        __init__(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & value) -> Simulation_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_HingeAngularVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type

        resize(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        insert(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type

        """
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::HingeAngularVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_HingeAngularVelocityOutput_Vector

# Register Simulation_HingeAngularVelocityOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_HingeAngularVelocityOutput_Vector_swigregister(Simulation_HingeAngularVelocityOutput_Vector)

class Simulation_Input_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::Input > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_Input_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_Input_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_Input_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Input_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_Input_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Input_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::size_type"""
        return _SimulationSwig.Simulation_Input_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i, std::vector< std::shared_ptr< Simulation::Input > >::difference_type j) -> Simulation_Input_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Input > >::difference_type

        """
        return _SimulationSwig.Simulation_Input_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i, std::vector< std::shared_ptr< Simulation::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Input > >::difference_type

        __setslice__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i, std::vector< std::shared_ptr< Simulation::Input > >::difference_type j, Simulation_Input_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::Input >,std::allocator< std::shared_ptr< Simulation::Input > > > const &

        """
        return _SimulationSwig.Simulation_Input_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i, std::vector< std::shared_ptr< Simulation::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Input > >::difference_type

        """
        return _SimulationSwig.Simulation_Input_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type

        __delitem__(Simulation_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_Input_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_Input_Vector self, PySliceObject * slice) -> Simulation_Input_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type

        """
        return _SimulationSwig.Simulation_Input_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_Input_Vector self, PySliceObject * slice, Simulation_Input_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::Input >,std::allocator< std::shared_ptr< Simulation::Input > > > const &

        __setitem__(Simulation_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::difference_type i, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Input > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::value_type"""
        return _SimulationSwig.Simulation_Input_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_Input_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Input_Vector_empty(self)

    def size(self):
        r"""size(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::size_type"""
        return _SimulationSwig.Simulation_Input_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_Input_Vector self, Simulation_Input_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::Input > > &

        """
        return _SimulationSwig.Simulation_Input_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::iterator"""
        return _SimulationSwig.Simulation_Input_Vector_begin(self)

    def end(self):
        r"""end(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::iterator"""
        return _SimulationSwig.Simulation_Input_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Input_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Input_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_Input_Vector self)"""
        return _SimulationSwig.Simulation_Input_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::allocator_type"""
        return _SimulationSwig.Simulation_Input_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_Input_Vector self)"""
        return _SimulationSwig.Simulation_Input_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Input > >::iterator

        erase(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::iterator first, std::vector< std::shared_ptr< Simulation::Input > >::iterator last) -> std::vector< std::shared_ptr< Simulation::Input > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::Input > >::iterator
        last: std::vector< std::shared_ptr< Simulation::Input > >::iterator

        """
        return _SimulationSwig.Simulation_Input_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_Input_Vector self) -> Simulation_Input_Vector
        __init__(Simulation_Input_Vector self, Simulation_Input_Vector other) -> Simulation_Input_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::Input > > const &

        __init__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type size) -> Simulation_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Input > >::size_type

        __init__(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type size, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & value) -> Simulation_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Input > >::size_type
        value: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        _SimulationSwig.Simulation_Input_Vector_swiginit(self, _SimulationSwig.new_Simulation_Input_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::value_type const &"""
        return _SimulationSwig.Simulation_Input_Vector_front(self)

    def back(self):
        r"""back(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::value_type const &"""
        return _SimulationSwig.Simulation_Input_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type n, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Input > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Input > >::size_type

        resize(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type new_size, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Input > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::iterator pos, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Input > >::iterator
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        insert(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::iterator pos, std::vector< std::shared_ptr< Simulation::Input > >::size_type n, std::vector< std::shared_ptr< Simulation::Input > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Input > >::iterator
        n: std::vector< std::shared_ptr< Simulation::Input > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Input > >::value_type const &

        """
        return _SimulationSwig.Simulation_Input_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_Input_Vector self, std::vector< std::shared_ptr< Simulation::Input > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Input > >::size_type

        """
        return _SimulationSwig.Simulation_Input_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_Input_Vector self) -> std::vector< std::shared_ptr< Simulation::Input > >::size_type"""
        return _SimulationSwig.Simulation_Input_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_Input_Vector

# Register Simulation_Input_Vector in _SimulationSwig:
_SimulationSwig.Simulation_Input_Vector_swigregister(Simulation_Input_Vector)

class Simulation_InputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::InputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_InputSignal_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_InputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_InputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_InputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_InputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_InputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type"""
        return _SimulationSwig.Simulation_InputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type j) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type

        __setslice__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type j, Simulation_InputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::InputSignal >,std::allocator< std::shared_ptr< Simulation::InputSignal > > > const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type

        __delitem__(Simulation_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_InputSignal_Vector self, PySliceObject * slice) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_InputSignal_Vector self, PySliceObject * slice, Simulation_InputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::InputSignal >,std::allocator< std::shared_ptr< Simulation::InputSignal > > > const &

        __setitem__(Simulation_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::InputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type"""
        return _SimulationSwig.Simulation_InputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_InputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_InputSignal_Vector_empty(self)

    def size(self):
        r"""size(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type"""
        return _SimulationSwig.Simulation_InputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_InputSignal_Vector self, Simulation_InputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::InputSignal > > &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator"""
        return _SimulationSwig.Simulation_InputSignal_Vector_begin(self)

    def end(self):
        r"""end(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator"""
        return _SimulationSwig.Simulation_InputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_InputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_InputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_InputSignal_Vector self)"""
        return _SimulationSwig.Simulation_InputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::allocator_type"""
        return _SimulationSwig.Simulation_InputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_InputSignal_Vector self)"""
        return _SimulationSwig.Simulation_InputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator

        erase(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator first, std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator last) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator
        last: std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_InputSignal_Vector self) -> Simulation_InputSignal_Vector
        __init__(Simulation_InputSignal_Vector self, Simulation_InputSignal_Vector other) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::InputSignal > > const &

        __init__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type size) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type

        __init__(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type size, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & value) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type
        value: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        _SimulationSwig.Simulation_InputSignal_Vector_swiginit(self, _SimulationSwig.new_Simulation_InputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_InputSignal_Vector_front(self)

    def back(self):
        r"""back(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_InputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type

        resize(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type new_size, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        insert(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::InputSignal > >::iterator
        n: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::InputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_InputSignal_Vector self, std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type

        """
        return _SimulationSwig.Simulation_InputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_InputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::InputSignal > >::size_type"""
        return _SimulationSwig.Simulation_InputSignal_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_InputSignal_Vector

# Register Simulation_InputSignal_Vector in _SimulationSwig:
_SimulationSwig.Simulation_InputSignal_Vector_swigregister(Simulation_InputSignal_Vector)

class Simulation_LinearVelocityMotorVelocityInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type j) -> Simulation_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type

        __setslice__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type j, Simulation_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > > > const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type

        __delitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice) -> Simulation_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice, Simulation_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > > > const &

        __setitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_LinearVelocityMotorVelocityInput_Vector self, Simulation_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > > &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_LinearVelocityMotorVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::allocator_type"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_LinearVelocityMotorVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator

        erase(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator first, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> Simulation_LinearVelocityMotorVelocityInput_Vector
        __init__(Simulation_LinearVelocityMotorVelocityInput_Vector self, Simulation_LinearVelocityMotorVelocityInput_Vector other) -> Simulation_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > > const &

        __init__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type size) -> Simulation_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type

        __init__(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type size, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & value) -> Simulation_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_swiginit(self, _SimulationSwig.new_Simulation_LinearVelocityMotorVelocityInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_front(self)

    def back(self):
        r"""back(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type

        resize(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        insert(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type

        """
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::LinearVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_LinearVelocityMotorVelocityInput_Vector

# Register Simulation_LinearVelocityMotorVelocityInput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_LinearVelocityMotorVelocityInput_Vector_swigregister(Simulation_LinearVelocityMotorVelocityInput_Vector)

class Simulation_Output_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::Output > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_Output_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_Output_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_Output_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Output_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_Output_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Output_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::size_type"""
        return _SimulationSwig.Simulation_Output_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i, std::vector< std::shared_ptr< Simulation::Output > >::difference_type j) -> Simulation_Output_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Output > >::difference_type

        """
        return _SimulationSwig.Simulation_Output_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i, std::vector< std::shared_ptr< Simulation::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Output > >::difference_type

        __setslice__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i, std::vector< std::shared_ptr< Simulation::Output > >::difference_type j, Simulation_Output_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::Output >,std::allocator< std::shared_ptr< Simulation::Output > > > const &

        """
        return _SimulationSwig.Simulation_Output_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i, std::vector< std::shared_ptr< Simulation::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Output > >::difference_type

        """
        return _SimulationSwig.Simulation_Output_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type

        __delitem__(Simulation_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_Output_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_Output_Vector self, PySliceObject * slice) -> Simulation_Output_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type

        """
        return _SimulationSwig.Simulation_Output_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_Output_Vector self, PySliceObject * slice, Simulation_Output_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::Output >,std::allocator< std::shared_ptr< Simulation::Output > > > const &

        __setitem__(Simulation_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::difference_type i, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Output > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::value_type"""
        return _SimulationSwig.Simulation_Output_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_Output_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Output_Vector_empty(self)

    def size(self):
        r"""size(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::size_type"""
        return _SimulationSwig.Simulation_Output_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_Output_Vector self, Simulation_Output_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::Output > > &

        """
        return _SimulationSwig.Simulation_Output_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::iterator"""
        return _SimulationSwig.Simulation_Output_Vector_begin(self)

    def end(self):
        r"""end(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::iterator"""
        return _SimulationSwig.Simulation_Output_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Output_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Output_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_Output_Vector self)"""
        return _SimulationSwig.Simulation_Output_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::allocator_type"""
        return _SimulationSwig.Simulation_Output_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_Output_Vector self)"""
        return _SimulationSwig.Simulation_Output_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Output > >::iterator

        erase(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::iterator first, std::vector< std::shared_ptr< Simulation::Output > >::iterator last) -> std::vector< std::shared_ptr< Simulation::Output > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::Output > >::iterator
        last: std::vector< std::shared_ptr< Simulation::Output > >::iterator

        """
        return _SimulationSwig.Simulation_Output_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_Output_Vector self) -> Simulation_Output_Vector
        __init__(Simulation_Output_Vector self, Simulation_Output_Vector other) -> Simulation_Output_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::Output > > const &

        __init__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type size) -> Simulation_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Output > >::size_type

        __init__(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type size, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & value) -> Simulation_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Output > >::size_type
        value: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        _SimulationSwig.Simulation_Output_Vector_swiginit(self, _SimulationSwig.new_Simulation_Output_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::value_type const &"""
        return _SimulationSwig.Simulation_Output_Vector_front(self)

    def back(self):
        r"""back(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::value_type const &"""
        return _SimulationSwig.Simulation_Output_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type n, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Output > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Output > >::size_type

        resize(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type new_size, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Output > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::iterator pos, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Output > >::iterator
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        insert(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::iterator pos, std::vector< std::shared_ptr< Simulation::Output > >::size_type n, std::vector< std::shared_ptr< Simulation::Output > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Output > >::iterator
        n: std::vector< std::shared_ptr< Simulation::Output > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Output > >::value_type const &

        """
        return _SimulationSwig.Simulation_Output_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_Output_Vector self, std::vector< std::shared_ptr< Simulation::Output > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Output > >::size_type

        """
        return _SimulationSwig.Simulation_Output_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_Output_Vector self) -> std::vector< std::shared_ptr< Simulation::Output > >::size_type"""
        return _SimulationSwig.Simulation_Output_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_Output_Vector

# Register Simulation_Output_Vector in _SimulationSwig:
_SimulationSwig.Simulation_Output_Vector_swigregister(Simulation_Output_Vector)

class Simulation_OutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::OutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_OutputSignal_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_OutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_OutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_OutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type j) -> Simulation_OutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type

        __setslice__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type j, Simulation_OutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::OutputSignal >,std::allocator< std::shared_ptr< Simulation::OutputSignal > > > const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type

        __delitem__(Simulation_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_OutputSignal_Vector self, PySliceObject * slice) -> Simulation_OutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_OutputSignal_Vector self, PySliceObject * slice, Simulation_OutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::OutputSignal >,std::allocator< std::shared_ptr< Simulation::OutputSignal > > > const &

        __setitem__(Simulation_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::OutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_OutputSignal_Vector self, Simulation_OutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::OutputSignal > > &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_OutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::allocator_type"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_OutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator

        erase(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator first, std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_OutputSignal_Vector self) -> Simulation_OutputSignal_Vector
        __init__(Simulation_OutputSignal_Vector self, Simulation_OutputSignal_Vector other) -> Simulation_OutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::OutputSignal > > const &

        __init__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type size) -> Simulation_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type

        __init__(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type size, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & value) -> Simulation_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        _SimulationSwig.Simulation_OutputSignal_Vector_swiginit(self, _SimulationSwig.new_Simulation_OutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_front(self)

    def back(self):
        r"""back(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type

        resize(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        insert(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::OutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type

        """
        return _SimulationSwig.Simulation_OutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_OutputSignal_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_OutputSignal_Vector

# Register Simulation_OutputSignal_Vector in _SimulationSwig:
_SimulationSwig.Simulation_OutputSignal_Vector_swigregister(Simulation_OutputSignal_Vector)

class Simulation_PrismaticPositionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_PrismaticPositionOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_PrismaticPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_PrismaticPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type j) -> Simulation_PrismaticPositionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type

        __setslice__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type j, Simulation_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput >,std::allocator< std::shared_ptr< Simulation::PrismaticPositionOutput > > > const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type

        __delitem__(Simulation_PrismaticPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_PrismaticPositionOutput_Vector self, PySliceObject * slice) -> Simulation_PrismaticPositionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_PrismaticPositionOutput_Vector self, PySliceObject * slice, Simulation_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput >,std::allocator< std::shared_ptr< Simulation::PrismaticPositionOutput > > > const &

        __setitem__(Simulation_PrismaticPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_PrismaticPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_PrismaticPositionOutput_Vector self, Simulation_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > > &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_PrismaticPositionOutput_Vector self)"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_PrismaticPositionOutput_Vector self)"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator

        erase(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_PrismaticPositionOutput_Vector self) -> Simulation_PrismaticPositionOutput_Vector
        __init__(Simulation_PrismaticPositionOutput_Vector self, Simulation_PrismaticPositionOutput_Vector other) -> Simulation_PrismaticPositionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > > const &

        __init__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type size) -> Simulation_PrismaticPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type

        __init__(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & value) -> Simulation_PrismaticPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_PrismaticPositionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type

        resize(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        insert(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type

        """
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticPositionOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_PrismaticPositionOutput_Vector

# Register Simulation_PrismaticPositionOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_PrismaticPositionOutput_Vector_swigregister(Simulation_PrismaticPositionOutput_Vector)

class Simulation_PrismaticVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_PrismaticVelocityOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_PrismaticVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_PrismaticVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type j) -> Simulation_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type

        __setslice__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type j, Simulation_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput >,std::allocator< std::shared_ptr< Simulation::PrismaticVelocityOutput > > > const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type

        __delitem__(Simulation_PrismaticVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_PrismaticVelocityOutput_Vector self, PySliceObject * slice) -> Simulation_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_PrismaticVelocityOutput_Vector self, PySliceObject * slice, Simulation_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput >,std::allocator< std::shared_ptr< Simulation::PrismaticVelocityOutput > > > const &

        __setitem__(Simulation_PrismaticVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_PrismaticVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_PrismaticVelocityOutput_Vector self, Simulation_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > > &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_PrismaticVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_PrismaticVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator

        erase(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_PrismaticVelocityOutput_Vector self) -> Simulation_PrismaticVelocityOutput_Vector
        __init__(Simulation_PrismaticVelocityOutput_Vector self, Simulation_PrismaticVelocityOutput_Vector other) -> Simulation_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > > const &

        __init__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type size) -> Simulation_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type

        __init__(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & value) -> Simulation_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_PrismaticVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type

        resize(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        insert(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type

        """
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::PrismaticVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_PrismaticVelocityOutput_Vector

# Register Simulation_PrismaticVelocityOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_PrismaticVelocityOutput_Vector_swigregister(Simulation_PrismaticVelocityOutput_Vector)

class Simulation_RealInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RealInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RealInputSignal_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RealInputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RealInputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type j) -> Simulation_RealInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type

        __setslice__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type j, Simulation_RealInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RealInputSignal >,std::allocator< std::shared_ptr< Simulation::RealInputSignal > > > const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type

        __delitem__(Simulation_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RealInputSignal_Vector self, PySliceObject * slice) -> Simulation_RealInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RealInputSignal_Vector self, PySliceObject * slice, Simulation_RealInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RealInputSignal >,std::allocator< std::shared_ptr< Simulation::RealInputSignal > > > const &

        __setitem__(Simulation_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RealInputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RealInputSignal_Vector self, Simulation_RealInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RealInputSignal > > &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RealInputSignal_Vector self)"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::allocator_type"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RealInputSignal_Vector self)"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator

        erase(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator first, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RealInputSignal_Vector self) -> Simulation_RealInputSignal_Vector
        __init__(Simulation_RealInputSignal_Vector self, Simulation_RealInputSignal_Vector other) -> Simulation_RealInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RealInputSignal > > const &

        __init__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type size) -> Simulation_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type

        __init__(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type size, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & value) -> Simulation_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        _SimulationSwig.Simulation_RealInputSignal_Vector_swiginit(self, _SimulationSwig.new_Simulation_RealInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_front(self)

    def back(self):
        r"""back(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type

        resize(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        insert(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RealInputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type

        """
        return _SimulationSwig.Simulation_RealInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealInputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealInputSignal_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RealInputSignal_Vector

# Register Simulation_RealInputSignal_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RealInputSignal_Vector_swigregister(Simulation_RealInputSignal_Vector)

class Simulation_RealOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RealOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RealOutputSignal_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RealOutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RealOutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type j) -> Simulation_RealOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type

        __setslice__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type j, Simulation_RealOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > > const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type

        __delitem__(Simulation_RealOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RealOutputSignal_Vector self, PySliceObject * slice) -> Simulation_RealOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RealOutputSignal_Vector self, PySliceObject * slice, Simulation_RealOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > > const &

        __setitem__(Simulation_RealOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RealOutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RealOutputSignal_Vector self, Simulation_RealOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RealOutputSignal > > &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RealOutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::allocator_type"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RealOutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator

        erase(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator first, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RealOutputSignal_Vector self) -> Simulation_RealOutputSignal_Vector
        __init__(Simulation_RealOutputSignal_Vector self, Simulation_RealOutputSignal_Vector other) -> Simulation_RealOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RealOutputSignal > > const &

        __init__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type size) -> Simulation_RealOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type

        __init__(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type size, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & value) -> Simulation_RealOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        _SimulationSwig.Simulation_RealOutputSignal_Vector_swiginit(self, _SimulationSwig.new_Simulation_RealOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type

        resize(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        insert(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type

        """
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::RealOutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_RealOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RealOutputSignal_Vector

# Register Simulation_RealOutputSignal_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RealOutputSignal_Vector_swigregister(Simulation_RealOutputSignal_Vector)

class Simulation_RigidBodyPositionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RigidBodyPositionOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RigidBodyPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RigidBodyPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type j) -> Simulation_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type

        __setslice__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type j, Simulation_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput >,std::allocator< std::shared_ptr< Simulation::RigidBodyPositionOutput > > > const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type

        __delitem__(Simulation_RigidBodyPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RigidBodyPositionOutput_Vector self, PySliceObject * slice) -> Simulation_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RigidBodyPositionOutput_Vector self, PySliceObject * slice, Simulation_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput >,std::allocator< std::shared_ptr< Simulation::RigidBodyPositionOutput > > > const &

        __setitem__(Simulation_RigidBodyPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RigidBodyPositionOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RigidBodyPositionOutput_Vector self, Simulation_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > > &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RigidBodyPositionOutput_Vector self)"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RigidBodyPositionOutput_Vector self)"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator

        erase(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RigidBodyPositionOutput_Vector self) -> Simulation_RigidBodyPositionOutput_Vector
        __init__(Simulation_RigidBodyPositionOutput_Vector self, Simulation_RigidBodyPositionOutput_Vector other) -> Simulation_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > > const &

        __init__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type size) -> Simulation_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type

        __init__(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & value) -> Simulation_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_RigidBodyPositionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type

        resize(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        insert(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type

        """
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyPositionOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RigidBodyPositionOutput_Vector

# Register Simulation_RigidBodyPositionOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RigidBodyPositionOutput_Vector_swigregister(Simulation_RigidBodyPositionOutput_Vector)

class Simulation_RigidBodyVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RigidBodyVelocityOutput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type j) -> Simulation_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type

        __setslice__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type j, Simulation_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput >,std::allocator< std::shared_ptr< Simulation::RigidBodyVelocityOutput > > > const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type

        __delitem__(Simulation_RigidBodyVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RigidBodyVelocityOutput_Vector self, PySliceObject * slice) -> Simulation_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RigidBodyVelocityOutput_Vector self, PySliceObject * slice, Simulation_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput >,std::allocator< std::shared_ptr< Simulation::RigidBodyVelocityOutput > > > const &

        __setitem__(Simulation_RigidBodyVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RigidBodyVelocityOutput_Vector self, Simulation_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > > &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RigidBodyVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::allocator_type"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RigidBodyVelocityOutput_Vector self)"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator

        erase(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RigidBodyVelocityOutput_Vector self) -> Simulation_RigidBodyVelocityOutput_Vector
        __init__(Simulation_RigidBodyVelocityOutput_Vector self, Simulation_RigidBodyVelocityOutput_Vector other) -> Simulation_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > > const &

        __init__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type size) -> Simulation_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type

        __init__(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & value) -> Simulation_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_swiginit(self, _SimulationSwig.new_Simulation_RigidBodyVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type

        resize(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        insert(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type

        """
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Simulation::RigidBodyVelocityOutput > >::size_type"""
        return _SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RigidBodyVelocityOutput_Vector

# Register Simulation_RigidBodyVelocityOutput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RigidBodyVelocityOutput_Vector_swigregister(Simulation_RigidBodyVelocityOutput_Vector)

class Simulation_RotationalVelocityMotor1DVelocityInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type j) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type

        __setslice__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type j, Simulation_RotationalVelocityMotor1DVelocityInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput >,std::allocator< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > > > const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type

        __delitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, PySliceObject * slice) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, PySliceObject * slice, Simulation_RotationalVelocityMotor1DVelocityInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput >,std::allocator< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > > > const &

        __setitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, Simulation_RotationalVelocityMotor1DVelocityInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > > &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::allocator_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator

        erase(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator first, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector
        __init__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, Simulation_RotationalVelocityMotor1DVelocityInput_Vector other) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > > const &

        __init__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type size) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type

        __init__(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type size, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & value) -> Simulation_RotationalVelocityMotor1DVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_swiginit(self, _SimulationSwig.new_Simulation_RotationalVelocityMotor1DVelocityInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_front(self)

    def back(self):
        r"""back(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type

        resize(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        insert(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RotationalVelocityMotor1DVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotor1DVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RotationalVelocityMotor1DVelocityInput_Vector

# Register Simulation_RotationalVelocityMotor1DVelocityInput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RotationalVelocityMotor1DVelocityInput_Vector_swigregister(Simulation_RotationalVelocityMotor1DVelocityInput_Vector)

class Simulation_RotationalVelocityMotorVelocityInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type j) -> Simulation_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type

        __setslice__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type j, Simulation_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > > > const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type

        __delitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice) -> Simulation_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice, Simulation_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > > > const &

        __setitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_RotationalVelocityMotorVelocityInput_Vector self, Simulation_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > > &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_RotationalVelocityMotorVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::allocator_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_RotationalVelocityMotorVelocityInput_Vector self)"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator

        erase(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator first, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> Simulation_RotationalVelocityMotorVelocityInput_Vector
        __init__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, Simulation_RotationalVelocityMotorVelocityInput_Vector other) -> Simulation_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > > const &

        __init__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type size) -> Simulation_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type

        __init__(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type size, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & value) -> Simulation_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_swiginit(self, _SimulationSwig.new_Simulation_RotationalVelocityMotorVelocityInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_front(self)

    def back(self):
        r"""back(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type

        resize(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        insert(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type

        """
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Simulation::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_RotationalVelocityMotorVelocityInput_Vector

# Register Simulation_RotationalVelocityMotorVelocityInput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_RotationalVelocityMotorVelocityInput_Vector_swigregister(Simulation_RotationalVelocityMotorVelocityInput_Vector)

class Simulation_TorqueMotorInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::TorqueMotorInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_TorqueMotorInput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_TorqueMotorInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_TorqueMotorInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type j) -> Simulation_TorqueMotorInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type

        __setslice__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type j, Simulation_TorqueMotorInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::TorqueMotorInput >,std::allocator< std::shared_ptr< Simulation::TorqueMotorInput > > > const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type

        __delitem__(Simulation_TorqueMotorInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_TorqueMotorInput_Vector self, PySliceObject * slice) -> Simulation_TorqueMotorInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_TorqueMotorInput_Vector self, PySliceObject * slice, Simulation_TorqueMotorInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::TorqueMotorInput >,std::allocator< std::shared_ptr< Simulation::TorqueMotorInput > > > const &

        __setitem__(Simulation_TorqueMotorInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_TorqueMotorInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_TorqueMotorInput_Vector self, Simulation_TorqueMotorInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > > &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_TorqueMotorInput_Vector self)"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::allocator_type"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_TorqueMotorInput_Vector self)"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator

        erase(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator first, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_TorqueMotorInput_Vector self) -> Simulation_TorqueMotorInput_Vector
        __init__(Simulation_TorqueMotorInput_Vector self, Simulation_TorqueMotorInput_Vector other) -> Simulation_TorqueMotorInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > > const &

        __init__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type size) -> Simulation_TorqueMotorInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type

        __init__(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type size, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & value) -> Simulation_TorqueMotorInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        _SimulationSwig.Simulation_TorqueMotorInput_Vector_swiginit(self, _SimulationSwig.new_Simulation_TorqueMotorInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_front(self)

    def back(self):
        r"""back(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type n, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type

        resize(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        insert(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type n, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type

        """
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorqueMotorInput > >::size_type"""
        return _SimulationSwig.Simulation_TorqueMotorInput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_TorqueMotorInput_Vector

# Register Simulation_TorqueMotorInput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_TorqueMotorInput_Vector_swigregister(Simulation_TorqueMotorInput_Vector)

class Simulation_TorsionSpringAngleInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_TorsionSpringAngleInput_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_TorsionSpringAngleInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_TorsionSpringAngleInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type j) -> Simulation_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type

        __setslice__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type j, Simulation_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput >,std::allocator< std::shared_ptr< Simulation::TorsionSpringAngleInput > > > const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type

        __delitem__(Simulation_TorsionSpringAngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_TorsionSpringAngleInput_Vector self, PySliceObject * slice) -> Simulation_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_TorsionSpringAngleInput_Vector self, PySliceObject * slice, Simulation_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput >,std::allocator< std::shared_ptr< Simulation::TorsionSpringAngleInput > > > const &

        __setitem__(Simulation_TorsionSpringAngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_TorsionSpringAngleInput_Vector self) -> bool"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_empty(self)

    def size(self):
        r"""size(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_TorsionSpringAngleInput_Vector self, Simulation_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > > &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_begin(self)

    def end(self):
        r"""end(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::reverse_iterator"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_TorsionSpringAngleInput_Vector self)"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::allocator_type"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_TorsionSpringAngleInput_Vector self)"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator

        erase(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator first, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator last) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator
        last: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_TorsionSpringAngleInput_Vector self) -> Simulation_TorsionSpringAngleInput_Vector
        __init__(Simulation_TorsionSpringAngleInput_Vector self, Simulation_TorsionSpringAngleInput_Vector other) -> Simulation_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > > const &

        __init__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type size) -> Simulation_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type

        __init__(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type size, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & value) -> Simulation_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type
        value: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_swiginit(self, _SimulationSwig.new_Simulation_TorsionSpringAngleInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_front(self)

    def back(self):
        r"""back(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type n, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type

        resize(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type new_size, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        insert(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator pos, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type n, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::iterator
        n: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::value_type const &

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type

        """
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Simulation::TorsionSpringAngleInput > >::size_type"""
        return _SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_TorsionSpringAngleInput_Vector

# Register Simulation_TorsionSpringAngleInput_Vector in _SimulationSwig:
_SimulationSwig.Simulation_TorsionSpringAngleInput_Vector_swigregister(Simulation_TorsionSpringAngleInput_Vector)

class Simulation_Vec3OutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Simulation_Vec3OutputSignal_Vector self) -> SwigPyIterator"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Simulation_Vec3OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Simulation_Vec3OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type j) -> Simulation_Vec3OutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type

        __setslice__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type j, Simulation_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal >,std::allocator< std::shared_ptr< Simulation::Vec3OutputSignal > > > const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type

        __delitem__(Simulation_Vec3OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Simulation_Vec3OutputSignal_Vector self, PySliceObject * slice) -> Simulation_Vec3OutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Simulation_Vec3OutputSignal_Vector self, PySliceObject * slice, Simulation_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal >,std::allocator< std::shared_ptr< Simulation::Vec3OutputSignal > > > const &

        __setitem__(Simulation_Vec3OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Simulation_Vec3OutputSignal_Vector self) -> bool"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Simulation_Vec3OutputSignal_Vector self, Simulation_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > > &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::reverse_iterator"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Simulation_Vec3OutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::allocator_type"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Simulation_Vec3OutputSignal_Vector self)"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator

        erase(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator first, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Simulation_Vec3OutputSignal_Vector self) -> Simulation_Vec3OutputSignal_Vector
        __init__(Simulation_Vec3OutputSignal_Vector self, Simulation_Vec3OutputSignal_Vector other) -> Simulation_Vec3OutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > > const &

        __init__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type size) -> Simulation_Vec3OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type

        __init__(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type size, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & value) -> Simulation_Vec3OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        _SimulationSwig.Simulation_Vec3OutputSignal_Vector_swiginit(self, _SimulationSwig.new_Simulation_Vec3OutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_front(self)

    def back(self):
        r"""back(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type

        resize(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        insert(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type n, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::value_type const &

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Simulation_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type

        """
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Simulation_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Simulation::Vec3OutputSignal > >::size_type"""
        return _SimulationSwig.Simulation_Vec3OutputSignal_Vector_capacity(self)
    __swig_destroy__ = _SimulationSwig.delete_Simulation_Vec3OutputSignal_Vector

# Register Simulation_Vec3OutputSignal_Vector in _SimulationSwig:
_SimulationSwig.Simulation_Vec3OutputSignal_Vector_swigregister(Simulation_Vec3OutputSignal_Vector)



