# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Physics3DSwig
else:
    import _Physics3DSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _Physics3DSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Physics3DSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Physics3DSwig:
_Physics3DSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
class Body(rebrick.Physics.Body):
    r"""Proxy of C++ Physics3D::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Body self) -> Body"""
        _Physics3DSwig.Body_swiginit(self, _Physics3DSwig.new_Body())

    def inertia(self):
        r"""inertia(Body self) -> std::shared_ptr< Physics3D::Inertia >"""
        return _Physics3DSwig.Body_inertia(self)

    def kinematics(self):
        r"""kinematics(Body self) -> std::shared_ptr< Physics3D::Kinematics >"""
        return _Physics3DSwig.Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Body self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Body_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Body self)"""
        return _Physics3DSwig.Body_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Body

# Register Body in _Physics3DSwig:
_Physics3DSwig.Body_swigregister(Body)

class OrientedCoulombFriction(rebrick.Physics.CoulombFriction):
    r"""Proxy of C++ Physics3D::OrientedCoulombFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OrientedCoulombFriction self) -> OrientedCoulombFriction"""
        _Physics3DSwig.OrientedCoulombFriction_swiginit(self, _Physics3DSwig.new_OrientedCoulombFriction())

    def primary_direction(self):
        r"""primary_direction(OrientedCoulombFriction self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.OrientedCoulombFriction_primary_direction(self)

    def secondary_coefficient(self):
        r"""secondary_coefficient(OrientedCoulombFriction self) -> double"""
        return _Physics3DSwig.OrientedCoulombFriction_secondary_coefficient(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(OrientedCoulombFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.OrientedCoulombFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(OrientedCoulombFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.OrientedCoulombFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(OrientedCoulombFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.OrientedCoulombFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(OrientedCoulombFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.OrientedCoulombFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(OrientedCoulombFriction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.OrientedCoulombFriction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(OrientedCoulombFriction self)"""
        return _Physics3DSwig.OrientedCoulombFriction_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_OrientedCoulombFriction

# Register OrientedCoulombFriction in _Physics3DSwig:
_Physics3DSwig.OrientedCoulombFriction_swigregister(OrientedCoulombFriction)

class BodyOrientedCoulombFriction(OrientedCoulombFriction):
    r"""Proxy of C++ Physics3D::BodyOrientedCoulombFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BodyOrientedCoulombFriction self) -> BodyOrientedCoulombFriction"""
        _Physics3DSwig.BodyOrientedCoulombFriction_swiginit(self, _Physics3DSwig.new_BodyOrientedCoulombFriction())

    def reference_body(self):
        r"""reference_body(BodyOrientedCoulombFriction self) -> std::shared_ptr< Physics3D::Body >"""
        return _Physics3DSwig.BodyOrientedCoulombFriction_reference_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(BodyOrientedCoulombFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.BodyOrientedCoulombFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(BodyOrientedCoulombFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.BodyOrientedCoulombFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(BodyOrientedCoulombFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.BodyOrientedCoulombFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(BodyOrientedCoulombFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.BodyOrientedCoulombFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(BodyOrientedCoulombFriction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.BodyOrientedCoulombFriction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(BodyOrientedCoulombFriction self)"""
        return _Physics3DSwig.BodyOrientedCoulombFriction_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_BodyOrientedCoulombFriction

# Register BodyOrientedCoulombFriction in _Physics3DSwig:
_Physics3DSwig.BodyOrientedCoulombFriction_swigregister(BodyOrientedCoulombFriction)

class Geometry(rebrick.Physics.Geometry):
    r"""Proxy of C++ Physics3D::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Geometry self) -> Geometry"""
        _Physics3DSwig.Geometry_swiginit(self, _Physics3DSwig.new_Geometry())

    def local_transform(self):
        r"""local_transform(Geometry self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Geometry_local_transform(self)

    def material(self):
        r"""material(Geometry self) -> std::shared_ptr< Physics::Material >"""
        return _Physics3DSwig.Geometry_material(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Geometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Geometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Geometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Geometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Geometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Geometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Geometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Geometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Geometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Geometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Geometry self)"""
        return _Physics3DSwig.Geometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Geometry

# Register Geometry in _Physics3DSwig:
_Physics3DSwig.Geometry_swigregister(Geometry)

class Box(Geometry):
    r"""Proxy of C++ Physics3D::Box class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Box self) -> Box"""
        _Physics3DSwig.Box_swiginit(self, _Physics3DSwig.new_Box())

    def size(self):
        r"""size(Box self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Box_size(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Box self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Box_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Box self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Box_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Box self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Box_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Box self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Box_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Box self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Box_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Box self)"""
        return _Physics3DSwig.Box_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Box

# Register Box in _Physics3DSwig:
_Physics3DSwig.Box_swigregister(Box)

class CollisionGroup(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::CollisionGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CollisionGroup self) -> CollisionGroup"""
        _Physics3DSwig.CollisionGroup_swiginit(self, _Physics3DSwig.new_CollisionGroup())

    def systems(self):
        r"""systems(CollisionGroup self) -> Physics3D_System_Vector"""
        return _Physics3DSwig.CollisionGroup_systems(self)

    def bodies(self):
        r"""bodies(CollisionGroup self) -> Physics3D_RigidBody_Vector"""
        return _Physics3DSwig.CollisionGroup_bodies(self)

    def geometries(self):
        r"""geometries(CollisionGroup self) -> Physics3D_Geometry_Vector"""
        return _Physics3DSwig.CollisionGroup_geometries(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(CollisionGroup self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.CollisionGroup_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(CollisionGroup self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.CollisionGroup_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(CollisionGroup self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.CollisionGroup_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(CollisionGroup self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.CollisionGroup_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(CollisionGroup self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.CollisionGroup_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(CollisionGroup self)"""
        return _Physics3DSwig.CollisionGroup_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_CollisionGroup

# Register CollisionGroup in _Physics3DSwig:
_Physics3DSwig.CollisionGroup_swigregister(CollisionGroup)

class Cylinder(Geometry):
    r"""Proxy of C++ Physics3D::Cylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Cylinder self) -> Cylinder"""
        _Physics3DSwig.Cylinder_swiginit(self, _Physics3DSwig.new_Cylinder())

    def radius(self):
        r"""radius(Cylinder self) -> double"""
        return _Physics3DSwig.Cylinder_radius(self)

    def height(self):
        r"""height(Cylinder self) -> double"""
        return _Physics3DSwig.Cylinder_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Cylinder self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Cylinder_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Cylinder self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Cylinder_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Cylinder self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Cylinder_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Cylinder self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Cylinder_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Cylinder self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Cylinder_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Cylinder self)"""
        return _Physics3DSwig.Cylinder_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Cylinder

# Register Cylinder in _Physics3DSwig:
_Physics3DSwig.Cylinder_swigregister(Cylinder)

class Interaction(rebrick.Physics.Interaction):
    r"""Proxy of C++ Physics3D::Interaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interaction self) -> Interaction"""
        _Physics3DSwig.Interaction_swiginit(self, _Physics3DSwig.new_Interaction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interaction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interaction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interaction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interaction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interaction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interaction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interaction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interaction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interaction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interaction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interaction self)"""
        return _Physics3DSwig.Interaction_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interaction

# Register Interaction in _Physics3DSwig:
_Physics3DSwig.Interaction_swigregister(Interaction)

class Mate(Interaction):
    r"""Proxy of C++ Physics3D::Mate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Mate self) -> Mate"""
        _Physics3DSwig.Mate_swiginit(self, _Physics3DSwig.new_Mate())

    def charges(self):
        r"""charges(Mate self) -> Physics3D_MateConnector_Vector"""
        return _Physics3DSwig.Mate_charges(self)

    def stiffness(self):
        r"""stiffness(Mate self) -> std::shared_ptr< Physics3D::MateStiffness >"""
        return _Physics3DSwig.Mate_stiffness(self)

    def damping(self):
        r"""damping(Mate self) -> std::shared_ptr< Physics3D::MateDamping >"""
        return _Physics3DSwig.Mate_damping(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Mate self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Mate_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Mate self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Mate_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Mate self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Mate_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Mate self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Mate_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Mate self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Mate_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Mate self)"""
        return _Physics3DSwig.Mate_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Mate

# Register Mate in _Physics3DSwig:
_Physics3DSwig.Mate_swigregister(Mate)

class Cylindrical(Mate):
    r"""Proxy of C++ Physics3D::Cylindrical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Cylindrical self) -> Cylindrical"""
        _Physics3DSwig.Cylindrical_swiginit(self, _Physics3DSwig.new_Cylindrical())

    def initial_angle(self):
        r"""initial_angle(Cylindrical self) -> double"""
        return _Physics3DSwig.Cylindrical_initial_angle(self)

    def position(self):
        r"""position(Cylindrical self) -> double"""
        return _Physics3DSwig.Cylindrical_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Cylindrical self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Cylindrical_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Cylindrical self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Cylindrical_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Cylindrical self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Cylindrical_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Cylindrical self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Cylindrical_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Cylindrical self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Cylindrical_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Cylindrical self)"""
        return _Physics3DSwig.Cylindrical_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Cylindrical

# Register Cylindrical in _Physics3DSwig:
_Physics3DSwig.Cylindrical_swigregister(Cylindrical)

class DisableCollisionPair(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::DisableCollisionPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DisableCollisionPair self) -> DisableCollisionPair"""
        _Physics3DSwig.DisableCollisionPair_swiginit(self, _Physics3DSwig.new_DisableCollisionPair())

    def group1(self):
        r"""group1(DisableCollisionPair self) -> std::shared_ptr< Physics3D::CollisionGroup >"""
        return _Physics3DSwig.DisableCollisionPair_group1(self)

    def group2(self):
        r"""group2(DisableCollisionPair self) -> std::shared_ptr< Physics3D::CollisionGroup >"""
        return _Physics3DSwig.DisableCollisionPair_group2(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DisableCollisionPair self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.DisableCollisionPair_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DisableCollisionPair self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.DisableCollisionPair_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DisableCollisionPair self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.DisableCollisionPair_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DisableCollisionPair self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.DisableCollisionPair_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DisableCollisionPair self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.DisableCollisionPair_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(DisableCollisionPair self)"""
        return _Physics3DSwig.DisableCollisionPair_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_DisableCollisionPair

# Register DisableCollisionPair in _Physics3DSwig:
_Physics3DSwig.DisableCollisionPair_swigregister(DisableCollisionPair)

class GeometryOrientedCoulombFriction(OrientedCoulombFriction):
    r"""Proxy of C++ Physics3D::GeometryOrientedCoulombFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GeometryOrientedCoulombFriction self) -> GeometryOrientedCoulombFriction"""
        _Physics3DSwig.GeometryOrientedCoulombFriction_swiginit(self, _Physics3DSwig.new_GeometryOrientedCoulombFriction())

    def reference_geometry(self):
        r"""reference_geometry(GeometryOrientedCoulombFriction self) -> std::shared_ptr< Physics3D::Geometry >"""
        return _Physics3DSwig.GeometryOrientedCoulombFriction_reference_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(GeometryOrientedCoulombFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.GeometryOrientedCoulombFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(GeometryOrientedCoulombFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.GeometryOrientedCoulombFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(GeometryOrientedCoulombFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.GeometryOrientedCoulombFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(GeometryOrientedCoulombFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.GeometryOrientedCoulombFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(GeometryOrientedCoulombFriction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.GeometryOrientedCoulombFriction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(GeometryOrientedCoulombFriction self)"""
        return _Physics3DSwig.GeometryOrientedCoulombFriction_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_GeometryOrientedCoulombFriction

# Register GeometryOrientedCoulombFriction in _Physics3DSwig:
_Physics3DSwig.GeometryOrientedCoulombFriction_swigregister(GeometryOrientedCoulombFriction)

class Hinge(Mate):
    r"""Proxy of C++ Physics3D::Hinge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Hinge self) -> Hinge"""
        _Physics3DSwig.Hinge_swiginit(self, _Physics3DSwig.new_Hinge())

    def initial_angle(self):
        r"""initial_angle(Hinge self) -> double"""
        return _Physics3DSwig.Hinge_initial_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Hinge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Hinge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Hinge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Hinge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Hinge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Hinge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Hinge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Hinge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Hinge self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Hinge_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Hinge self)"""
        return _Physics3DSwig.Hinge_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Hinge

# Register Hinge in _Physics3DSwig:
_Physics3DSwig.Hinge_swigregister(Hinge)

class Inertia(rebrick.Physics.Inertia):
    r"""Proxy of C++ Physics3D::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Inertia self) -> Inertia"""
        _Physics3DSwig.Inertia_swiginit(self, _Physics3DSwig.new_Inertia())

    def mass(self):
        r"""mass(Inertia self) -> double"""
        return _Physics3DSwig.Inertia_mass(self)

    def tensor(self):
        r"""tensor(Inertia self) -> std::shared_ptr< Math::Matrix3x3 >"""
        return _Physics3DSwig.Inertia_tensor(self)

    @staticmethod
    def symmetric_tensor(diag, e01_10, e02_20, e12_21):
        r"""
        symmetric_tensor(std::shared_ptr< Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< Math::Matrix3x3 >

        Parameters
        ----------
        diag: std::shared_ptr< Math::Vec3 >
        e01_10: double
        e02_20: double
        e12_21: double

        """
        return _Physics3DSwig.Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Inertia self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Inertia self)"""
        return _Physics3DSwig.Inertia_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Inertia

# Register Inertia in _Physics3DSwig:
_Physics3DSwig.Inertia_swigregister(Inertia)

def Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21):
    r"""
    Inertia_symmetric_tensor(std::shared_ptr< Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< Math::Matrix3x3 >

    Parameters
    ----------
    diag: std::shared_ptr< Math::Vec3 >
    e01_10: double
    e02_20: double
    e12_21: double

    """
    return _Physics3DSwig.Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

class Interaction1DOF(Interaction):
    r"""Proxy of C++ Physics3D::Interaction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interaction1DOF self) -> Interaction1DOF"""
        _Physics3DSwig.Interaction1DOF_swiginit(self, _Physics3DSwig.new_Interaction1DOF())

    def min_force(self):
        r"""min_force(Interaction1DOF self) -> double"""
        return _Physics3DSwig.Interaction1DOF_min_force(self)

    def max_force(self):
        r"""max_force(Interaction1DOF self) -> double"""
        return _Physics3DSwig.Interaction1DOF_max_force(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interaction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interaction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interaction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interaction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interaction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interaction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interaction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interaction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interaction1DOF self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interaction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interaction1DOF self)"""
        return _Physics3DSwig.Interaction1DOF_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interaction1DOF

# Register Interaction1DOF in _Physics3DSwig:
_Physics3DSwig.Interaction1DOF_swigregister(Interaction1DOF)

class Kinematics(rebrick.Physics.Kinematics):
    r"""Proxy of C++ Physics3D::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Kinematics self) -> Kinematics"""
        _Physics3DSwig.Kinematics_swiginit(self, _Physics3DSwig.new_Kinematics())

    def local_transform(self):
        r"""local_transform(Kinematics self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Kinematics_local_transform(self)

    def linearVelocity(self):
        r"""linearVelocity(Kinematics self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Kinematics_linearVelocity(self)

    def angularVelocity(self):
        r"""angularVelocity(Kinematics self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Kinematics_angularVelocity(self)

    def local_cm_transform(self):
        r"""local_cm_transform(Kinematics self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Kinematics_local_cm_transform(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Kinematics self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Kinematics self)"""
        return _Physics3DSwig.Kinematics_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Kinematics

# Register Kinematics in _Physics3DSwig:
_Physics3DSwig.Kinematics_swigregister(Kinematics)

class SpringInteraction1DOF(Interaction1DOF):
    r"""Proxy of C++ Physics3D::SpringInteraction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SpringInteraction1DOF self) -> SpringInteraction1DOF"""
        _Physics3DSwig.SpringInteraction1DOF_swiginit(self, _Physics3DSwig.new_SpringInteraction1DOF())

    def damping(self):
        r"""damping(SpringInteraction1DOF self) -> double"""
        return _Physics3DSwig.SpringInteraction1DOF_damping(self)

    def stiffness(self):
        r"""stiffness(SpringInteraction1DOF self) -> double"""
        return _Physics3DSwig.SpringInteraction1DOF_stiffness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(SpringInteraction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.SpringInteraction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(SpringInteraction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.SpringInteraction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(SpringInteraction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.SpringInteraction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(SpringInteraction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.SpringInteraction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(SpringInteraction1DOF self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.SpringInteraction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(SpringInteraction1DOF self)"""
        return _Physics3DSwig.SpringInteraction1DOF_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_SpringInteraction1DOF

# Register SpringInteraction1DOF in _Physics3DSwig:
_Physics3DSwig.SpringInteraction1DOF_swigregister(SpringInteraction1DOF)

class LinearSpring(SpringInteraction1DOF):
    r"""Proxy of C++ Physics3D::LinearSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LinearSpring self) -> LinearSpring"""
        _Physics3DSwig.LinearSpring_swiginit(self, _Physics3DSwig.new_LinearSpring())

    def position(self):
        r"""position(LinearSpring self) -> double"""
        return _Physics3DSwig.LinearSpring_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(LinearSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.LinearSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(LinearSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.LinearSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(LinearSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.LinearSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(LinearSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.LinearSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(LinearSpring self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.LinearSpring_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(LinearSpring self)"""
        return _Physics3DSwig.LinearSpring_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_LinearSpring

# Register LinearSpring in _Physics3DSwig:
_Physics3DSwig.LinearSpring_swigregister(LinearSpring)

class VelocityMotor(Interaction1DOF):
    r"""Proxy of C++ Physics3D::VelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VelocityMotor self) -> VelocityMotor"""
        _Physics3DSwig.VelocityMotor_swiginit(self, _Physics3DSwig.new_VelocityMotor())

    def gain(self):
        r"""gain(VelocityMotor self) -> double"""
        return _Physics3DSwig.VelocityMotor_gain(self)

    def desired_speed(self):
        r"""desired_speed(VelocityMotor self) -> double"""
        return _Physics3DSwig.VelocityMotor_desired_speed(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(VelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.VelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(VelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.VelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(VelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.VelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(VelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.VelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(VelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.VelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(VelocityMotor self)"""
        return _Physics3DSwig.VelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_VelocityMotor

# Register VelocityMotor in _Physics3DSwig:
_Physics3DSwig.VelocityMotor_swigregister(VelocityMotor)

class LinearVelocityMotor(VelocityMotor):
    r"""Proxy of C++ Physics3D::LinearVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LinearVelocityMotor self) -> LinearVelocityMotor"""
        _Physics3DSwig.LinearVelocityMotor_swiginit(self, _Physics3DSwig.new_LinearVelocityMotor())

    def setDynamic(self, key, value):
        r"""
        setDynamic(LinearVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.LinearVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(LinearVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.LinearVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(LinearVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.LinearVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(LinearVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.LinearVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(LinearVelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.LinearVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(LinearVelocityMotor self)"""
        return _Physics3DSwig.LinearVelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_LinearVelocityMotor

# Register LinearVelocityMotor in _Physics3DSwig:
_Physics3DSwig.LinearVelocityMotor_swigregister(LinearVelocityMotor)

class MateAxisData(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::MateAxisData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MateAxisData self) -> MateAxisData"""
        _Physics3DSwig.MateAxisData_swiginit(self, _Physics3DSwig.new_MateAxisData())

    def along_main(self):
        r"""along_main(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_along_main(self)

    def along_normal(self):
        r"""along_normal(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_along_normal(self)

    def along_cross(self):
        r"""along_cross(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_along_cross(self)

    def around_main(self):
        r"""around_main(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_around_main(self)

    def around_normal(self):
        r"""around_normal(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_around_normal(self)

    def around_cross(self):
        r"""around_cross(MateAxisData self) -> double"""
        return _Physics3DSwig.MateAxisData_around_cross(self)

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics3D::MateAxisData >

        Parameters
        ----------
        value: double

        """
        return _Physics3DSwig.MateAxisData_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(MateAxisData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.MateAxisData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(MateAxisData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.MateAxisData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(MateAxisData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.MateAxisData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(MateAxisData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.MateAxisData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(MateAxisData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.MateAxisData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(MateAxisData self)"""
        return _Physics3DSwig.MateAxisData_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_MateAxisData

# Register MateAxisData in _Physics3DSwig:
_Physics3DSwig.MateAxisData_swigregister(MateAxisData)

def MateAxisData_create(value):
    r"""
    MateAxisData_create(double value) -> std::shared_ptr< Physics3D::MateAxisData >

    Parameters
    ----------
    value: double

    """
    return _Physics3DSwig.MateAxisData_create(value)

class MateConnector(rebrick.Physics.Charge):
    r"""Proxy of C++ Physics3D::MateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MateConnector self) -> MateConnector"""
        _Physics3DSwig.MateConnector_swiginit(self, _Physics3DSwig.new_MateConnector())

    def position(self):
        r"""position(MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.MateConnector_position(self)

    def main_axis(self):
        r"""main_axis(MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.MateConnector_main_axis(self)

    def normal(self):
        r"""normal(MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.MateConnector_normal(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(MateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.MateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(MateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.MateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(MateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.MateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(MateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.MateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(MateConnector self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.MateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(MateConnector self)"""
        return _Physics3DSwig.MateConnector_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_MateConnector

# Register MateConnector in _Physics3DSwig:
_Physics3DSwig.MateConnector_swigregister(MateConnector)

class MateDamping(MateAxisData):
    r"""Proxy of C++ Physics3D::MateDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MateDamping self) -> MateDamping"""
        _Physics3DSwig.MateDamping_swiginit(self, _Physics3DSwig.new_MateDamping())

    def setDynamic(self, key, value):
        r"""
        setDynamic(MateDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.MateDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(MateDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.MateDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(MateDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.MateDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(MateDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.MateDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(MateDamping self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.MateDamping_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(MateDamping self)"""
        return _Physics3DSwig.MateDamping_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_MateDamping

# Register MateDamping in _Physics3DSwig:
_Physics3DSwig.MateDamping_swigregister(MateDamping)

class MateStiffness(MateAxisData):
    r"""Proxy of C++ Physics3D::MateStiffness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MateStiffness self) -> MateStiffness"""
        _Physics3DSwig.MateStiffness_swiginit(self, _Physics3DSwig.new_MateStiffness())

    def setDynamic(self, key, value):
        r"""
        setDynamic(MateStiffness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.MateStiffness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(MateStiffness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.MateStiffness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(MateStiffness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.MateStiffness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(MateStiffness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.MateStiffness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(MateStiffness self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.MateStiffness_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(MateStiffness self)"""
        return _Physics3DSwig.MateStiffness_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_MateStiffness

# Register MateStiffness in _Physics3DSwig:
_Physics3DSwig.MateStiffness_swigregister(MateStiffness)

class TriMeshGeometry(Geometry):
    r"""Proxy of C++ Physics3D::TriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TriMeshGeometry self) -> TriMeshGeometry"""
        _Physics3DSwig.TriMeshGeometry_swiginit(self, _Physics3DSwig.new_TriMeshGeometry())

    def setDynamic(self, key, value):
        r"""
        setDynamic(TriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.TriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.TriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.TriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.TriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TriMeshGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.TriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TriMeshGeometry self)"""
        return _Physics3DSwig.TriMeshGeometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_TriMeshGeometry

# Register TriMeshGeometry in _Physics3DSwig:
_Physics3DSwig.TriMeshGeometry_swigregister(TriMeshGeometry)

class ObjGeometry(TriMeshGeometry):
    r"""Proxy of C++ Physics3D::ObjGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ObjGeometry self) -> ObjGeometry"""
        _Physics3DSwig.ObjGeometry_swiginit(self, _Physics3DSwig.new_ObjGeometry())

    def path(self):
        r"""path(ObjGeometry self) -> std::string"""
        return _Physics3DSwig.ObjGeometry_path(self)

    def scale(self):
        r"""scale(ObjGeometry self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.ObjGeometry_scale(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(ObjGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.ObjGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(ObjGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.ObjGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(ObjGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.ObjGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(ObjGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.ObjGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(ObjGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.ObjGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(ObjGeometry self)"""
        return _Physics3DSwig.ObjGeometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_ObjGeometry

# Register ObjGeometry in _Physics3DSwig:
_Physics3DSwig.ObjGeometry_swigregister(ObjGeometry)

class Prismatic(Mate):
    r"""Proxy of C++ Physics3D::Prismatic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Prismatic self) -> Prismatic"""
        _Physics3DSwig.Prismatic_swiginit(self, _Physics3DSwig.new_Prismatic())

    def position(self):
        r"""position(Prismatic self) -> double"""
        return _Physics3DSwig.Prismatic_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Prismatic self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Prismatic_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Prismatic self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Prismatic_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Prismatic self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Prismatic_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Prismatic self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Prismatic_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Prismatic self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Prismatic_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Prismatic self)"""
        return _Physics3DSwig.Prismatic_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Prismatic

# Register Prismatic in _Physics3DSwig:
_Physics3DSwig.Prismatic_swigregister(Prismatic)

class RigidBody(Body):
    r"""Proxy of C++ Physics3D::RigidBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RigidBody self) -> RigidBody"""
        _Physics3DSwig.RigidBody_swiginit(self, _Physics3DSwig.new_RigidBody())

    def setDynamic(self, key, value):
        r"""
        setDynamic(RigidBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.RigidBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RigidBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.RigidBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RigidBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.RigidBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RigidBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.RigidBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RigidBody self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.RigidBody_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RigidBody self)"""
        return _Physics3DSwig.RigidBody_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_RigidBody

# Register RigidBody in _Physics3DSwig:
_Physics3DSwig.RigidBody_swigregister(RigidBody)

class RotationalVelocityMotor(VelocityMotor):
    r"""Proxy of C++ Physics3D::RotationalVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RotationalVelocityMotor self) -> RotationalVelocityMotor"""
        _Physics3DSwig.RotationalVelocityMotor_swiginit(self, _Physics3DSwig.new_RotationalVelocityMotor())

    def setDynamic(self, key, value):
        r"""
        setDynamic(RotationalVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.RotationalVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RotationalVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.RotationalVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RotationalVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.RotationalVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RotationalVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.RotationalVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RotationalVelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.RotationalVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RotationalVelocityMotor self)"""
        return _Physics3DSwig.RotationalVelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_RotationalVelocityMotor

# Register RotationalVelocityMotor in _Physics3DSwig:
_Physics3DSwig.RotationalVelocityMotor_swigregister(RotationalVelocityMotor)

class System(rebrick.Physics.System):
    r"""Proxy of C++ Physics3D::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(System self) -> System"""
        _Physics3DSwig.System_swiginit(self, _Physics3DSwig.new_System())

    def local_transform(self):
        r"""local_transform(System self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.System_local_transform(self)

    def onInit(self):
        r"""onInit(System self)"""
        return _Physics3DSwig.System_onInit(self)

    def kinematically_controlled(self):
        r"""kinematically_controlled(System self) -> Physics3D_RigidBody_Vector"""
        return _Physics3DSwig.System_kinematically_controlled(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(System self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.System_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(System self)"""
        return _Physics3DSwig.System_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_System

# Register System in _Physics3DSwig:
_Physics3DSwig.System_swigregister(System)

class TorsionSpring(SpringInteraction1DOF):
    r"""Proxy of C++ Physics3D::TorsionSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorsionSpring self) -> TorsionSpring"""
        _Physics3DSwig.TorsionSpring_swiginit(self, _Physics3DSwig.new_TorsionSpring())

    def angle(self):
        r"""angle(TorsionSpring self) -> double"""
        return _Physics3DSwig.TorsionSpring_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(TorsionSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.TorsionSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TorsionSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.TorsionSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TorsionSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.TorsionSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TorsionSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.TorsionSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TorsionSpring self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.TorsionSpring_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TorsionSpring self)"""
        return _Physics3DSwig.TorsionSpring_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_TorsionSpring

# Register TorsionSpring in _Physics3DSwig:
_Physics3DSwig.TorsionSpring_swigregister(TorsionSpring)

class Transform(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Transform self) -> Transform"""
        _Physics3DSwig.Transform_swiginit(self, _Physics3DSwig.new_Transform())

    def position(self):
        r"""position(Transform self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Transform_position(self)

    def rotation(self):
        r"""rotation(Transform self) -> std::shared_ptr< Math::Quat >"""
        return _Physics3DSwig.Transform_rotation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Transform self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Transform_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Transform self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Transform_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Transform self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Transform_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Transform self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Transform_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Transform self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Transform_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Transform self)"""
        return _Physics3DSwig.Transform_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Transform

# Register Transform in _Physics3DSwig:
_Physics3DSwig.Transform_swigregister(Transform)

class Physics3D_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Body_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type j) -> Physics3D_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type

        __setslice__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type j, Physics3D_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Body >,std::allocator< std::shared_ptr< Physics3D::Body > > > const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type

        __delitem__(Physics3D_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Body_Vector self, PySliceObject * slice) -> Physics3D_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Body_Vector self, PySliceObject * slice, Physics3D_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Body >,std::allocator< std::shared_ptr< Physics3D::Body > > > const &

        __setitem__(Physics3D_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Body > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::value_type"""
        return _Physics3DSwig.Physics3D_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Body_Vector self, Physics3D_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Body > > &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Body > >::iterator

        erase(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::iterator first, std::vector< std::shared_ptr< Physics3D::Body > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Body > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Body > >::iterator

        """
        return _Physics3DSwig.Physics3D_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Body_Vector self) -> Physics3D_Body_Vector
        __init__(Physics3D_Body_Vector self, Physics3D_Body_Vector other) -> Physics3D_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Body > > const &

        __init__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type size) -> Physics3D_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Body > >::size_type

        __init__(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type size, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & value) -> Physics3D_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Body > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Body_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Body_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type n, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Body > >::size_type

        resize(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Body > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        insert(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Body > >::size_type n, std::vector< std::shared_ptr< Physics3D::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Body > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Body > >::size_type

        """
        return _Physics3DSwig.Physics3D_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Body_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Body_Vector

# Register Physics3D_Body_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Body_Vector_swigregister(Physics3D_Body_Vector)

class Physics3D_BodyOrientedCoulombFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_BodyOrientedCoulombFriction_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_BodyOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_BodyOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type j) -> Physics3D_BodyOrientedCoulombFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type

        __setslice__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type j, Physics3D_BodyOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > > > const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type

        __delitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, PySliceObject * slice) -> Physics3D_BodyOrientedCoulombFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, PySliceObject * slice, Physics3D_BodyOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > > > const &

        __setitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_BodyOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_BodyOrientedCoulombFriction_Vector self, Physics3D_BodyOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > > &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_BodyOrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::allocator_type"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_BodyOrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator

        erase(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator first, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_BodyOrientedCoulombFriction_Vector self) -> Physics3D_BodyOrientedCoulombFriction_Vector
        __init__(Physics3D_BodyOrientedCoulombFriction_Vector self, Physics3D_BodyOrientedCoulombFriction_Vector other) -> Physics3D_BodyOrientedCoulombFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > > const &

        __init__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type size) -> Physics3D_BodyOrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type

        __init__(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type size, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & value) -> Physics3D_BodyOrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_BodyOrientedCoulombFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_front(self)

    def back(self):
        r"""back(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type

        resize(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        insert(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_BodyOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type

        """
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_BodyOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::BodyOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_BodyOrientedCoulombFriction_Vector

# Register Physics3D_BodyOrientedCoulombFriction_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_BodyOrientedCoulombFriction_Vector_swigregister(Physics3D_BodyOrientedCoulombFriction_Vector)

class Physics3D_Box_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Box > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Box_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Box_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Box_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Box_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Box_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type j) -> Physics3D_Box_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Box_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type

        __setslice__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type j, Physics3D_Box_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Box >,std::allocator< std::shared_ptr< Physics3D::Box > > > const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Box_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type

        __delitem__(Physics3D_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Box_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Box_Vector self, PySliceObject * slice) -> Physics3D_Box_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Box_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Box_Vector self, PySliceObject * slice, Physics3D_Box_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Box >,std::allocator< std::shared_ptr< Physics3D::Box > > > const &

        __setitem__(Physics3D_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Box > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::value_type"""
        return _Physics3DSwig.Physics3D_Box_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Box_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Box_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Box_Vector self, Physics3D_Box_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Box > > &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Box_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Box_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Box_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Box_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Box_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Box_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Box_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Box > >::iterator

        erase(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::iterator first, std::vector< std::shared_ptr< Physics3D::Box > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Box > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Box > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Box > >::iterator

        """
        return _Physics3DSwig.Physics3D_Box_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Box_Vector self) -> Physics3D_Box_Vector
        __init__(Physics3D_Box_Vector self, Physics3D_Box_Vector other) -> Physics3D_Box_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Box > > const &

        __init__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type size) -> Physics3D_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Box > >::size_type

        __init__(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type size, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & value) -> Physics3D_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Box > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Box_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Box_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Box_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Box_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type n, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Box > >::size_type

        resize(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Box > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        insert(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Box > >::size_type n, std::vector< std::shared_ptr< Physics3D::Box > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Box > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Box_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Box > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Box > >::size_type

        """
        return _Physics3DSwig.Physics3D_Box_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Box_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Box_Vector

# Register Physics3D_Box_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Box_Vector_swigregister(Physics3D_Box_Vector)

class Physics3D_CollisionGroup_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::CollisionGroup > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_CollisionGroup_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_CollisionGroup_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_CollisionGroup_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type j) -> Physics3D_CollisionGroup_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type

        __setslice__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type j, Physics3D_CollisionGroup_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::CollisionGroup >,std::allocator< std::shared_ptr< Physics3D::CollisionGroup > > > const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type

        __delitem__(Physics3D_CollisionGroup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_CollisionGroup_Vector self, PySliceObject * slice) -> Physics3D_CollisionGroup_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_CollisionGroup_Vector self, PySliceObject * slice, Physics3D_CollisionGroup_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::CollisionGroup >,std::allocator< std::shared_ptr< Physics3D::CollisionGroup > > > const &

        __setitem__(Physics3D_CollisionGroup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type i, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_CollisionGroup_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_CollisionGroup_Vector self, Physics3D_CollisionGroup_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::CollisionGroup > > &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_CollisionGroup_Vector self)"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::allocator_type"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_CollisionGroup_Vector self)"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator

        erase(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator first, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_CollisionGroup_Vector self) -> Physics3D_CollisionGroup_Vector
        __init__(Physics3D_CollisionGroup_Vector self, Physics3D_CollisionGroup_Vector other) -> Physics3D_CollisionGroup_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::CollisionGroup > > const &

        __init__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type size) -> Physics3D_CollisionGroup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type

        __init__(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type size, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & value) -> Physics3D_CollisionGroup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        _Physics3DSwig.Physics3D_CollisionGroup_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_CollisionGroup_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_front(self)

    def back(self):
        r"""back(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type n, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type

        resize(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator pos, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        insert(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator pos, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type n, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_CollisionGroup_Vector self, std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type

        """
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_CollisionGroup_Vector self) -> std::vector< std::shared_ptr< Physics3D::CollisionGroup > >::size_type"""
        return _Physics3DSwig.Physics3D_CollisionGroup_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_CollisionGroup_Vector

# Register Physics3D_CollisionGroup_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_CollisionGroup_Vector_swigregister(Physics3D_CollisionGroup_Vector)

class Physics3D_Cylinder_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Cylinder > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Cylinder_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type j) -> Physics3D_Cylinder_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type

        __setslice__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type j, Physics3D_Cylinder_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Cylinder >,std::allocator< std::shared_ptr< Physics3D::Cylinder > > > const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type

        __delitem__(Physics3D_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Cylinder_Vector self, PySliceObject * slice) -> Physics3D_Cylinder_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Cylinder_Vector self, PySliceObject * slice, Physics3D_Cylinder_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Cylinder >,std::allocator< std::shared_ptr< Physics3D::Cylinder > > > const &

        __setitem__(Physics3D_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylinder > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Cylinder_Vector self, Physics3D_Cylinder_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Cylinder > > &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator

        erase(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator first, std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Cylinder_Vector self) -> Physics3D_Cylinder_Vector
        __init__(Physics3D_Cylinder_Vector self, Physics3D_Cylinder_Vector other) -> Physics3D_Cylinder_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Cylinder > > const &

        __init__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type size) -> Physics3D_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type

        __init__(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type size, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & value) -> Physics3D_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Cylinder_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Cylinder_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type n, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type

        resize(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        insert(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type n, std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylinder > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type

        """
        return _Physics3DSwig.Physics3D_Cylinder_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylinder_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Cylinder_Vector

# Register Physics3D_Cylinder_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Cylinder_Vector_swigregister(Physics3D_Cylinder_Vector)

class Physics3D_Cylindrical_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Cylindrical > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Cylindrical_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type j) -> Physics3D_Cylindrical_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type

        __setslice__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type j, Physics3D_Cylindrical_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Cylindrical >,std::allocator< std::shared_ptr< Physics3D::Cylindrical > > > const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type

        __delitem__(Physics3D_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Cylindrical_Vector self, PySliceObject * slice) -> Physics3D_Cylindrical_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Cylindrical_Vector self, PySliceObject * slice, Physics3D_Cylindrical_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Cylindrical >,std::allocator< std::shared_ptr< Physics3D::Cylindrical > > > const &

        __setitem__(Physics3D_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Cylindrical_Vector self, Physics3D_Cylindrical_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Cylindrical > > &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator

        erase(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator first, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Cylindrical_Vector self) -> Physics3D_Cylindrical_Vector
        __init__(Physics3D_Cylindrical_Vector self, Physics3D_Cylindrical_Vector other) -> Physics3D_Cylindrical_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Cylindrical > > const &

        __init__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type size) -> Physics3D_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type

        __init__(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type size, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & value) -> Physics3D_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Cylindrical_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Cylindrical_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type n, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type

        resize(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        insert(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type n, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type

        """
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Cylindrical_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Cylindrical_Vector

# Register Physics3D_Cylindrical_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Cylindrical_Vector_swigregister(Physics3D_Cylindrical_Vector)

class Physics3D_DisableCollisionPair_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_DisableCollisionPair_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_DisableCollisionPair_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_DisableCollisionPair_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type j) -> Physics3D_DisableCollisionPair_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type

        __setslice__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type j, Physics3D_DisableCollisionPair_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair >,std::allocator< std::shared_ptr< Physics3D::DisableCollisionPair > > > const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type

        __delitem__(Physics3D_DisableCollisionPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_DisableCollisionPair_Vector self, PySliceObject * slice) -> Physics3D_DisableCollisionPair_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_DisableCollisionPair_Vector self, PySliceObject * slice, Physics3D_DisableCollisionPair_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair >,std::allocator< std::shared_ptr< Physics3D::DisableCollisionPair > > > const &

        __setitem__(Physics3D_DisableCollisionPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type i, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_DisableCollisionPair_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_DisableCollisionPair_Vector self, Physics3D_DisableCollisionPair_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > > &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_DisableCollisionPair_Vector self)"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::allocator_type"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_DisableCollisionPair_Vector self)"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator

        erase(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator first, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_DisableCollisionPair_Vector self) -> Physics3D_DisableCollisionPair_Vector
        __init__(Physics3D_DisableCollisionPair_Vector self, Physics3D_DisableCollisionPair_Vector other) -> Physics3D_DisableCollisionPair_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > > const &

        __init__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type size) -> Physics3D_DisableCollisionPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type

        __init__(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type size, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & value) -> Physics3D_DisableCollisionPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_DisableCollisionPair_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_front(self)

    def back(self):
        r"""back(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type n, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type

        resize(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator pos, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        insert(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator pos, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type n, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_DisableCollisionPair_Vector self, std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type

        """
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_DisableCollisionPair_Vector self) -> std::vector< std::shared_ptr< Physics3D::DisableCollisionPair > >::size_type"""
        return _Physics3DSwig.Physics3D_DisableCollisionPair_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_DisableCollisionPair_Vector

# Register Physics3D_DisableCollisionPair_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_DisableCollisionPair_Vector_swigregister(Physics3D_DisableCollisionPair_Vector)

class Physics3D_Geometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Geometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Geometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Geometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Geometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Geometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Geometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Geometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type j) -> Physics3D_Geometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type

        __setslice__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type j, Physics3D_Geometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Geometry >,std::allocator< std::shared_ptr< Physics3D::Geometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type

        __delitem__(Physics3D_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Geometry_Vector self, PySliceObject * slice) -> Physics3D_Geometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Geometry_Vector self, PySliceObject * slice, Physics3D_Geometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Geometry >,std::allocator< std::shared_ptr< Physics3D::Geometry > > > const &

        __setitem__(Physics3D_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Geometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Geometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Geometry_Vector self, Physics3D_Geometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Geometry > > &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Geometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Geometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator

        erase(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Geometry_Vector self) -> Physics3D_Geometry_Vector
        __init__(Physics3D_Geometry_Vector self, Physics3D_Geometry_Vector other) -> Physics3D_Geometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Geometry > > const &

        __init__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type size) -> Physics3D_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type

        __init__(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & value) -> Physics3D_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Geometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Geometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type

        resize(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        insert(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Geometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Geometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Geometry_Vector self, std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Geometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Geometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Geometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Geometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Geometry_Vector

# Register Physics3D_Geometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Geometry_Vector_swigregister(Physics3D_Geometry_Vector)

class Physics3D_GeometryOrientedCoulombFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type j) -> Physics3D_GeometryOrientedCoulombFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type

        __setslice__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type j, Physics3D_GeometryOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > > > const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type

        __delitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, PySliceObject * slice) -> Physics3D_GeometryOrientedCoulombFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, PySliceObject * slice, Physics3D_GeometryOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > > > const &

        __setitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_GeometryOrientedCoulombFriction_Vector self, Physics3D_GeometryOrientedCoulombFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > > &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_GeometryOrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::allocator_type"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_GeometryOrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator

        erase(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator first, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> Physics3D_GeometryOrientedCoulombFriction_Vector
        __init__(Physics3D_GeometryOrientedCoulombFriction_Vector self, Physics3D_GeometryOrientedCoulombFriction_Vector other) -> Physics3D_GeometryOrientedCoulombFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > > const &

        __init__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type size) -> Physics3D_GeometryOrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type

        __init__(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type size, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & value) -> Physics3D_GeometryOrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_GeometryOrientedCoulombFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_front(self)

    def back(self):
        r"""back(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type

        resize(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        insert(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_GeometryOrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type

        """
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_GeometryOrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::GeometryOrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_GeometryOrientedCoulombFriction_Vector

# Register Physics3D_GeometryOrientedCoulombFriction_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_GeometryOrientedCoulombFriction_Vector_swigregister(Physics3D_GeometryOrientedCoulombFriction_Vector)

class Physics3D_Hinge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Hinge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Hinge_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Hinge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Hinge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Hinge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type j) -> Physics3D_Hinge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type

        __setslice__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type j, Physics3D_Hinge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Hinge >,std::allocator< std::shared_ptr< Physics3D::Hinge > > > const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type

        __delitem__(Physics3D_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Hinge_Vector self, PySliceObject * slice) -> Physics3D_Hinge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Hinge_Vector self, PySliceObject * slice, Physics3D_Hinge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Hinge >,std::allocator< std::shared_ptr< Physics3D::Hinge > > > const &

        __setitem__(Physics3D_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Hinge > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Hinge_Vector self, Physics3D_Hinge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Hinge > > &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator

        erase(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator first, std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Hinge_Vector self) -> Physics3D_Hinge_Vector
        __init__(Physics3D_Hinge_Vector self, Physics3D_Hinge_Vector other) -> Physics3D_Hinge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Hinge > > const &

        __init__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type size) -> Physics3D_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type

        __init__(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type size, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & value) -> Physics3D_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Hinge_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Hinge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type n, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type

        resize(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        insert(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type n, std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Hinge > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type

        """
        return _Physics3DSwig.Physics3D_Hinge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Hinge_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Hinge_Vector

# Register Physics3D_Hinge_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Hinge_Vector_swigregister(Physics3D_Hinge_Vector)

class Physics3D_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Inertia_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type j) -> Physics3D_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type

        __setslice__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type j, Physics3D_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Inertia >,std::allocator< std::shared_ptr< Physics3D::Inertia > > > const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type

        __delitem__(Physics3D_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Inertia_Vector self, PySliceObject * slice) -> Physics3D_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Inertia_Vector self, PySliceObject * slice, Physics3D_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Inertia >,std::allocator< std::shared_ptr< Physics3D::Inertia > > > const &

        __setitem__(Physics3D_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Inertia_Vector self, Physics3D_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Inertia > > &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator

        erase(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator first, std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Inertia_Vector self) -> Physics3D_Inertia_Vector
        __init__(Physics3D_Inertia_Vector self, Physics3D_Inertia_Vector other) -> Physics3D_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Inertia > > const &

        __init__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type size) -> Physics3D_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type

        __init__(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type size, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & value) -> Physics3D_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Inertia_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type

        resize(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        insert(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Inertia > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type

        """
        return _Physics3DSwig.Physics3D_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Inertia_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Inertia_Vector

# Register Physics3D_Inertia_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Inertia_Vector_swigregister(Physics3D_Inertia_Vector)

class Physics3D_Interaction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interaction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interaction_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type j) -> Physics3D_Interaction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type

        __setslice__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type j, Physics3D_Interaction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interaction >,std::allocator< std::shared_ptr< Physics3D::Interaction > > > const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type

        __delitem__(Physics3D_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interaction_Vector self, PySliceObject * slice) -> Physics3D_Interaction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interaction_Vector self, PySliceObject * slice, Physics3D_Interaction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interaction >,std::allocator< std::shared_ptr< Physics3D::Interaction > > > const &

        __setitem__(Physics3D_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interaction_Vector self, Physics3D_Interaction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interaction > > &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interaction_Vector self)"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interaction_Vector self)"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator

        erase(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interaction_Vector self) -> Physics3D_Interaction_Vector
        __init__(Physics3D_Interaction_Vector self, Physics3D_Interaction_Vector other) -> Physics3D_Interaction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interaction > > const &

        __init__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type size) -> Physics3D_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type

        __init__(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & value) -> Physics3D_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interaction_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interaction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type

        resize(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        insert(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interaction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interaction_Vector

# Register Physics3D_Interaction_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interaction_Vector_swigregister(Physics3D_Interaction_Vector)

class Physics3D_Interaction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interaction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interaction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type j) -> Physics3D_Interaction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type

        __setslice__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type j, Physics3D_Interaction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interaction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interaction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type

        __delitem__(Physics3D_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interaction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interaction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interaction1DOF_Vector self, PySliceObject * slice, Physics3D_Interaction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interaction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interaction1DOF > > > const &

        __setitem__(Physics3D_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interaction1DOF_Vector self, Physics3D_Interaction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interaction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interaction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator

        erase(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interaction1DOF_Vector self) -> Physics3D_Interaction1DOF_Vector
        __init__(Physics3D_Interaction1DOF_Vector self, Physics3D_Interaction1DOF_Vector other) -> Physics3D_Interaction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > > const &

        __init__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type size) -> Physics3D_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type

        __init__(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & value) -> Physics3D_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interaction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interaction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type

        resize(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        insert(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interaction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interaction1DOF_Vector

# Register Physics3D_Interaction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interaction1DOF_Vector_swigregister(Physics3D_Interaction1DOF_Vector)

class Physics3D_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Kinematics_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type j) -> Physics3D_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type

        __setslice__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type j, Physics3D_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Kinematics >,std::allocator< std::shared_ptr< Physics3D::Kinematics > > > const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type

        __delitem__(Physics3D_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Kinematics_Vector self, PySliceObject * slice) -> Physics3D_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Kinematics_Vector self, PySliceObject * slice, Physics3D_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Kinematics >,std::allocator< std::shared_ptr< Physics3D::Kinematics > > > const &

        __setitem__(Physics3D_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Kinematics_Vector self, Physics3D_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Kinematics > > &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator

        erase(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator first, std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Kinematics_Vector self) -> Physics3D_Kinematics_Vector
        __init__(Physics3D_Kinematics_Vector self, Physics3D_Kinematics_Vector other) -> Physics3D_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Kinematics > > const &

        __init__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type size) -> Physics3D_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type

        __init__(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type size, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & value) -> Physics3D_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Kinematics_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type

        resize(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        insert(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type

        """
        return _Physics3DSwig.Physics3D_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Kinematics_Vector

# Register Physics3D_Kinematics_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Kinematics_Vector_swigregister(Physics3D_Kinematics_Vector)

class Physics3D_LinearSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::LinearSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_LinearSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type j) -> Physics3D_LinearSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type

        __setslice__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type j, Physics3D_LinearSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::LinearSpring >,std::allocator< std::shared_ptr< Physics3D::LinearSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type

        __delitem__(Physics3D_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_LinearSpring_Vector self, PySliceObject * slice) -> Physics3D_LinearSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_LinearSpring_Vector self, PySliceObject * slice, Physics3D_LinearSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::LinearSpring >,std::allocator< std::shared_ptr< Physics3D::LinearSpring > > > const &

        __setitem__(Physics3D_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_LinearSpring_Vector self, Physics3D_LinearSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::LinearSpring > > &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator

        erase(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator first, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_LinearSpring_Vector self) -> Physics3D_LinearSpring_Vector
        __init__(Physics3D_LinearSpring_Vector self, Physics3D_LinearSpring_Vector other) -> Physics3D_LinearSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::LinearSpring > > const &

        __init__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type size) -> Physics3D_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type

        __init__(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type size, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & value) -> Physics3D_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_LinearSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_LinearSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type

        resize(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        insert(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_LinearSpring_Vector

# Register Physics3D_LinearSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_LinearSpring_Vector_swigregister(Physics3D_LinearSpring_Vector)

class Physics3D_LinearVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_LinearVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type j) -> Physics3D_LinearVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type

        __setslice__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type j, Physics3D_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::LinearVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type

        __delitem__(Physics3D_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_LinearVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_LinearVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_LinearVelocityMotor_Vector self, PySliceObject * slice, Physics3D_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::LinearVelocityMotor > > > const &

        __setitem__(Physics3D_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_LinearVelocityMotor_Vector self, Physics3D_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator

        erase(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_LinearVelocityMotor_Vector self) -> Physics3D_LinearVelocityMotor_Vector
        __init__(Physics3D_LinearVelocityMotor_Vector self, Physics3D_LinearVelocityMotor_Vector other) -> Physics3D_LinearVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > > const &

        __init__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type size) -> Physics3D_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type

        __init__(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & value) -> Physics3D_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_LinearVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type

        resize(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        insert(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_LinearVelocityMotor_Vector

# Register Physics3D_LinearVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_LinearVelocityMotor_Vector_swigregister(Physics3D_LinearVelocityMotor_Vector)

class Physics3D_Mate_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Mate > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Mate_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Mate_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Mate_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Mate_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Mate_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type j) -> Physics3D_Mate_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type

        __setslice__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type j, Physics3D_Mate_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Mate >,std::allocator< std::shared_ptr< Physics3D::Mate > > > const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type

        __delitem__(Physics3D_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Mate_Vector self, PySliceObject * slice) -> Physics3D_Mate_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Mate_Vector self, PySliceObject * slice, Physics3D_Mate_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Mate >,std::allocator< std::shared_ptr< Physics3D::Mate > > > const &

        __setitem__(Physics3D_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Mate > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::value_type"""
        return _Physics3DSwig.Physics3D_Mate_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Mate_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Mate_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Mate_Vector self, Physics3D_Mate_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Mate > > &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Mate_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Mate_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Mate_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Mate_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Mate_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Mate_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Mate_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Mate > >::iterator

        erase(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::iterator first, std::vector< std::shared_ptr< Physics3D::Mate > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Mate > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Mate > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Mate > >::iterator

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Mate_Vector self) -> Physics3D_Mate_Vector
        __init__(Physics3D_Mate_Vector self, Physics3D_Mate_Vector other) -> Physics3D_Mate_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Mate > > const &

        __init__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type size) -> Physics3D_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type

        __init__(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type size, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & value) -> Physics3D_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Mate_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Mate_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Mate_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Mate_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type n, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type

        resize(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Mate > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        insert(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type n, std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Mate > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Mate > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Mate > >::size_type

        """
        return _Physics3DSwig.Physics3D_Mate_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Mate_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Mate_Vector

# Register Physics3D_Mate_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Mate_Vector_swigregister(Physics3D_Mate_Vector)

class Physics3D_MateAxisData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::MateAxisData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_MateAxisData_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type j) -> Physics3D_MateAxisData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type

        __setslice__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type j, Physics3D_MateAxisData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::MateAxisData >,std::allocator< std::shared_ptr< Physics3D::MateAxisData > > > const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type

        __delitem__(Physics3D_MateAxisData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_MateAxisData_Vector self, PySliceObject * slice) -> Physics3D_MateAxisData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_MateAxisData_Vector self, PySliceObject * slice, Physics3D_MateAxisData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::MateAxisData >,std::allocator< std::shared_ptr< Physics3D::MateAxisData > > > const &

        __setitem__(Physics3D_MateAxisData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_MateAxisData_Vector self, Physics3D_MateAxisData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::MateAxisData > > &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_MateAxisData_Vector self)"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::allocator_type"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_MateAxisData_Vector self)"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator

        erase(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator first, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_MateAxisData_Vector self) -> Physics3D_MateAxisData_Vector
        __init__(Physics3D_MateAxisData_Vector self, Physics3D_MateAxisData_Vector other) -> Physics3D_MateAxisData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::MateAxisData > > const &

        __init__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type size) -> Physics3D_MateAxisData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type

        __init__(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type size, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & value) -> Physics3D_MateAxisData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        _Physics3DSwig.Physics3D_MateAxisData_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_MateAxisData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_front(self)

    def back(self):
        r"""back(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type

        resize(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        insert(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type

        """
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_MateAxisData_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_MateAxisData_Vector

# Register Physics3D_MateAxisData_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_MateAxisData_Vector_swigregister(Physics3D_MateAxisData_Vector)

class Physics3D_MateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::MateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_MateConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type j) -> Physics3D_MateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type

        __setslice__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type j, Physics3D_MateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::MateConnector >,std::allocator< std::shared_ptr< Physics3D::MateConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type

        __delitem__(Physics3D_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_MateConnector_Vector self, PySliceObject * slice) -> Physics3D_MateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_MateConnector_Vector self, PySliceObject * slice, Physics3D_MateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::MateConnector >,std::allocator< std::shared_ptr< Physics3D::MateConnector > > > const &

        __setitem__(Physics3D_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateConnector > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_MateConnector_Vector self, Physics3D_MateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::MateConnector > > &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator

        erase(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator first, std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_MateConnector_Vector self) -> Physics3D_MateConnector_Vector
        __init__(Physics3D_MateConnector_Vector self, Physics3D_MateConnector_Vector other) -> Physics3D_MateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::MateConnector > > const &

        __init__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type size) -> Physics3D_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type

        __init__(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type size, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & value) -> Physics3D_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_MateConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_MateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type

        resize(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        insert(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateConnector > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_MateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_MateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_MateConnector_Vector

# Register Physics3D_MateConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_MateConnector_Vector_swigregister(Physics3D_MateConnector_Vector)

class Physics3D_MateDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::MateDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_MateDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type j) -> Physics3D_MateDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type

        __setslice__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type j, Physics3D_MateDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::MateDamping >,std::allocator< std::shared_ptr< Physics3D::MateDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type

        __delitem__(Physics3D_MateDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_MateDamping_Vector self, PySliceObject * slice) -> Physics3D_MateDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_MateDamping_Vector self, PySliceObject * slice, Physics3D_MateDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::MateDamping >,std::allocator< std::shared_ptr< Physics3D::MateDamping > > > const &

        __setitem__(Physics3D_MateDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateDamping > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_MateDamping_Vector self, Physics3D_MateDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::MateDamping > > &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_MateDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_MateDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator

        erase(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator first, std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_MateDamping_Vector self) -> Physics3D_MateDamping_Vector
        __init__(Physics3D_MateDamping_Vector self, Physics3D_MateDamping_Vector other) -> Physics3D_MateDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::MateDamping > > const &

        __init__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type size) -> Physics3D_MateDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type

        __init__(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type size, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & value) -> Physics3D_MateDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_MateDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_MateDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type

        resize(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        insert(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateDamping > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_MateDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_MateDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_MateDamping_Vector

# Register Physics3D_MateDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_MateDamping_Vector_swigregister(Physics3D_MateDamping_Vector)

class Physics3D_MateStiffness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::MateStiffness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_MateStiffness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type j) -> Physics3D_MateStiffness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type

        __setslice__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type j, Physics3D_MateStiffness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::MateStiffness >,std::allocator< std::shared_ptr< Physics3D::MateStiffness > > > const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type

        __delitem__(Physics3D_MateStiffness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_MateStiffness_Vector self, PySliceObject * slice) -> Physics3D_MateStiffness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_MateStiffness_Vector self, PySliceObject * slice, Physics3D_MateStiffness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::MateStiffness >,std::allocator< std::shared_ptr< Physics3D::MateStiffness > > > const &

        __setitem__(Physics3D_MateStiffness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_MateStiffness_Vector self, Physics3D_MateStiffness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::MateStiffness > > &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_MateStiffness_Vector self)"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_MateStiffness_Vector self)"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator

        erase(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator first, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_MateStiffness_Vector self) -> Physics3D_MateStiffness_Vector
        __init__(Physics3D_MateStiffness_Vector self, Physics3D_MateStiffness_Vector other) -> Physics3D_MateStiffness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::MateStiffness > > const &

        __init__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type size) -> Physics3D_MateStiffness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type

        __init__(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type size, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & value) -> Physics3D_MateStiffness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_MateStiffness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_MateStiffness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type

        resize(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        insert(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator pos, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type n, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type

        """
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_MateStiffness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_MateStiffness_Vector

# Register Physics3D_MateStiffness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_MateStiffness_Vector_swigregister(Physics3D_MateStiffness_Vector)

class Physics3D_ObjGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::ObjGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_ObjGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type j) -> Physics3D_ObjGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type

        __setslice__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type j, Physics3D_ObjGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::ObjGeometry >,std::allocator< std::shared_ptr< Physics3D::ObjGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type

        __delitem__(Physics3D_ObjGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_ObjGeometry_Vector self, PySliceObject * slice) -> Physics3D_ObjGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_ObjGeometry_Vector self, PySliceObject * slice, Physics3D_ObjGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::ObjGeometry >,std::allocator< std::shared_ptr< Physics3D::ObjGeometry > > > const &

        __setitem__(Physics3D_ObjGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_ObjGeometry_Vector self, Physics3D_ObjGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::ObjGeometry > > &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_ObjGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_ObjGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator

        erase(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_ObjGeometry_Vector self) -> Physics3D_ObjGeometry_Vector
        __init__(Physics3D_ObjGeometry_Vector self, Physics3D_ObjGeometry_Vector other) -> Physics3D_ObjGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::ObjGeometry > > const &

        __init__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type size) -> Physics3D_ObjGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type

        __init__(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & value) -> Physics3D_ObjGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_ObjGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_ObjGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type

        resize(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        insert(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_ObjGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_ObjGeometry_Vector

# Register Physics3D_ObjGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_ObjGeometry_Vector_swigregister(Physics3D_ObjGeometry_Vector)

class Physics3D_OrientedCoulombFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_OrientedCoulombFriction_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_OrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_OrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type j) -> Physics3D_OrientedCoulombFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type

        __setslice__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type j, Physics3D_OrientedCoulombFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::OrientedCoulombFriction > > > const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type

        __delitem__(Physics3D_OrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_OrientedCoulombFriction_Vector self, PySliceObject * slice) -> Physics3D_OrientedCoulombFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_OrientedCoulombFriction_Vector self, PySliceObject * slice, Physics3D_OrientedCoulombFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction >,std::allocator< std::shared_ptr< Physics3D::OrientedCoulombFriction > > > const &

        __setitem__(Physics3D_OrientedCoulombFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_OrientedCoulombFriction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_OrientedCoulombFriction_Vector self, Physics3D_OrientedCoulombFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > > &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_OrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::allocator_type"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_OrientedCoulombFriction_Vector self)"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator

        erase(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator first, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_OrientedCoulombFriction_Vector self) -> Physics3D_OrientedCoulombFriction_Vector
        __init__(Physics3D_OrientedCoulombFriction_Vector self, Physics3D_OrientedCoulombFriction_Vector other) -> Physics3D_OrientedCoulombFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > > const &

        __init__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type size) -> Physics3D_OrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type

        __init__(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type size, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & value) -> Physics3D_OrientedCoulombFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_OrientedCoulombFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_front(self)

    def back(self):
        r"""back(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type

        resize(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        insert(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type n, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_OrientedCoulombFriction_Vector self, std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type

        """
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_OrientedCoulombFriction_Vector self) -> std::vector< std::shared_ptr< Physics3D::OrientedCoulombFriction > >::size_type"""
        return _Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_OrientedCoulombFriction_Vector

# Register Physics3D_OrientedCoulombFriction_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_OrientedCoulombFriction_Vector_swigregister(Physics3D_OrientedCoulombFriction_Vector)

class Physics3D_Prismatic_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Prismatic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Prismatic_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type j) -> Physics3D_Prismatic_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type

        __setslice__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type j, Physics3D_Prismatic_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Prismatic >,std::allocator< std::shared_ptr< Physics3D::Prismatic > > > const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type

        __delitem__(Physics3D_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Prismatic_Vector self, PySliceObject * slice) -> Physics3D_Prismatic_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Prismatic_Vector self, PySliceObject * slice, Physics3D_Prismatic_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Prismatic >,std::allocator< std::shared_ptr< Physics3D::Prismatic > > > const &

        __setitem__(Physics3D_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Prismatic > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Prismatic_Vector self, Physics3D_Prismatic_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Prismatic > > &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator

        erase(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator first, std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Prismatic_Vector self) -> Physics3D_Prismatic_Vector
        __init__(Physics3D_Prismatic_Vector self, Physics3D_Prismatic_Vector other) -> Physics3D_Prismatic_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Prismatic > > const &

        __init__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type size) -> Physics3D_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type

        __init__(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type size, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & value) -> Physics3D_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Prismatic_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Prismatic_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type n, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type

        resize(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        insert(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type n, std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Prismatic > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type

        """
        return _Physics3DSwig.Physics3D_Prismatic_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Prismatic_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Prismatic_Vector

# Register Physics3D_Prismatic_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Prismatic_Vector_swigregister(Physics3D_Prismatic_Vector)

class Physics3D_RigidBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::RigidBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_RigidBody_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type j) -> Physics3D_RigidBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type

        __setslice__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type j, Physics3D_RigidBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::RigidBody >,std::allocator< std::shared_ptr< Physics3D::RigidBody > > > const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type

        __delitem__(Physics3D_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_RigidBody_Vector self, PySliceObject * slice) -> Physics3D_RigidBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_RigidBody_Vector self, PySliceObject * slice, Physics3D_RigidBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::RigidBody >,std::allocator< std::shared_ptr< Physics3D::RigidBody > > > const &

        __setitem__(Physics3D_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RigidBody > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_RigidBody_Vector self, Physics3D_RigidBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::RigidBody > > &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::allocator_type"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator

        erase(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator first, std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_RigidBody_Vector self) -> Physics3D_RigidBody_Vector
        __init__(Physics3D_RigidBody_Vector self, Physics3D_RigidBody_Vector other) -> Physics3D_RigidBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::RigidBody > > const &

        __init__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type size) -> Physics3D_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type

        __init__(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type size, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & value) -> Physics3D_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        _Physics3DSwig.Physics3D_RigidBody_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_RigidBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_front(self)

    def back(self):
        r"""back(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type n, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type

        resize(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator pos, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        insert(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator pos, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type n, std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RigidBody > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type

        """
        return _Physics3DSwig.Physics3D_RigidBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_RigidBody_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_RigidBody_Vector

# Register Physics3D_RigidBody_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_RigidBody_Vector_swigregister(Physics3D_RigidBody_Vector)

class Physics3D_RotationalVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_RotationalVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type j) -> Physics3D_RotationalVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type

        __setslice__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type j, Physics3D_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::RotationalVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type

        __delitem__(Physics3D_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_RotationalVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_RotationalVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_RotationalVelocityMotor_Vector self, PySliceObject * slice, Physics3D_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::RotationalVelocityMotor > > > const &

        __setitem__(Physics3D_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_RotationalVelocityMotor_Vector self, Physics3D_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator

        erase(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_RotationalVelocityMotor_Vector self) -> Physics3D_RotationalVelocityMotor_Vector
        __init__(Physics3D_RotationalVelocityMotor_Vector self, Physics3D_RotationalVelocityMotor_Vector other) -> Physics3D_RotationalVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > > const &

        __init__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type size) -> Physics3D_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type

        __init__(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & value) -> Physics3D_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_RotationalVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type

        resize(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        insert(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_RotationalVelocityMotor_Vector

# Register Physics3D_RotationalVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_RotationalVelocityMotor_Vector_swigregister(Physics3D_RotationalVelocityMotor_Vector)

class Physics3D_SpringInteraction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_SpringInteraction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type j) -> Physics3D_SpringInteraction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type

        __setslice__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type j, Physics3D_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::SpringInteraction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type

        __delitem__(Physics3D_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_SpringInteraction1DOF_Vector self, PySliceObject * slice) -> Physics3D_SpringInteraction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_SpringInteraction1DOF_Vector self, PySliceObject * slice, Physics3D_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::SpringInteraction1DOF > > > const &

        __setitem__(Physics3D_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_SpringInteraction1DOF_Vector self, Physics3D_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator

        erase(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator first, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_SpringInteraction1DOF_Vector self) -> Physics3D_SpringInteraction1DOF_Vector
        __init__(Physics3D_SpringInteraction1DOF_Vector self, Physics3D_SpringInteraction1DOF_Vector other) -> Physics3D_SpringInteraction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > > const &

        __init__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type size) -> Physics3D_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type

        __init__(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type size, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & value) -> Physics3D_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_SpringInteraction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type

        resize(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        insert(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_SpringInteraction1DOF_Vector

# Register Physics3D_SpringInteraction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_SpringInteraction1DOF_Vector_swigregister(Physics3D_SpringInteraction1DOF_Vector)

class Physics3D_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_System_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j) -> Physics3D_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j, Physics3D_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::System >,std::allocator< std::shared_ptr< Physics3D::System > > > const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        __delitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_System_Vector self, PySliceObject * slice) -> Physics3D_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_System_Vector self, PySliceObject * slice, Physics3D_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::System >,std::allocator< std::shared_ptr< Physics3D::System > > > const &

        __setitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type"""
        return _Physics3DSwig.Physics3D_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_System_Vector self, Physics3D_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::System > > &

        """
        return _Physics3DSwig.Physics3D_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::allocator_type"""
        return _Physics3DSwig.Physics3D_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator

        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator first, std::vector< std::shared_ptr< Physics3D::System > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::System > >::iterator

        """
        return _Physics3DSwig.Physics3D_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_System_Vector self) -> Physics3D_System_Vector
        __init__(Physics3D_System_Vector self, Physics3D_System_Vector other) -> Physics3D_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::System > > const &

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type size) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type size, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & value) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        _Physics3DSwig.Physics3D_System_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_front(self)

    def back(self):
        r"""back(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type n, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< Physics3D::System > >::size_type n, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        """
        return _Physics3DSwig.Physics3D_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_System_Vector

# Register Physics3D_System_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_System_Vector_swigregister(Physics3D_System_Vector)

class Physics3D_TorsionSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::TorsionSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_TorsionSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type j) -> Physics3D_TorsionSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type

        __setslice__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type j, Physics3D_TorsionSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::TorsionSpring >,std::allocator< std::shared_ptr< Physics3D::TorsionSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type

        __delitem__(Physics3D_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_TorsionSpring_Vector self, PySliceObject * slice) -> Physics3D_TorsionSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_TorsionSpring_Vector self, PySliceObject * slice, Physics3D_TorsionSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::TorsionSpring >,std::allocator< std::shared_ptr< Physics3D::TorsionSpring > > > const &

        __setitem__(Physics3D_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_TorsionSpring_Vector self, Physics3D_TorsionSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::TorsionSpring > > &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator

        erase(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator first, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_TorsionSpring_Vector self) -> Physics3D_TorsionSpring_Vector
        __init__(Physics3D_TorsionSpring_Vector self, Physics3D_TorsionSpring_Vector other) -> Physics3D_TorsionSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::TorsionSpring > > const &

        __init__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type size) -> Physics3D_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type

        __init__(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type size, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & value) -> Physics3D_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_TorsionSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_TorsionSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type

        resize(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        insert(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_TorsionSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_TorsionSpring_Vector

# Register Physics3D_TorsionSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_TorsionSpring_Vector_swigregister(Physics3D_TorsionSpring_Vector)

class Physics3D_Transform_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Transform > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Transform_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j) -> Physics3D_Transform_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        __setslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j, Physics3D_Transform_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Transform >,std::allocator< std::shared_ptr< Physics3D::Transform > > > const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        __delitem__(Physics3D_Transform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Transform_Vector self, PySliceObject * slice) -> Physics3D_Transform_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Transform_Vector self, PySliceObject * slice, Physics3D_Transform_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Transform >,std::allocator< std::shared_ptr< Physics3D::Transform > > > const &

        __setitem__(Physics3D_Transform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Transform_Vector self, Physics3D_Transform_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Transform > > &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Transform_Vector self)"""
        return _Physics3DSwig.Physics3D_Transform_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Transform_Vector self)"""
        return _Physics3DSwig.Physics3D_Transform_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        erase(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator first, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Transform_Vector self) -> Physics3D_Transform_Vector
        __init__(Physics3D_Transform_Vector self, Physics3D_Transform_Vector other) -> Physics3D_Transform_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Transform > > const &

        __init__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type size) -> Physics3D_Transform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        __init__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type size, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & value) -> Physics3D_Transform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Transform_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Transform_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Transform_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Transform_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        resize(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        insert(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Transform_Vector

# Register Physics3D_Transform_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Transform_Vector_swigregister(Physics3D_Transform_Vector)

class Physics3D_TriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_TriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type j) -> Physics3D_TriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type

        __setslice__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type j, Physics3D_TriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry >,std::allocator< std::shared_ptr< Physics3D::TriMeshGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type

        __delitem__(Physics3D_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_TriMeshGeometry_Vector self, PySliceObject * slice) -> Physics3D_TriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_TriMeshGeometry_Vector self, PySliceObject * slice, Physics3D_TriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry >,std::allocator< std::shared_ptr< Physics3D::TriMeshGeometry > > > const &

        __setitem__(Physics3D_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_TriMeshGeometry_Vector self, Physics3D_TriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > > &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator

        erase(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_TriMeshGeometry_Vector self) -> Physics3D_TriMeshGeometry_Vector
        __init__(Physics3D_TriMeshGeometry_Vector self, Physics3D_TriMeshGeometry_Vector other) -> Physics3D_TriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > > const &

        __init__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type size) -> Physics3D_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type

        __init__(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & value) -> Physics3D_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_TriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type

        resize(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        insert(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_TriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_TriMeshGeometry_Vector

# Register Physics3D_TriMeshGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_TriMeshGeometry_Vector_swigregister(Physics3D_TriMeshGeometry_Vector)

class Physics3D_VelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::VelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_VelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type j) -> Physics3D_VelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type

        __setslice__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type j, Physics3D_VelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::VelocityMotor >,std::allocator< std::shared_ptr< Physics3D::VelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type

        __delitem__(Physics3D_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_VelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_VelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_VelocityMotor_Vector self, PySliceObject * slice, Physics3D_VelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::VelocityMotor >,std::allocator< std::shared_ptr< Physics3D::VelocityMotor > > > const &

        __setitem__(Physics3D_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_VelocityMotor_Vector self, Physics3D_VelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::VelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator

        erase(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_VelocityMotor_Vector self) -> Physics3D_VelocityMotor_Vector
        __init__(Physics3D_VelocityMotor_Vector self, Physics3D_VelocityMotor_Vector other) -> Physics3D_VelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::VelocityMotor > > const &

        __init__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type size) -> Physics3D_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type

        __init__(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & value) -> Physics3D_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_VelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_VelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type

        resize(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        insert(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_VelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_VelocityMotor_Vector

# Register Physics3D_VelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_VelocityMotor_Vector_swigregister(Physics3D_VelocityMotor_Vector)



