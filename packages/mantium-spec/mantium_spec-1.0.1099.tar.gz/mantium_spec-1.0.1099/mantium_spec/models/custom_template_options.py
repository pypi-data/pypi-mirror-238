# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class CustomTemplateOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'is_activating': 'bool',
        'api_data_source_details': 'list[GitlabDataSourceDetails]',
        'credentials': 'list[ApplicationCredential]',
        'dataset_id': 'str',
        'content_column': 'str',
        'embedding_column': 'str'
    }

    attribute_map = {
        'type': 'type',
        'is_activating': 'is_activating',
        'api_data_source_details': 'api_data_source_details',
        'credentials': 'credentials',
        'dataset_id': 'dataset_id',
        'content_column': 'content_column',
        'embedding_column': 'embedding_column'
    }

    def __init__(self, type='custom', is_activating=False, api_data_source_details=None, credentials=None, dataset_id=None, content_column=None, embedding_column=None, local_vars_configuration=None):  # noqa: E501
        """CustomTemplateOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._is_activating = None
        self._api_data_source_details = None
        self._credentials = None
        self._dataset_id = None
        self._content_column = None
        self._embedding_column = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if is_activating is not None:
            self.is_activating = is_activating
        if api_data_source_details is not None:
            self.api_data_source_details = api_data_source_details
        if credentials is not None:
            self.credentials = credentials
        self.dataset_id = dataset_id
        if content_column is not None:
            self.content_column = content_column
        if embedding_column is not None:
            self.embedding_column = embedding_column

    @property
    def type(self):
        """Gets the type of this CustomTemplateOptions.  # noqa: E501


        :return: The type of this CustomTemplateOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomTemplateOptions.


        :param type: The type of this CustomTemplateOptions.  # noqa: E501
        :type type: str
        """
        allowed_values = ["custom"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_activating(self):
        """Gets the is_activating of this CustomTemplateOptions.  # noqa: E501


        :return: The is_activating of this CustomTemplateOptions.  # noqa: E501
        :rtype: bool
        """
        return self._is_activating

    @is_activating.setter
    def is_activating(self, is_activating):
        """Sets the is_activating of this CustomTemplateOptions.


        :param is_activating: The is_activating of this CustomTemplateOptions.  # noqa: E501
        :type is_activating: bool
        """

        self._is_activating = is_activating

    @property
    def api_data_source_details(self):
        """Gets the api_data_source_details of this CustomTemplateOptions.  # noqa: E501


        :return: The api_data_source_details of this CustomTemplateOptions.  # noqa: E501
        :rtype: list[GitlabDataSourceDetails]
        """
        return self._api_data_source_details

    @api_data_source_details.setter
    def api_data_source_details(self, api_data_source_details):
        """Sets the api_data_source_details of this CustomTemplateOptions.


        :param api_data_source_details: The api_data_source_details of this CustomTemplateOptions.  # noqa: E501
        :type api_data_source_details: list[GitlabDataSourceDetails]
        """

        self._api_data_source_details = api_data_source_details

    @property
    def credentials(self):
        """Gets the credentials of this CustomTemplateOptions.  # noqa: E501


        :return: The credentials of this CustomTemplateOptions.  # noqa: E501
        :rtype: list[ApplicationCredential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this CustomTemplateOptions.


        :param credentials: The credentials of this CustomTemplateOptions.  # noqa: E501
        :type credentials: list[ApplicationCredential]
        """

        self._credentials = credentials

    @property
    def dataset_id(self):
        """Gets the dataset_id of this CustomTemplateOptions.  # noqa: E501

        ID of the input dataset  # noqa: E501

        :return: The dataset_id of this CustomTemplateOptions.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this CustomTemplateOptions.

        ID of the input dataset  # noqa: E501

        :param dataset_id: The dataset_id of this CustomTemplateOptions.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def content_column(self):
        """Gets the content_column of this CustomTemplateOptions.  # noqa: E501


        :return: The content_column of this CustomTemplateOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_column

    @content_column.setter
    def content_column(self, content_column):
        """Sets the content_column of this CustomTemplateOptions.


        :param content_column: The content_column of this CustomTemplateOptions.  # noqa: E501
        :type content_column: str
        """

        self._content_column = content_column

    @property
    def embedding_column(self):
        """Gets the embedding_column of this CustomTemplateOptions.  # noqa: E501


        :return: The embedding_column of this CustomTemplateOptions.  # noqa: E501
        :rtype: str
        """
        return self._embedding_column

    @embedding_column.setter
    def embedding_column(self, embedding_column):
        """Sets the embedding_column of this CustomTemplateOptions.


        :param embedding_column: The embedding_column of this CustomTemplateOptions.  # noqa: E501
        :type embedding_column: str
        """

        self._embedding_column = embedding_column

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomTemplateOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomTemplateOptions):
            return True

        return self.to_dict() != other.to_dict()
