# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class ApplicationChatResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'request_id': 'str',
        'documents': 'list[Document]',
        'supporting_content': 'list[Document]',
        'citations': 'list[list[Citation]]',
        'query': 'str',
        'chat_session_id': 'str',
        'retriever_top_k': 'int',
        'reader_top_k': 'int',
        'answers': 'list[ChatAnswer]'
    }

    attribute_map = {
        'request_id': 'request_id',
        'documents': 'documents',
        'supporting_content': 'supporting_content',
        'citations': 'citations',
        'query': 'query',
        'chat_session_id': 'chat_session_id',
        'retriever_top_k': 'retriever_top_k',
        'reader_top_k': 'reader_top_k',
        'answers': 'answers'
    }

    def __init__(self, request_id=None, documents=None, supporting_content=None, citations=None, query=None, chat_session_id='', retriever_top_k=10, reader_top_k=5, answers=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationChatResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._request_id = None
        self._documents = None
        self._supporting_content = None
        self._citations = None
        self._query = None
        self._chat_session_id = None
        self._retriever_top_k = None
        self._reader_top_k = None
        self._answers = None
        self.discriminator = None

        self.request_id = request_id
        if documents is not None:
            self.documents = documents
        if supporting_content is not None:
            self.supporting_content = supporting_content
        if citations is not None:
            self.citations = citations
        self.query = query
        if chat_session_id is not None:
            self.chat_session_id = chat_session_id
        if retriever_top_k is not None:
            self.retriever_top_k = retriever_top_k
        if reader_top_k is not None:
            self.reader_top_k = reader_top_k
        self.answers = answers

    @property
    def request_id(self):
        """Gets the request_id of this ApplicationChatResponse.  # noqa: E501


        :return: The request_id of this ApplicationChatResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ApplicationChatResponse.


        :param request_id: The request_id of this ApplicationChatResponse.  # noqa: E501
        :type request_id: str
        """
        if self.local_vars_configuration.client_side_validation and request_id is None:  # noqa: E501
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def documents(self):
        """Gets the documents of this ApplicationChatResponse.  # noqa: E501


        :return: The documents of this ApplicationChatResponse.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ApplicationChatResponse.


        :param documents: The documents of this ApplicationChatResponse.  # noqa: E501
        :type documents: list[Document]
        """

        self._documents = documents

    @property
    def supporting_content(self):
        """Gets the supporting_content of this ApplicationChatResponse.  # noqa: E501


        :return: The supporting_content of this ApplicationChatResponse.  # noqa: E501
        :rtype: list[Document]
        """
        return self._supporting_content

    @supporting_content.setter
    def supporting_content(self, supporting_content):
        """Sets the supporting_content of this ApplicationChatResponse.


        :param supporting_content: The supporting_content of this ApplicationChatResponse.  # noqa: E501
        :type supporting_content: list[Document]
        """

        self._supporting_content = supporting_content

    @property
    def citations(self):
        """Gets the citations of this ApplicationChatResponse.  # noqa: E501


        :return: The citations of this ApplicationChatResponse.  # noqa: E501
        :rtype: list[list[Citation]]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this ApplicationChatResponse.


        :param citations: The citations of this ApplicationChatResponse.  # noqa: E501
        :type citations: list[list[Citation]]
        """

        self._citations = citations

    @property
    def query(self):
        """Gets the query of this ApplicationChatResponse.  # noqa: E501


        :return: The query of this ApplicationChatResponse.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ApplicationChatResponse.


        :param query: The query of this ApplicationChatResponse.  # noqa: E501
        :type query: str
        """
        if self.local_vars_configuration.client_side_validation and query is None:  # noqa: E501
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def chat_session_id(self):
        """Gets the chat_session_id of this ApplicationChatResponse.  # noqa: E501

        Chat Session ID  # noqa: E501

        :return: The chat_session_id of this ApplicationChatResponse.  # noqa: E501
        :rtype: str
        """
        return self._chat_session_id

    @chat_session_id.setter
    def chat_session_id(self, chat_session_id):
        """Sets the chat_session_id of this ApplicationChatResponse.

        Chat Session ID  # noqa: E501

        :param chat_session_id: The chat_session_id of this ApplicationChatResponse.  # noqa: E501
        :type chat_session_id: str
        """

        self._chat_session_id = chat_session_id

    @property
    def retriever_top_k(self):
        """Gets the retriever_top_k of this ApplicationChatResponse.  # noqa: E501


        :return: The retriever_top_k of this ApplicationChatResponse.  # noqa: E501
        :rtype: int
        """
        return self._retriever_top_k

    @retriever_top_k.setter
    def retriever_top_k(self, retriever_top_k):
        """Sets the retriever_top_k of this ApplicationChatResponse.


        :param retriever_top_k: The retriever_top_k of this ApplicationChatResponse.  # noqa: E501
        :type retriever_top_k: int
        """

        self._retriever_top_k = retriever_top_k

    @property
    def reader_top_k(self):
        """Gets the reader_top_k of this ApplicationChatResponse.  # noqa: E501


        :return: The reader_top_k of this ApplicationChatResponse.  # noqa: E501
        :rtype: int
        """
        return self._reader_top_k

    @reader_top_k.setter
    def reader_top_k(self, reader_top_k):
        """Sets the reader_top_k of this ApplicationChatResponse.


        :param reader_top_k: The reader_top_k of this ApplicationChatResponse.  # noqa: E501
        :type reader_top_k: int
        """

        self._reader_top_k = reader_top_k

    @property
    def answers(self):
        """Gets the answers of this ApplicationChatResponse.  # noqa: E501


        :return: The answers of this ApplicationChatResponse.  # noqa: E501
        :rtype: list[ChatAnswer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this ApplicationChatResponse.


        :param answers: The answers of this ApplicationChatResponse.  # noqa: E501
        :type answers: list[ChatAnswer]
        """
        if self.local_vars_configuration.client_side_validation and answers is None:  # noqa: E501
            raise ValueError("Invalid value for `answers`, must not be `None`")  # noqa: E501

        self._answers = answers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationChatResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationChatResponse):
            return True

        return self.to_dict() != other.to_dict()
