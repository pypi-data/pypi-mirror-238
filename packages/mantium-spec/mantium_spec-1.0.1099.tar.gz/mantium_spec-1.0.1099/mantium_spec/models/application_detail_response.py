# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class ApplicationDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'name': 'str',
        'description': 'str',
        'top_k': 'int',
        'status': 'ApplicationStatus',
        'last_synced': 'datetime',
        'storage_size': 'int',
        'data_sources': 'list[DataSourcesInner]',
        'check_permissions': 'bool',
        'similarity_threshold': 'float',
        'destination_id': 'str',
        'embedding_count': 'int',
        'template': 'Template',
        'chat_config': 'ChatConfig'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'name': 'name',
        'description': 'description',
        'top_k': 'top_k',
        'status': 'status',
        'last_synced': 'last_synced',
        'storage_size': 'storage_size',
        'data_sources': 'data_sources',
        'check_permissions': 'check_permissions',
        'similarity_threshold': 'similarity_threshold',
        'destination_id': 'destination_id',
        'embedding_count': 'embedding_count',
        'template': 'template',
        'chat_config': 'chat_config'
    }

    def __init__(self, id=None, created_at=None, name=None, description=None, top_k=None, status=None, last_synced=None, storage_size=0, data_sources=[], check_permissions=None, similarity_threshold=None, destination_id=None, embedding_count=0, template=None, chat_config=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._name = None
        self._description = None
        self._top_k = None
        self._status = None
        self._last_synced = None
        self._storage_size = None
        self._data_sources = None
        self._check_permissions = None
        self._similarity_threshold = None
        self._destination_id = None
        self._embedding_count = None
        self._template = None
        self._chat_config = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        self.name = name
        self.description = description
        self.top_k = top_k
        self.status = status
        if last_synced is not None:
            self.last_synced = last_synced
        if storage_size is not None:
            self.storage_size = storage_size
        if data_sources is not None:
            self.data_sources = data_sources
        self.check_permissions = check_permissions
        self.similarity_threshold = similarity_threshold
        if destination_id is not None:
            self.destination_id = destination_id
        if embedding_count is not None:
            self.embedding_count = embedding_count
        if template is not None:
            self.template = template
        if chat_config is not None:
            self.chat_config = chat_config

    @property
    def id(self):
        """Gets the id of this ApplicationDetailResponse.  # noqa: E501

        A unique identifier  # noqa: E501

        :return: The id of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationDetailResponse.

        A unique identifier  # noqa: E501

        :param id: The id of this ApplicationDetailResponse.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ApplicationDetailResponse.  # noqa: E501

        Date the application was created  # noqa: E501

        :return: The created_at of this ApplicationDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApplicationDetailResponse.

        Date the application was created  # noqa: E501

        :param created_at: The created_at of this ApplicationDetailResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def name(self):
        """Gets the name of this ApplicationDetailResponse.  # noqa: E501

        Name of the application  # noqa: E501

        :return: The name of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationDetailResponse.

        Name of the application  # noqa: E501

        :param name: The name of this ApplicationDetailResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApplicationDetailResponse.  # noqa: E501

        Description of the application  # noqa: E501

        :return: The description of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationDetailResponse.

        Description of the application  # noqa: E501

        :param description: The description of this ApplicationDetailResponse.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def top_k(self):
        """Gets the top_k of this ApplicationDetailResponse.  # noqa: E501

        Number of results to return  # noqa: E501

        :return: The top_k of this ApplicationDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this ApplicationDetailResponse.

        Number of results to return  # noqa: E501

        :param top_k: The top_k of this ApplicationDetailResponse.  # noqa: E501
        :type top_k: int
        """
        if self.local_vars_configuration.client_side_validation and top_k is None:  # noqa: E501
            raise ValueError("Invalid value for `top_k`, must not be `None`")  # noqa: E501

        self._top_k = top_k

    @property
    def status(self):
        """Gets the status of this ApplicationDetailResponse.  # noqa: E501


        :return: The status of this ApplicationDetailResponse.  # noqa: E501
        :rtype: ApplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationDetailResponse.


        :param status: The status of this ApplicationDetailResponse.  # noqa: E501
        :type status: ApplicationStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def last_synced(self):
        """Gets the last_synced of this ApplicationDetailResponse.  # noqa: E501

        The last time a DatasetUpdate job ran for the application  # noqa: E501

        :return: The last_synced of this ApplicationDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_synced

    @last_synced.setter
    def last_synced(self, last_synced):
        """Sets the last_synced of this ApplicationDetailResponse.

        The last time a DatasetUpdate job ran for the application  # noqa: E501

        :param last_synced: The last_synced of this ApplicationDetailResponse.  # noqa: E501
        :type last_synced: datetime
        """

        self._last_synced = last_synced

    @property
    def storage_size(self):
        """Gets the storage_size of this ApplicationDetailResponse.  # noqa: E501

        current file storage size for the application  # noqa: E501

        :return: The storage_size of this ApplicationDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._storage_size

    @storage_size.setter
    def storage_size(self, storage_size):
        """Sets the storage_size of this ApplicationDetailResponse.

        current file storage size for the application  # noqa: E501

        :param storage_size: The storage_size of this ApplicationDetailResponse.  # noqa: E501
        :type storage_size: int
        """

        self._storage_size = storage_size

    @property
    def data_sources(self):
        """Gets the data_sources of this ApplicationDetailResponse.  # noqa: E501

        Data sources used by the application  # noqa: E501

        :return: The data_sources of this ApplicationDetailResponse.  # noqa: E501
        :rtype: list[DataSourcesInner]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this ApplicationDetailResponse.

        Data sources used by the application  # noqa: E501

        :param data_sources: The data_sources of this ApplicationDetailResponse.  # noqa: E501
        :type data_sources: list[DataSourcesInner]
        """

        self._data_sources = data_sources

    @property
    def check_permissions(self):
        """Gets the check_permissions of this ApplicationDetailResponse.  # noqa: E501

        Whether or not application queries check document permissions  # noqa: E501

        :return: The check_permissions of this ApplicationDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._check_permissions

    @check_permissions.setter
    def check_permissions(self, check_permissions):
        """Sets the check_permissions of this ApplicationDetailResponse.

        Whether or not application queries check document permissions  # noqa: E501

        :param check_permissions: The check_permissions of this ApplicationDetailResponse.  # noqa: E501
        :type check_permissions: bool
        """
        if self.local_vars_configuration.client_side_validation and check_permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `check_permissions`, must not be `None`")  # noqa: E501

        self._check_permissions = check_permissions

    @property
    def similarity_threshold(self):
        """Gets the similarity_threshold of this ApplicationDetailResponse.  # noqa: E501

        (Experimental) How close must an authorized document score be to the lowest overall top k document score to be considered a match for the query  # noqa: E501

        :return: The similarity_threshold of this ApplicationDetailResponse.  # noqa: E501
        :rtype: float
        """
        return self._similarity_threshold

    @similarity_threshold.setter
    def similarity_threshold(self, similarity_threshold):
        """Sets the similarity_threshold of this ApplicationDetailResponse.

        (Experimental) How close must an authorized document score be to the lowest overall top k document score to be considered a match for the query  # noqa: E501

        :param similarity_threshold: The similarity_threshold of this ApplicationDetailResponse.  # noqa: E501
        :type similarity_threshold: float
        """
        if self.local_vars_configuration.client_side_validation and similarity_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `similarity_threshold`, must not be `None`")  # noqa: E501

        self._similarity_threshold = similarity_threshold

    @property
    def destination_id(self):
        """Gets the destination_id of this ApplicationDetailResponse.  # noqa: E501

        Destination identifier  # noqa: E501

        :return: The destination_id of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this ApplicationDetailResponse.

        Destination identifier  # noqa: E501

        :param destination_id: The destination_id of this ApplicationDetailResponse.  # noqa: E501
        :type destination_id: str
        """

        self._destination_id = destination_id

    @property
    def embedding_count(self):
        """Gets the embedding_count of this ApplicationDetailResponse.  # noqa: E501

        Number of embeddings in the destination  # noqa: E501

        :return: The embedding_count of this ApplicationDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._embedding_count

    @embedding_count.setter
    def embedding_count(self, embedding_count):
        """Sets the embedding_count of this ApplicationDetailResponse.

        Number of embeddings in the destination  # noqa: E501

        :param embedding_count: The embedding_count of this ApplicationDetailResponse.  # noqa: E501
        :type embedding_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                embedding_count is not None and embedding_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `embedding_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._embedding_count = embedding_count

    @property
    def template(self):
        """Gets the template of this ApplicationDetailResponse.  # noqa: E501


        :return: The template of this ApplicationDetailResponse.  # noqa: E501
        :rtype: Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ApplicationDetailResponse.


        :param template: The template of this ApplicationDetailResponse.  # noqa: E501
        :type template: Template
        """

        self._template = template

    @property
    def chat_config(self):
        """Gets the chat_config of this ApplicationDetailResponse.  # noqa: E501


        :return: The chat_config of this ApplicationDetailResponse.  # noqa: E501
        :rtype: ChatConfig
        """
        return self._chat_config

    @chat_config.setter
    def chat_config(self, chat_config):
        """Sets the chat_config of this ApplicationDetailResponse.


        :param chat_config: The chat_config of this ApplicationDetailResponse.  # noqa: E501
        :type chat_config: ChatConfig
        """

        self._chat_config = chat_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
