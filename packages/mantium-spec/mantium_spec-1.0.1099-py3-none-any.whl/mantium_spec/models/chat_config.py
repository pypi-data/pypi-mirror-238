# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class ChatConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'system_prompt': 'str',
        'moderation': 'Moderation',
        'tools': 'Tools'
    }

    attribute_map = {
        'system_prompt': 'system_prompt',
        'moderation': 'moderation',
        'tools': 'tools'
    }

    def __init__(self, system_prompt='''
You will be asked questions, and your task is to choose which tool to use given the available tools.
''', moderation=None, tools=None, local_vars_configuration=None):  # noqa: E501
        """ChatConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._system_prompt = None
        self._moderation = None
        self._tools = None
        self.discriminator = None

        if system_prompt is not None:
            self.system_prompt = system_prompt
        if moderation is not None:
            self.moderation = moderation
        if tools is not None:
            self.tools = tools

    @property
    def system_prompt(self):
        """Gets the system_prompt of this ChatConfig.  # noqa: E501

        The prompt to use when generating a response.  # noqa: E501

        :return: The system_prompt of this ChatConfig.  # noqa: E501
        :rtype: str
        """
        return self._system_prompt

    @system_prompt.setter
    def system_prompt(self, system_prompt):
        """Sets the system_prompt of this ChatConfig.

        The prompt to use when generating a response.  # noqa: E501

        :param system_prompt: The system_prompt of this ChatConfig.  # noqa: E501
        :type system_prompt: str
        """

        self._system_prompt = system_prompt

    @property
    def moderation(self):
        """Gets the moderation of this ChatConfig.  # noqa: E501


        :return: The moderation of this ChatConfig.  # noqa: E501
        :rtype: Moderation
        """
        return self._moderation

    @moderation.setter
    def moderation(self, moderation):
        """Sets the moderation of this ChatConfig.


        :param moderation: The moderation of this ChatConfig.  # noqa: E501
        :type moderation: Moderation
        """

        self._moderation = moderation

    @property
    def tools(self):
        """Gets the tools of this ChatConfig.  # noqa: E501


        :return: The tools of this ChatConfig.  # noqa: E501
        :rtype: Tools
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this ChatConfig.


        :param tools: The tools of this ChatConfig.  # noqa: E501
        :type tools: Tools
        """

        self._tools = tools

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChatConfig):
            return True

        return self.to_dict() != other.to_dict()
