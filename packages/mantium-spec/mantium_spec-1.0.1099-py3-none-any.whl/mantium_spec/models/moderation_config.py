# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class ModerationConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hate_speech': 'ModerationLevel',
        'self_harm': 'ModerationLevel',
        'sexual_content': 'ModerationLevel',
        'violence': 'ModerationLevel'
    }

    attribute_map = {
        'hate_speech': 'hate_speech',
        'self_harm': 'self_harm',
        'sexual_content': 'sexual_content',
        'violence': 'violence'
    }

    def __init__(self, hate_speech=None, self_harm=None, sexual_content=None, violence=None, local_vars_configuration=None):  # noqa: E501
        """ModerationConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._hate_speech = None
        self._self_harm = None
        self._sexual_content = None
        self._violence = None
        self.discriminator = None

        if hate_speech is not None:
            self.hate_speech = hate_speech
        if self_harm is not None:
            self.self_harm = self_harm
        if sexual_content is not None:
            self.sexual_content = sexual_content
        if violence is not None:
            self.violence = violence

    @property
    def hate_speech(self):
        """Gets the hate_speech of this ModerationConfig.  # noqa: E501


        :return: The hate_speech of this ModerationConfig.  # noqa: E501
        :rtype: ModerationLevel
        """
        return self._hate_speech

    @hate_speech.setter
    def hate_speech(self, hate_speech):
        """Sets the hate_speech of this ModerationConfig.


        :param hate_speech: The hate_speech of this ModerationConfig.  # noqa: E501
        :type hate_speech: ModerationLevel
        """

        self._hate_speech = hate_speech

    @property
    def self_harm(self):
        """Gets the self_harm of this ModerationConfig.  # noqa: E501


        :return: The self_harm of this ModerationConfig.  # noqa: E501
        :rtype: ModerationLevel
        """
        return self._self_harm

    @self_harm.setter
    def self_harm(self, self_harm):
        """Sets the self_harm of this ModerationConfig.


        :param self_harm: The self_harm of this ModerationConfig.  # noqa: E501
        :type self_harm: ModerationLevel
        """

        self._self_harm = self_harm

    @property
    def sexual_content(self):
        """Gets the sexual_content of this ModerationConfig.  # noqa: E501


        :return: The sexual_content of this ModerationConfig.  # noqa: E501
        :rtype: ModerationLevel
        """
        return self._sexual_content

    @sexual_content.setter
    def sexual_content(self, sexual_content):
        """Sets the sexual_content of this ModerationConfig.


        :param sexual_content: The sexual_content of this ModerationConfig.  # noqa: E501
        :type sexual_content: ModerationLevel
        """

        self._sexual_content = sexual_content

    @property
    def violence(self):
        """Gets the violence of this ModerationConfig.  # noqa: E501


        :return: The violence of this ModerationConfig.  # noqa: E501
        :rtype: ModerationLevel
        """
        return self._violence

    @violence.setter
    def violence(self, violence):
        """Sets the violence of this ModerationConfig.


        :param violence: The violence of this ModerationConfig.  # noqa: E501
        :type violence: ModerationLevel
        """

        self._violence = violence

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModerationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModerationConfig):
            return True

        return self.to_dict() != other.to_dict()
