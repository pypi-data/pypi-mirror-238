# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1099
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class Answer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'answer': 'str',
        'score': 'float',
        'context': 'str',
        'offsets_in_document': 'list[Span]',
        'offsets_in_context': 'list[Span]',
        'meta': 'AnswerMeta'
    }

    attribute_map = {
        'answer': 'answer',
        'score': 'score',
        'context': 'context',
        'offsets_in_document': 'offsets_in_document',
        'offsets_in_context': 'offsets_in_context',
        'meta': 'meta'
    }

    def __init__(self, answer=None, score=None, context=None, offsets_in_document=None, offsets_in_context=None, meta=None, local_vars_configuration=None):  # noqa: E501
        """Answer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._answer = None
        self._score = None
        self._context = None
        self._offsets_in_document = None
        self._offsets_in_context = None
        self._meta = None
        self.discriminator = None

        self.answer = answer
        self.score = score
        self.context = context
        self.offsets_in_document = offsets_in_document
        self.offsets_in_context = offsets_in_context
        self.meta = meta

    @property
    def answer(self):
        """Gets the answer of this Answer.  # noqa: E501


        :return: The answer of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this Answer.


        :param answer: The answer of this Answer.  # noqa: E501
        :type answer: str
        """
        if self.local_vars_configuration.client_side_validation and answer is None:  # noqa: E501
            raise ValueError("Invalid value for `answer`, must not be `None`")  # noqa: E501

        self._answer = answer

    @property
    def score(self):
        """Gets the score of this Answer.  # noqa: E501


        :return: The score of this Answer.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Answer.


        :param score: The score of this Answer.  # noqa: E501
        :type score: float
        """
        if self.local_vars_configuration.client_side_validation and score is None:  # noqa: E501
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def context(self):
        """Gets the context of this Answer.  # noqa: E501


        :return: The context of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Answer.


        :param context: The context of this Answer.  # noqa: E501
        :type context: str
        """
        if self.local_vars_configuration.client_side_validation and context is None:  # noqa: E501
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def offsets_in_document(self):
        """Gets the offsets_in_document of this Answer.  # noqa: E501


        :return: The offsets_in_document of this Answer.  # noqa: E501
        :rtype: list[Span]
        """
        return self._offsets_in_document

    @offsets_in_document.setter
    def offsets_in_document(self, offsets_in_document):
        """Sets the offsets_in_document of this Answer.


        :param offsets_in_document: The offsets_in_document of this Answer.  # noqa: E501
        :type offsets_in_document: list[Span]
        """
        if self.local_vars_configuration.client_side_validation and offsets_in_document is None:  # noqa: E501
            raise ValueError("Invalid value for `offsets_in_document`, must not be `None`")  # noqa: E501

        self._offsets_in_document = offsets_in_document

    @property
    def offsets_in_context(self):
        """Gets the offsets_in_context of this Answer.  # noqa: E501


        :return: The offsets_in_context of this Answer.  # noqa: E501
        :rtype: list[Span]
        """
        return self._offsets_in_context

    @offsets_in_context.setter
    def offsets_in_context(self, offsets_in_context):
        """Sets the offsets_in_context of this Answer.


        :param offsets_in_context: The offsets_in_context of this Answer.  # noqa: E501
        :type offsets_in_context: list[Span]
        """
        if self.local_vars_configuration.client_side_validation and offsets_in_context is None:  # noqa: E501
            raise ValueError("Invalid value for `offsets_in_context`, must not be `None`")  # noqa: E501

        self._offsets_in_context = offsets_in_context

    @property
    def meta(self):
        """Gets the meta of this Answer.  # noqa: E501


        :return: The meta of this Answer.  # noqa: E501
        :rtype: AnswerMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Answer.


        :param meta: The meta of this Answer.  # noqa: E501
        :type meta: AnswerMeta
        """
        if self.local_vars_configuration.client_side_validation and meta is None:  # noqa: E501
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Answer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Answer):
            return True

        return self.to_dict() != other.to_dict()
