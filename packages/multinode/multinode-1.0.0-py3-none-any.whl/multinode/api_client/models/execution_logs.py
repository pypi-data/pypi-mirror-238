# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ExecutionLogs(BaseModel):
    """
    ExecutionLogs
    """
    project_name: StrictStr = Field(...)
    version_id: StrictStr = Field(...)
    function_name: StrictStr = Field(...)
    invocation_id: StrictStr = Field(...)
    execution_id: StrictStr = Field(...)
    log_lines: conlist(StrictStr) = Field(...)
    next_offset: Optional[StrictStr] = Field(...)
    __properties = ["project_name", "version_id", "function_name", "invocation_id", "execution_id", "log_lines", "next_offset"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExecutionLogs:
        """Create an instance of ExecutionLogs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if next_offset (nullable) is None
        # and __fields_set__ contains the field
        if self.next_offset is None and "next_offset" in self.__fields_set__:
            _dict['next_offset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExecutionLogs:
        """Create an instance of ExecutionLogs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExecutionLogs.parse_obj(obj)

        _obj = ExecutionLogs.parse_obj({
            "project_name": obj.get("project_name"),
            "version_id": obj.get("version_id"),
            "function_name": obj.get("function_name"),
            "invocation_id": obj.get("invocation_id"),
            "execution_id": obj.get("execution_id"),
            "log_lines": obj.get("log_lines"),
            "next_offset": obj.get("next_offset")
        })
        return _obj


