# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from multinode.api_client.models.execution_spec import ExecutionSpec
from multinode.api_client.models.function_status import FunctionStatus
from multinode.api_client.models.prepared_function_details import PreparedFunctionDetails
from multinode.api_client.models.resource_spec import ResourceSpec

class FunctionInfoForVersion(BaseModel):
    """
    FunctionInfoForVersion
    """
    function_name: StrictStr = Field(...)
    docker_image: StrictStr = Field(...)
    resource_spec: ResourceSpec = Field(...)
    execution_spec: ExecutionSpec = Field(...)
    function_status: FunctionStatus = Field(...)
    prepared_function_details: Optional[PreparedFunctionDetails] = Field(...)
    __properties = ["function_name", "docker_image", "resource_spec", "execution_spec", "function_status", "prepared_function_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FunctionInfoForVersion:
        """Create an instance of FunctionInfoForVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of resource_spec
        if self.resource_spec:
            _dict['resource_spec'] = self.resource_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_spec
        if self.execution_spec:
            _dict['execution_spec'] = self.execution_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepared_function_details
        if self.prepared_function_details:
            _dict['prepared_function_details'] = self.prepared_function_details.to_dict()
        # set to None if prepared_function_details (nullable) is None
        # and __fields_set__ contains the field
        if self.prepared_function_details is None and "prepared_function_details" in self.__fields_set__:
            _dict['prepared_function_details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FunctionInfoForVersion:
        """Create an instance of FunctionInfoForVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FunctionInfoForVersion.parse_obj(obj)

        _obj = FunctionInfoForVersion.parse_obj({
            "function_name": obj.get("function_name"),
            "docker_image": obj.get("docker_image"),
            "resource_spec": ResourceSpec.from_dict(obj.get("resource_spec")) if obj.get("resource_spec") is not None else None,
            "execution_spec": ExecutionSpec.from_dict(obj.get("execution_spec")) if obj.get("execution_spec") is not None else None,
            "function_status": obj.get("function_status"),
            "prepared_function_details": PreparedFunctionDetails.from_dict(obj.get("prepared_function_details")) if obj.get("prepared_function_details") is not None else None
        })
        return _obj


