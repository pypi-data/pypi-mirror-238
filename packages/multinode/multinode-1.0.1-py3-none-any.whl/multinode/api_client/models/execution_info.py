# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from multinode.api_client.models.execution_outcome import ExecutionOutcome
from multinode.api_client.models.execution_spec import ExecutionSpec
from multinode.api_client.models.function_status import FunctionStatus
from multinode.api_client.models.prepared_function_details import PreparedFunctionDetails
from multinode.api_client.models.resource_spec import ResourceSpec
from multinode.api_client.models.worker_details import WorkerDetails
from multinode.api_client.models.worker_status import WorkerStatus

class ExecutionInfo(BaseModel):
    """
    ExecutionInfo
    """
    project_name: StrictStr = Field(...)
    version_id: StrictStr = Field(...)
    function_name: StrictStr = Field(...)
    invocation_id: StrictStr = Field(...)
    execution_id: StrictStr = Field(...)
    input: StrictStr = Field(...)
    cancellation_request_time: Optional[StrictInt] = Field(...)
    resource_spec: ResourceSpec = Field(...)
    execution_spec: ExecutionSpec = Field(...)
    function_status: FunctionStatus = Field(...)
    prepared_function_details: Optional[PreparedFunctionDetails] = Field(...)
    worker_status: WorkerStatus = Field(...)
    worker_details: Optional[WorkerDetails] = Field(...)
    termination_signal_time: Optional[StrictInt] = Field(...)
    outcome: Optional[ExecutionOutcome] = Field(...)
    output: Optional[StrictStr] = Field(...)
    error_message: Optional[StrictStr] = Field(...)
    creation_time: StrictInt = Field(...)
    last_update_time: StrictInt = Field(...)
    execution_start_time: Optional[StrictInt] = Field(...)
    execution_finish_time: Optional[StrictInt] = Field(...)
    invocation_creation_time: StrictInt = Field(...)
    __properties = ["project_name", "version_id", "function_name", "invocation_id", "execution_id", "input", "cancellation_request_time", "resource_spec", "execution_spec", "function_status", "prepared_function_details", "worker_status", "worker_details", "termination_signal_time", "outcome", "output", "error_message", "creation_time", "last_update_time", "execution_start_time", "execution_finish_time", "invocation_creation_time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExecutionInfo:
        """Create an instance of ExecutionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of resource_spec
        if self.resource_spec:
            _dict['resource_spec'] = self.resource_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_spec
        if self.execution_spec:
            _dict['execution_spec'] = self.execution_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepared_function_details
        if self.prepared_function_details:
            _dict['prepared_function_details'] = self.prepared_function_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_details
        if self.worker_details:
            _dict['worker_details'] = self.worker_details.to_dict()
        # set to None if cancellation_request_time (nullable) is None
        # and __fields_set__ contains the field
        if self.cancellation_request_time is None and "cancellation_request_time" in self.__fields_set__:
            _dict['cancellation_request_time'] = None

        # set to None if prepared_function_details (nullable) is None
        # and __fields_set__ contains the field
        if self.prepared_function_details is None and "prepared_function_details" in self.__fields_set__:
            _dict['prepared_function_details'] = None

        # set to None if worker_details (nullable) is None
        # and __fields_set__ contains the field
        if self.worker_details is None and "worker_details" in self.__fields_set__:
            _dict['worker_details'] = None

        # set to None if termination_signal_time (nullable) is None
        # and __fields_set__ contains the field
        if self.termination_signal_time is None and "termination_signal_time" in self.__fields_set__:
            _dict['termination_signal_time'] = None

        # set to None if outcome (nullable) is None
        # and __fields_set__ contains the field
        if self.outcome is None and "outcome" in self.__fields_set__:
            _dict['outcome'] = None

        # set to None if output (nullable) is None
        # and __fields_set__ contains the field
        if self.output is None and "output" in self.__fields_set__:
            _dict['output'] = None

        # set to None if error_message (nullable) is None
        # and __fields_set__ contains the field
        if self.error_message is None and "error_message" in self.__fields_set__:
            _dict['error_message'] = None

        # set to None if execution_start_time (nullable) is None
        # and __fields_set__ contains the field
        if self.execution_start_time is None and "execution_start_time" in self.__fields_set__:
            _dict['execution_start_time'] = None

        # set to None if execution_finish_time (nullable) is None
        # and __fields_set__ contains the field
        if self.execution_finish_time is None and "execution_finish_time" in self.__fields_set__:
            _dict['execution_finish_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExecutionInfo:
        """Create an instance of ExecutionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExecutionInfo.parse_obj(obj)

        _obj = ExecutionInfo.parse_obj({
            "project_name": obj.get("project_name"),
            "version_id": obj.get("version_id"),
            "function_name": obj.get("function_name"),
            "invocation_id": obj.get("invocation_id"),
            "execution_id": obj.get("execution_id"),
            "input": obj.get("input"),
            "cancellation_request_time": obj.get("cancellation_request_time"),
            "resource_spec": ResourceSpec.from_dict(obj.get("resource_spec")) if obj.get("resource_spec") is not None else None,
            "execution_spec": ExecutionSpec.from_dict(obj.get("execution_spec")) if obj.get("execution_spec") is not None else None,
            "function_status": obj.get("function_status"),
            "prepared_function_details": PreparedFunctionDetails.from_dict(obj.get("prepared_function_details")) if obj.get("prepared_function_details") is not None else None,
            "worker_status": obj.get("worker_status"),
            "worker_details": WorkerDetails.from_dict(obj.get("worker_details")) if obj.get("worker_details") is not None else None,
            "termination_signal_time": obj.get("termination_signal_time"),
            "outcome": obj.get("outcome"),
            "output": obj.get("output"),
            "error_message": obj.get("error_message"),
            "creation_time": obj.get("creation_time"),
            "last_update_time": obj.get("last_update_time"),
            "execution_start_time": obj.get("execution_start_time"),
            "execution_finish_time": obj.get("execution_finish_time"),
            "invocation_creation_time": obj.get("invocation_creation_time")
        })
        return _obj


