# coding: utf-8

"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

#  Copyright 2023 Ant Group CO., Ltd.
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#  in compliance with the License. You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License
#  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  or implied.

import pprint
import re  # noqa: F401

import six

from knext.rest.configuration import Configuration


class OperatorConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'version': 'int',
        'jar_address': 'str',
        'main_class': 'str',
        'lang_type': 'str',
        'operator_type': 'str',
        'params': 'object'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'jar_address': 'jarAddress',
        'main_class': 'mainClass',
        'lang_type': 'langType',
        'operator_type': 'operatorType',
        'params': 'params'
    }

    def __init__(self, name=None, version=None, jar_address=None, main_class=None, lang_type=None, operator_type=None,
                 params=None, local_vars_configuration=None):  # noqa: E501
        """OperatorConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._version = None
        self._jar_address = None
        self._main_class = None
        self._lang_type = None
        self._operator_type = None
        self._params = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if jar_address is not None:
            self.jar_address = jar_address
        if main_class is not None:
            self.main_class = main_class
        if lang_type is not None:
            self.lang_type = lang_type
        if operator_type is not None:
            self.operator_type = operator_type
        if params is not None:
            self.params = params

    @property
    def name(self):
        """Gets the name of this OperatorConfig.  # noqa: E501


        :return: The name of this OperatorConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatorConfig.


        :param name: The name of this OperatorConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this OperatorConfig.  # noqa: E501


        :return: The version of this OperatorConfig.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OperatorConfig.


        :param version: The version of this OperatorConfig.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def jar_address(self):
        """Gets the jar_address of this OperatorConfig.  # noqa: E501


        :return: The jar_address of this OperatorConfig.  # noqa: E501
        :rtype: str
        """
        return self._jar_address

    @jar_address.setter
    def jar_address(self, jar_address):
        """Sets the jar_address of this OperatorConfig.


        :param jar_address: The jar_address of this OperatorConfig.  # noqa: E501
        :type: str
        """

        self._jar_address = jar_address

    @property
    def main_class(self):
        """Gets the main_class of this OperatorConfig.  # noqa: E501


        :return: The main_class of this OperatorConfig.  # noqa: E501
        :rtype: str
        """
        return self._main_class

    @main_class.setter
    def main_class(self, main_class):
        """Sets the main_class of this OperatorConfig.


        :param main_class: The main_class of this OperatorConfig.  # noqa: E501
        :type: str
        """

        self._main_class = main_class

    @property
    def lang_type(self):
        """Gets the lang_type of this OperatorConfig.  # noqa: E501


        :return: The lang_type of this OperatorConfig.  # noqa: E501
        :rtype: str
        """
        return self._lang_type

    @lang_type.setter
    def lang_type(self, lang_type):
        """Sets the lang_type of this OperatorConfig.


        :param lang_type: The lang_type of this OperatorConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["PYTHON", "JAVA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and lang_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `lang_type` ({0}), must be one of {1}"  # noqa: E501
                .format(lang_type, allowed_values)
            )

        self._lang_type = lang_type

    @property
    def operator_type(self):
        """Gets the operator_type of this OperatorConfig.  # noqa: E501


        :return: The operator_type of this OperatorConfig.  # noqa: E501
        :rtype: str
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this OperatorConfig.


        :param operator_type: The operator_type of this OperatorConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["KNOWLEDGE_EXTRACT", "ENTITY_LINK", "PROPERTY_NORMALIZE", "ENTITY_FUSE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operator_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operator_type` ({0}), must be one of {1}"  # noqa: E501
                .format(operator_type, allowed_values)
            )

        self._operator_type = operator_type

    @property
    def params(self):
        """Gets the params of this OperatorConfig.  # noqa: E501


        :return: The params of this OperatorConfig.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this OperatorConfig.


        :param params: The params of this OperatorConfig.  # noqa: E501
        :type: object
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperatorConfig):
            return True

        return self.to_dict() != other.to_dict()
