// SPDX-FileCopyrightText: 2021 Vula Authors <git@vula.link>
// SPDX-License-Identifier: GPLv3
// Simplified implementation of vula in Verifpal

attacker[active]

principal Laura[
  knows public _hkdf_salt
  knows public _hkdf_info
  generates time_stamp_a_0
  knows private vk_a
  vk_a_pk = G^vk_a
  generates csidh_a
  csidh_a_pk = G^csidh_a
  descriptor_a_pt0 = CONCAT(time_stamp_a_0, csidh_a_pk)
  ha_0 = HASH(descriptor_a_pt0)
  sig_a_0 = SIGN(vk_a, ha_0)
]

principal Glenn[
  knows public _hkdf_salt
  knows public _hkdf_info
  generates time_stamp_b_0
  knows private vk_b
  vk_b_pk = G ^ vk_b
  generates csidh_b
  csidh_b_pk = G ^ csidh_b
  descriptor_b_pt0 = CONCAT(time_stamp_b_0, csidh_b_pk)
  hb_0 = HASH(descriptor_b_pt0)
  sig_b_0 = SIGN(vk_b, hb_0)
]

Laura -> Glenn: [vk_a_pk], time_stamp_a_0, csidh_a_pk, sig_a_0
Glenn -> Laura: [vk_b_pk], time_stamp_b_0, csidh_b_pk, sig_b_0

principal Laura[
 x_0 = SIGNVERIF(vk_b_pk, HASH(CONCAT(time_stamp_b_0, csidh_b_pk)), sig_b_0)?
 ss_a = HKDF(_hkdf_salt, HASH(csidh_b_pk^csidh_a), _hkdf_info)
]

principal Glenn[
 y_0 = SIGNVERIF(vk_a_pk, HASH(CONCAT(time_stamp_a_0, csidh_a_pk)), sig_a_0)?
 ss_b = HKDF(_hkdf_salt, HASH(csidh_a_pk^csidh_b), _hkdf_info)
]

queries [
  freshness? sig_a_0
  freshness? sig_b_0
  freshness? time_stamp_a_0
  freshness? time_stamp_b_0
  authentication? Glenn -> Laura: sig_b_0
  authentication? Laura -> Glenn: sig_a_0
  confidentiality? ss_a
  confidentiality? ss_b
]
