# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_path.ipynb.

# %% auto 0
__all__ = ['RichText', 'format_base_path', 'format_rich_path', 'fmtpath']

# %% ../nbs/05_path.ipynb 4
from pathlib import Path
from typing import Union, Optional, TypeAlias, ForwardRef

# %% ../nbs/05_path.ipynb 5
from nchr.tree import TreeChr
from .byte import fmtbyte

# %% ../nbs/05_path.ipynb 7
RichText: TypeAlias = ForwardRef('rich.text.Text', module='rich.text', is_class=True)

# %% ../nbs/05_path.ipynb 8
def format_base_path(
    path: Path, prefix: str = '', treestr: TreeChr = TreeChr.TEE, suffix: str = '',
    link: Optional[bool] = False, size: Optional[bool] = False,
) -> str:
    pstr = prefix
    tstr = treestr or TreeChr.TEE
    lstr = ' file://' if link else ''
    nstr = path.name
    sstr = suffix
    bstr = f' ({fmtbyte(path.stat().st_size)})' if size else ''
    return f'{pstr}{tstr}{lstr}{nstr}{bstr}{sstr}'

def format_rich_path(path: Path) -> Optional[RichText]:
    from rich.text import Text
    text = Text(path.name)
    size = fmtbyte(path.stat().st_size)
    text.stylize(f'link file://{path}')
    text.append(f' ({size})', 'cyan')
    return text

# %% ../nbs/05_path.ipynb 9
def fmtpath(
    path: Path, 
    prefix: str = '',
    treestr: Optional[TreeChr] = None,
    suffix: str = '', 
    link: Optional[bool] = False, 
    size: Optional[bool] = False
) -> Union[RichText, str]:
    try: return format_rich_path(path)
    except ImportError: return format_base_path(path, prefix, treestr, suffix, link, size)
