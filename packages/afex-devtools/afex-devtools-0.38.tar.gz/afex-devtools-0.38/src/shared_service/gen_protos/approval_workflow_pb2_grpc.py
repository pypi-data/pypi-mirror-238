# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shared_service.gen_protos. approval_workflow_pb2 as approval__workflow__pb2


class ApprovalWorkflowsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initiateApproval = channel.unary_unary(
                '/approvalWorkflow.ApprovalWorkflowsService/initiateApproval',
                request_serializer=approval__workflow__pb2.InitiateApprovalPayload.SerializeToString,
                response_deserializer=approval__workflow__pb2.ApprovalResponse.FromString,
                )
        self.processApproval = channel.unary_unary(
                '/approvalWorkflow.ApprovalWorkflowsService/processApproval',
                request_serializer=approval__workflow__pb2.ProcessApprovalPayload.SerializeToString,
                response_deserializer=approval__workflow__pb2.ApprovalResponse.FromString,
                )


class ApprovalWorkflowsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def initiateApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApprovalWorkflowsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initiateApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.initiateApproval,
                    request_deserializer=approval__workflow__pb2.InitiateApprovalPayload.FromString,
                    response_serializer=approval__workflow__pb2.ApprovalResponse.SerializeToString,
            ),
            'processApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.processApproval,
                    request_deserializer=approval__workflow__pb2.ProcessApprovalPayload.FromString,
                    response_serializer=approval__workflow__pb2.ApprovalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'approvalWorkflow.ApprovalWorkflowsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApprovalWorkflowsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def initiateApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/approvalWorkflow.ApprovalWorkflowsService/initiateApproval',
            approval__workflow__pb2.InitiateApprovalPayload.SerializeToString,
            approval__workflow__pb2.ApprovalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/approvalWorkflow.ApprovalWorkflowsService/processApproval',
            approval__workflow__pb2.ProcessApprovalPayload.SerializeToString,
            approval__workflow__pb2.ApprovalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
