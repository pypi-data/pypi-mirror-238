# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopCustomers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_plan_revenue': 'list[SingleCustomerValue]',
        'new_plan_revenue': 'list[SingleCustomerValue]',
        'biggest_pct_increase': 'list[SingleCustomerValue]',
        'biggest_pct_decrease': 'list[SingleCustomerValue]'
    }

    attribute_map = {
        'original_plan_revenue': 'original_plan_revenue',
        'new_plan_revenue': 'new_plan_revenue',
        'biggest_pct_increase': 'biggest_pct_increase',
        'biggest_pct_decrease': 'biggest_pct_decrease'
    }

    def __init__(self, original_plan_revenue=None, new_plan_revenue=None, biggest_pct_increase=None, biggest_pct_decrease=None):  # noqa: E501
        """TopCustomers - a model defined in Swagger"""  # noqa: E501
        self._original_plan_revenue = None
        self._new_plan_revenue = None
        self._biggest_pct_increase = None
        self._biggest_pct_decrease = None
        self.discriminator = None
        self.original_plan_revenue = original_plan_revenue
        self.new_plan_revenue = new_plan_revenue
        self.biggest_pct_increase = biggest_pct_increase
        self.biggest_pct_decrease = biggest_pct_decrease

    @property
    def original_plan_revenue(self):
        """Gets the original_plan_revenue of this TopCustomers.  # noqa: E501


        :return: The original_plan_revenue of this TopCustomers.  # noqa: E501
        :rtype: list[SingleCustomerValue]
        """
        return self._original_plan_revenue

    @original_plan_revenue.setter
    def original_plan_revenue(self, original_plan_revenue):
        """Sets the original_plan_revenue of this TopCustomers.


        :param original_plan_revenue: The original_plan_revenue of this TopCustomers.  # noqa: E501
        :type: list[SingleCustomerValue]
        """
        if original_plan_revenue is None:
            raise ValueError("Invalid value for `original_plan_revenue`, must not be `None`")  # noqa: E501

        self._original_plan_revenue = original_plan_revenue

    @property
    def new_plan_revenue(self):
        """Gets the new_plan_revenue of this TopCustomers.  # noqa: E501


        :return: The new_plan_revenue of this TopCustomers.  # noqa: E501
        :rtype: list[SingleCustomerValue]
        """
        return self._new_plan_revenue

    @new_plan_revenue.setter
    def new_plan_revenue(self, new_plan_revenue):
        """Sets the new_plan_revenue of this TopCustomers.


        :param new_plan_revenue: The new_plan_revenue of this TopCustomers.  # noqa: E501
        :type: list[SingleCustomerValue]
        """
        if new_plan_revenue is None:
            raise ValueError("Invalid value for `new_plan_revenue`, must not be `None`")  # noqa: E501

        self._new_plan_revenue = new_plan_revenue

    @property
    def biggest_pct_increase(self):
        """Gets the biggest_pct_increase of this TopCustomers.  # noqa: E501


        :return: The biggest_pct_increase of this TopCustomers.  # noqa: E501
        :rtype: list[SingleCustomerValue]
        """
        return self._biggest_pct_increase

    @biggest_pct_increase.setter
    def biggest_pct_increase(self, biggest_pct_increase):
        """Sets the biggest_pct_increase of this TopCustomers.


        :param biggest_pct_increase: The biggest_pct_increase of this TopCustomers.  # noqa: E501
        :type: list[SingleCustomerValue]
        """
        if biggest_pct_increase is None:
            raise ValueError("Invalid value for `biggest_pct_increase`, must not be `None`")  # noqa: E501

        self._biggest_pct_increase = biggest_pct_increase

    @property
    def biggest_pct_decrease(self):
        """Gets the biggest_pct_decrease of this TopCustomers.  # noqa: E501


        :return: The biggest_pct_decrease of this TopCustomers.  # noqa: E501
        :rtype: list[SingleCustomerValue]
        """
        return self._biggest_pct_decrease

    @biggest_pct_decrease.setter
    def biggest_pct_decrease(self, biggest_pct_decrease):
        """Sets the biggest_pct_decrease of this TopCustomers.


        :param biggest_pct_decrease: The biggest_pct_decrease of this TopCustomers.  # noqa: E501
        :type: list[SingleCustomerValue]
        """
        if biggest_pct_decrease is None:
            raise ValueError("Invalid value for `biggest_pct_decrease`, must not be `None`")  # noqa: E501

        self._biggest_pct_decrease = biggest_pct_decrease

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopCustomers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopCustomers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
