# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightweightOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'organization_name': 'str',
        'organization_type': 'str',
        'current': 'bool'
    }

    attribute_map = {
        'organization_id': 'organization_id',
        'organization_name': 'organization_name',
        'organization_type': 'organization_type',
        'current': 'current'
    }

    def __init__(self, organization_id=None, organization_name=None, organization_type=None, current=None):  # noqa: E501
        """LightweightOrganization - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._organization_name = None
        self._organization_type = None
        self._current = None
        self.discriminator = None
        self.organization_id = organization_id
        self.organization_name = organization_name
        self.organization_type = organization_type
        self.current = current

    @property
    def organization_id(self):
        """Gets the organization_id of this LightweightOrganization.  # noqa: E501


        :return: The organization_id of this LightweightOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this LightweightOrganization.


        :param organization_id: The organization_id of this LightweightOrganization.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this LightweightOrganization.  # noqa: E501


        :return: The organization_name of this LightweightOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this LightweightOrganization.


        :param organization_name: The organization_name of this LightweightOrganization.  # noqa: E501
        :type: str
        """
        if organization_name is None:
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def organization_type(self):
        """Gets the organization_type of this LightweightOrganization.  # noqa: E501

        * `Production` - Production * `Development` - Development * `Demo` - Demo * `Internal Demo` - Internal Demo  # noqa: E501

        :return: The organization_type of this LightweightOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this LightweightOrganization.

        * `Production` - Production * `Development` - Development * `Demo` - Demo * `Internal Demo` - Internal Demo  # noqa: E501

        :param organization_type: The organization_type of this LightweightOrganization.  # noqa: E501
        :type: str
        """
        if organization_type is None:
            raise ValueError("Invalid value for `organization_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Production", "Development", "Demo", "Internal Demo"]  # noqa: E501
        if organization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_type` ({0}), must be one of {1}"  # noqa: E501
                .format(organization_type, allowed_values)
            )

        self._organization_type = organization_type

    @property
    def current(self):
        """Gets the current of this LightweightOrganization.  # noqa: E501


        :return: The current of this LightweightOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this LightweightOrganization.


        :param current: The current of this LightweightOrganization.  # noqa: E501
        :type: bool
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightweightOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightweightOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
