# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerWithRevenue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'total_amount_due': 'float'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'total_amount_due': 'total_amount_due'
    }

    def __init__(self, customer_id=None, total_amount_due=None):  # noqa: E501
        """CustomerWithRevenue - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._total_amount_due = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        self.total_amount_due = total_amount_due

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerWithRevenue.  # noqa: E501

        The id provided when creating the customer, we suggest matching with your internal customer id in your backend  # noqa: E501

        :return: The customer_id of this CustomerWithRevenue.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerWithRevenue.

        The id provided when creating the customer, we suggest matching with your internal customer id in your backend  # noqa: E501

        :param customer_id: The customer_id of this CustomerWithRevenue.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def total_amount_due(self):
        """Gets the total_amount_due of this CustomerWithRevenue.  # noqa: E501


        :return: The total_amount_due of this CustomerWithRevenue.  # noqa: E501
        :rtype: float
        """
        return self._total_amount_due

    @total_amount_due.setter
    def total_amount_due(self, total_amount_due):
        """Sets the total_amount_due of this CustomerWithRevenue.


        :param total_amount_due: The total_amount_due of this CustomerWithRevenue.  # noqa: E501
        :type: float
        """
        if total_amount_due is None:
            raise ValueError("Invalid value for `total_amount_due`, must not be `None`")  # noqa: E501

        self._total_amount_due = total_amount_due

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerWithRevenue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerWithRevenue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
