# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodMetricRevenueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_revenue': 'float',
        'earned_revenue': 'float'
    }

    attribute_map = {
        'total_revenue': 'total_revenue',
        'earned_revenue': 'earned_revenue'
    }

    def __init__(self, total_revenue=None, earned_revenue=None):  # noqa: E501
        """PeriodMetricRevenueResponse - a model defined in Swagger"""  # noqa: E501
        self._total_revenue = None
        self._earned_revenue = None
        self.discriminator = None
        self.total_revenue = total_revenue
        self.earned_revenue = earned_revenue

    @property
    def total_revenue(self):
        """Gets the total_revenue of this PeriodMetricRevenueResponse.  # noqa: E501


        :return: The total_revenue of this PeriodMetricRevenueResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_revenue

    @total_revenue.setter
    def total_revenue(self, total_revenue):
        """Sets the total_revenue of this PeriodMetricRevenueResponse.


        :param total_revenue: The total_revenue of this PeriodMetricRevenueResponse.  # noqa: E501
        :type: float
        """
        if total_revenue is None:
            raise ValueError("Invalid value for `total_revenue`, must not be `None`")  # noqa: E501

        self._total_revenue = total_revenue

    @property
    def earned_revenue(self):
        """Gets the earned_revenue of this PeriodMetricRevenueResponse.  # noqa: E501


        :return: The earned_revenue of this PeriodMetricRevenueResponse.  # noqa: E501
        :rtype: float
        """
        return self._earned_revenue

    @earned_revenue.setter
    def earned_revenue(self, earned_revenue):
        """Sets the earned_revenue of this PeriodMetricRevenueResponse.


        :param earned_revenue: The earned_revenue of this PeriodMetricRevenueResponse.  # noqa: E501
        :type: float
        """
        if earned_revenue is None:
            raise ValueError("Invalid value for `earned_revenue`, must not be `None`")  # noqa: E501

        self._earned_revenue = earned_revenue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodMetricRevenueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodMetricRevenueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
