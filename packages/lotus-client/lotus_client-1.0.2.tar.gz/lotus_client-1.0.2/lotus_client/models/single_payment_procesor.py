# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SinglePaymentProcesor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_provider_name': 'str',
        'connected': 'bool',
        'redirect_url': 'str',
        'self_hosted': 'bool',
        'connection_id': 'str',
        'working': 'bool',
        'account_id': 'str'
    }

    attribute_map = {
        'payment_provider_name': 'payment_provider_name',
        'connected': 'connected',
        'redirect_url': 'redirect_url',
        'self_hosted': 'self_hosted',
        'connection_id': 'connection_id',
        'working': 'working',
        'account_id': 'account_id'
    }

    def __init__(self, payment_provider_name=None, connected=None, redirect_url=None, self_hosted=None, connection_id=None, working=None, account_id=None):  # noqa: E501
        """SinglePaymentProcesor - a model defined in Swagger"""  # noqa: E501
        self._payment_provider_name = None
        self._connected = None
        self._redirect_url = None
        self._self_hosted = None
        self._connection_id = None
        self._working = None
        self._account_id = None
        self.discriminator = None
        self.payment_provider_name = payment_provider_name
        self.connected = connected
        self.redirect_url = redirect_url
        self.self_hosted = self_hosted
        self.connection_id = connection_id
        self.working = working
        self.account_id = account_id

    @property
    def payment_provider_name(self):
        """Gets the payment_provider_name of this SinglePaymentProcesor.  # noqa: E501


        :return: The payment_provider_name of this SinglePaymentProcesor.  # noqa: E501
        :rtype: str
        """
        return self._payment_provider_name

    @payment_provider_name.setter
    def payment_provider_name(self, payment_provider_name):
        """Sets the payment_provider_name of this SinglePaymentProcesor.


        :param payment_provider_name: The payment_provider_name of this SinglePaymentProcesor.  # noqa: E501
        :type: str
        """
        if payment_provider_name is None:
            raise ValueError("Invalid value for `payment_provider_name`, must not be `None`")  # noqa: E501

        self._payment_provider_name = payment_provider_name

    @property
    def connected(self):
        """Gets the connected of this SinglePaymentProcesor.  # noqa: E501


        :return: The connected of this SinglePaymentProcesor.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this SinglePaymentProcesor.


        :param connected: The connected of this SinglePaymentProcesor.  # noqa: E501
        :type: bool
        """
        if connected is None:
            raise ValueError("Invalid value for `connected`, must not be `None`")  # noqa: E501

        self._connected = connected

    @property
    def redirect_url(self):
        """Gets the redirect_url of this SinglePaymentProcesor.  # noqa: E501


        :return: The redirect_url of this SinglePaymentProcesor.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this SinglePaymentProcesor.


        :param redirect_url: The redirect_url of this SinglePaymentProcesor.  # noqa: E501
        :type: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")  # noqa: E501

        self._redirect_url = redirect_url

    @property
    def self_hosted(self):
        """Gets the self_hosted of this SinglePaymentProcesor.  # noqa: E501


        :return: The self_hosted of this SinglePaymentProcesor.  # noqa: E501
        :rtype: bool
        """
        return self._self_hosted

    @self_hosted.setter
    def self_hosted(self, self_hosted):
        """Sets the self_hosted of this SinglePaymentProcesor.


        :param self_hosted: The self_hosted of this SinglePaymentProcesor.  # noqa: E501
        :type: bool
        """
        if self_hosted is None:
            raise ValueError("Invalid value for `self_hosted`, must not be `None`")  # noqa: E501

        self._self_hosted = self_hosted

    @property
    def connection_id(self):
        """Gets the connection_id of this SinglePaymentProcesor.  # noqa: E501


        :return: The connection_id of this SinglePaymentProcesor.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this SinglePaymentProcesor.


        :param connection_id: The connection_id of this SinglePaymentProcesor.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def working(self):
        """Gets the working of this SinglePaymentProcesor.  # noqa: E501


        :return: The working of this SinglePaymentProcesor.  # noqa: E501
        :rtype: bool
        """
        return self._working

    @working.setter
    def working(self, working):
        """Sets the working of this SinglePaymentProcesor.


        :param working: The working of this SinglePaymentProcesor.  # noqa: E501
        :type: bool
        """
        if working is None:
            raise ValueError("Invalid value for `working`, must not be `None`")  # noqa: E501

        self._working = working

    @property
    def account_id(self):
        """Gets the account_id of this SinglePaymentProcesor.  # noqa: E501


        :return: The account_id of this SinglePaymentProcesor.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SinglePaymentProcesor.


        :param account_id: The account_id of this SinglePaymentProcesor.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SinglePaymentProcesor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SinglePaymentProcesor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
