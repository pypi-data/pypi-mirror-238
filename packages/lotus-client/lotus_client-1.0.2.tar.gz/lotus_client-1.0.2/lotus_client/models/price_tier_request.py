# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriceTierRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'range_start': 'float',
        'range_end': 'float',
        'cost_per_batch': 'float',
        'metric_units_per_batch': 'float'
    }

    attribute_map = {
        'range_start': 'range_start',
        'range_end': 'range_end',
        'cost_per_batch': 'cost_per_batch',
        'metric_units_per_batch': 'metric_units_per_batch'
    }

    def __init__(self, range_start=None, range_end=None, cost_per_batch=None, metric_units_per_batch=None):  # noqa: E501
        """PriceTierRequest - a model defined in Swagger"""  # noqa: E501
        self._range_start = None
        self._range_end = None
        self._cost_per_batch = None
        self._metric_units_per_batch = None
        self.discriminator = None
        self.range_start = range_start
        self.range_end = range_end
        self.cost_per_batch = cost_per_batch
        self.metric_units_per_batch = metric_units_per_batch

    @property
    def range_start(self):
        """Gets the range_start of this PriceTierRequest.  # noqa: E501


        :return: The range_start of this PriceTierRequest.  # noqa: E501
        :rtype: float
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this PriceTierRequest.


        :param range_start: The range_start of this PriceTierRequest.  # noqa: E501
        :type: float
        """
        if range_start is None:
            raise ValueError("Invalid value for `range_start`, must not be `None`")  # noqa: E501

        self._range_start = range_start

    @property
    def range_end(self):
        """Gets the range_end of this PriceTierRequest.  # noqa: E501


        :return: The range_end of this PriceTierRequest.  # noqa: E501
        :rtype: float
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this PriceTierRequest.


        :param range_end: The range_end of this PriceTierRequest.  # noqa: E501
        :type: float
        """
        if range_end is None:
            raise ValueError("Invalid value for `range_end`, must not be `None`")  # noqa: E501

        self._range_end = range_end

    @property
    def cost_per_batch(self):
        """Gets the cost_per_batch of this PriceTierRequest.  # noqa: E501


        :return: The cost_per_batch of this PriceTierRequest.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_batch

    @cost_per_batch.setter
    def cost_per_batch(self, cost_per_batch):
        """Sets the cost_per_batch of this PriceTierRequest.


        :param cost_per_batch: The cost_per_batch of this PriceTierRequest.  # noqa: E501
        :type: float
        """
        if cost_per_batch is None:
            raise ValueError("Invalid value for `cost_per_batch`, must not be `None`")  # noqa: E501

        self._cost_per_batch = cost_per_batch

    @property
    def metric_units_per_batch(self):
        """Gets the metric_units_per_batch of this PriceTierRequest.  # noqa: E501


        :return: The metric_units_per_batch of this PriceTierRequest.  # noqa: E501
        :rtype: float
        """
        return self._metric_units_per_batch

    @metric_units_per_batch.setter
    def metric_units_per_batch(self, metric_units_per_batch):
        """Sets the metric_units_per_batch of this PriceTierRequest.


        :param metric_units_per_batch: The metric_units_per_batch of this PriceTierRequest.  # noqa: E501
        :type: float
        """
        if metric_units_per_batch is None:
            raise ValueError("Invalid value for `metric_units_per_batch`, must not be `None`")  # noqa: E501

        self._metric_units_per_batch = metric_units_per_batch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceTierRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceTierRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
