# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'actor': 'str',
        'verb': 'str',
        'action_object': 'str',
        'target': 'str',
        'public': 'bool',
        'description': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'actor': 'actor',
        'verb': 'verb',
        'action_object': 'action_object',
        'target': 'target',
        'public': 'public',
        'description': 'description',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, actor=None, verb=None, action_object=None, target=None, public=None, description=None, timestamp=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._actor = None
        self._verb = None
        self._action_object = None
        self._target = None
        self._public = None
        self._description = None
        self._timestamp = None
        self.discriminator = None
        self.id = id
        self.actor = actor
        self.verb = verb
        self.action_object = action_object
        self.target = target
        if public is not None:
            self.public = public
        if description is not None:
            self.description = description
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this Action.  # noqa: E501


        :return: The id of this Action.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Action.


        :param id: The id of this Action.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def actor(self):
        """Gets the actor of this Action.  # noqa: E501


        :return: The actor of this Action.  # noqa: E501
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Action.


        :param actor: The actor of this Action.  # noqa: E501
        :type: str
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")  # noqa: E501

        self._actor = actor

    @property
    def verb(self):
        """Gets the verb of this Action.  # noqa: E501


        :return: The verb of this Action.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Action.


        :param verb: The verb of this Action.  # noqa: E501
        :type: str
        """
        if verb is None:
            raise ValueError("Invalid value for `verb`, must not be `None`")  # noqa: E501

        self._verb = verb

    @property
    def action_object(self):
        """Gets the action_object of this Action.  # noqa: E501


        :return: The action_object of this Action.  # noqa: E501
        :rtype: str
        """
        return self._action_object

    @action_object.setter
    def action_object(self, action_object):
        """Sets the action_object of this Action.


        :param action_object: The action_object of this Action.  # noqa: E501
        :type: str
        """
        if action_object is None:
            raise ValueError("Invalid value for `action_object`, must not be `None`")  # noqa: E501

        self._action_object = action_object

    @property
    def target(self):
        """Gets the target of this Action.  # noqa: E501


        :return: The target of this Action.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Action.


        :param target: The target of this Action.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def public(self):
        """Gets the public of this Action.  # noqa: E501


        :return: The public of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Action.


        :param public: The public of this Action.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def description(self):
        """Gets the description of this Action.  # noqa: E501


        :return: The description of this Action.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Action.


        :param description: The description of this Action.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def timestamp(self):
        """Gets the timestamp of this Action.  # noqa: E501


        :return: The timestamp of this Action.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Action.


        :param timestamp: The timestamp of this Action.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
