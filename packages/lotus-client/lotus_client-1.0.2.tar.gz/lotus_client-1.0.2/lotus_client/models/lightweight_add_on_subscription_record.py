# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightweightAddOnSubscriptionRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_subscription_id': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'addon': 'LightweightAddOn',
        'fully_billed': 'bool'
    }

    attribute_map = {
        'addon_subscription_id': 'addon_subscription_id',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'addon': 'addon',
        'fully_billed': 'fully_billed'
    }

    def __init__(self, addon_subscription_id=None, start_date=None, end_date=None, addon=None, fully_billed=None):  # noqa: E501
        """LightweightAddOnSubscriptionRecord - a model defined in Swagger"""  # noqa: E501
        self._addon_subscription_id = None
        self._start_date = None
        self._end_date = None
        self._addon = None
        self._fully_billed = None
        self.discriminator = None
        self.addon_subscription_id = addon_subscription_id
        self.start_date = start_date
        self.end_date = end_date
        self.addon = addon
        self.fully_billed = fully_billed

    @property
    def addon_subscription_id(self):
        """Gets the addon_subscription_id of this LightweightAddOnSubscriptionRecord.  # noqa: E501


        :return: The addon_subscription_id of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :rtype: str
        """
        return self._addon_subscription_id

    @addon_subscription_id.setter
    def addon_subscription_id(self, addon_subscription_id):
        """Sets the addon_subscription_id of this LightweightAddOnSubscriptionRecord.


        :param addon_subscription_id: The addon_subscription_id of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :type: str
        """
        if addon_subscription_id is None:
            raise ValueError("Invalid value for `addon_subscription_id`, must not be `None`")  # noqa: E501

        self._addon_subscription_id = addon_subscription_id

    @property
    def start_date(self):
        """Gets the start_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501

        The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.  # noqa: E501

        :return: The start_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LightweightAddOnSubscriptionRecord.

        The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.  # noqa: E501

        :param start_date: The start_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501

        The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.  # noqa: E501

        :return: The end_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LightweightAddOnSubscriptionRecord.

        The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.  # noqa: E501

        :param end_date: The end_date of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def addon(self):
        """Gets the addon of this LightweightAddOnSubscriptionRecord.  # noqa: E501


        :return: The addon of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :rtype: LightweightAddOn
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this LightweightAddOnSubscriptionRecord.


        :param addon: The addon of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :type: LightweightAddOn
        """
        if addon is None:
            raise ValueError("Invalid value for `addon`, must not be `None`")  # noqa: E501

        self._addon = addon

    @property
    def fully_billed(self):
        """Gets the fully_billed of this LightweightAddOnSubscriptionRecord.  # noqa: E501


        :return: The fully_billed of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :rtype: bool
        """
        return self._fully_billed

    @fully_billed.setter
    def fully_billed(self, fully_billed):
        """Sets the fully_billed of this LightweightAddOnSubscriptionRecord.


        :param fully_billed: The fully_billed of this LightweightAddOnSubscriptionRecord.  # noqa: E501
        :type: bool
        """
        if fully_billed is None:
            raise ValueError("Invalid value for `fully_billed`, must not be `None`")  # noqa: E501

        self._fully_billed = fully_billed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightweightAddOnSubscriptionRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightweightAddOnSubscriptionRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
