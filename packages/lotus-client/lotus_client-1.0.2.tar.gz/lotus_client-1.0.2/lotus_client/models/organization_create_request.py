# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_name': 'str',
        'default_currency_code': 'str',
        'organization_type': 'str'
    }

    attribute_map = {
        'organization_name': 'organization_name',
        'default_currency_code': 'default_currency_code',
        'organization_type': 'organization_type'
    }

    def __init__(self, organization_name=None, default_currency_code=None, organization_type='development'):  # noqa: E501
        """OrganizationCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_name = None
        self._default_currency_code = None
        self._organization_type = None
        self.discriminator = None
        self.organization_name = organization_name
        if default_currency_code is not None:
            self.default_currency_code = default_currency_code
        if organization_type is not None:
            self.organization_type = organization_type

    @property
    def organization_name(self):
        """Gets the organization_name of this OrganizationCreateRequest.  # noqa: E501


        :return: The organization_name of this OrganizationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this OrganizationCreateRequest.


        :param organization_name: The organization_name of this OrganizationCreateRequest.  # noqa: E501
        :type: str
        """
        if organization_name is None:
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def default_currency_code(self):
        """Gets the default_currency_code of this OrganizationCreateRequest.  # noqa: E501


        :return: The default_currency_code of this OrganizationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_currency_code

    @default_currency_code.setter
    def default_currency_code(self, default_currency_code):
        """Sets the default_currency_code of this OrganizationCreateRequest.


        :param default_currency_code: The default_currency_code of this OrganizationCreateRequest.  # noqa: E501
        :type: str
        """

        self._default_currency_code = default_currency_code

    @property
    def organization_type(self):
        """Gets the organization_type of this OrganizationCreateRequest.  # noqa: E501

        * `development` - development * `production` - production  # noqa: E501

        :return: The organization_type of this OrganizationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this OrganizationCreateRequest.

        * `development` - development * `production` - production  # noqa: E501

        :param organization_type: The organization_type of this OrganizationCreateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["development", "production"]  # noqa: E501
        if organization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_type` ({0}), must be one of {1}"  # noqa: E501
                .format(organization_type, allowed_values)
            )

        self._organization_type = organization_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
