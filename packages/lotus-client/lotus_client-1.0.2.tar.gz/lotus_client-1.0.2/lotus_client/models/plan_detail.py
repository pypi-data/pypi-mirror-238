# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_description': 'str',
        'taxjar_code': 'str',
        'tags': 'list[Tag]',
        'plan_name': 'str',
        'num_versions': 'int',
        'active_subscriptions': 'int',
        'plan_duration': 'str',
        'versions': 'list[PlanVersionDetail]',
        'external_links': 'list[InitialExternalPlanLink]',
        'plan_id': 'str',
        'active_version': 'int'
    }

    attribute_map = {
        'plan_description': 'plan_description',
        'taxjar_code': 'taxjar_code',
        'tags': 'tags',
        'plan_name': 'plan_name',
        'num_versions': 'num_versions',
        'active_subscriptions': 'active_subscriptions',
        'plan_duration': 'plan_duration',
        'versions': 'versions',
        'external_links': 'external_links',
        'plan_id': 'plan_id',
        'active_version': 'active_version'
    }

    def __init__(self, plan_description=None, taxjar_code=None, tags=None, plan_name=None, num_versions=None, active_subscriptions=None, plan_duration=None, versions=None, external_links=None, plan_id=None, active_version=None):  # noqa: E501
        """PlanDetail - a model defined in Swagger"""  # noqa: E501
        self._plan_description = None
        self._taxjar_code = None
        self._tags = None
        self._plan_name = None
        self._num_versions = None
        self._active_subscriptions = None
        self._plan_duration = None
        self._versions = None
        self._external_links = None
        self._plan_id = None
        self._active_version = None
        self.discriminator = None
        self.plan_description = plan_description
        if taxjar_code is not None:
            self.taxjar_code = taxjar_code
        self.tags = tags
        self.plan_name = plan_name
        self.num_versions = num_versions
        self.active_subscriptions = active_subscriptions
        self.plan_duration = plan_duration
        self.versions = versions
        self.external_links = external_links
        self.plan_id = plan_id
        self.active_version = active_version

    @property
    def plan_description(self):
        """Gets the plan_description of this PlanDetail.  # noqa: E501

        Description of the plan  # noqa: E501

        :return: The plan_description of this PlanDetail.  # noqa: E501
        :rtype: str
        """
        return self._plan_description

    @plan_description.setter
    def plan_description(self, plan_description):
        """Sets the plan_description of this PlanDetail.

        Description of the plan  # noqa: E501

        :param plan_description: The plan_description of this PlanDetail.  # noqa: E501
        :type: str
        """
        if plan_description is None:
            raise ValueError("Invalid value for `plan_description`, must not be `None`")  # noqa: E501

        self._plan_description = plan_description

    @property
    def taxjar_code(self):
        """Gets the taxjar_code of this PlanDetail.  # noqa: E501


        :return: The taxjar_code of this PlanDetail.  # noqa: E501
        :rtype: str
        """
        return self._taxjar_code

    @taxjar_code.setter
    def taxjar_code(self, taxjar_code):
        """Sets the taxjar_code of this PlanDetail.


        :param taxjar_code: The taxjar_code of this PlanDetail.  # noqa: E501
        :type: str
        """

        self._taxjar_code = taxjar_code

    @property
    def tags(self):
        """Gets the tags of this PlanDetail.  # noqa: E501

        The tags that this plan has.  # noqa: E501

        :return: The tags of this PlanDetail.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PlanDetail.

        The tags that this plan has.  # noqa: E501

        :param tags: The tags of this PlanDetail.  # noqa: E501
        :type: list[Tag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def plan_name(self):
        """Gets the plan_name of this PlanDetail.  # noqa: E501

        Name of the plan  # noqa: E501

        :return: The plan_name of this PlanDetail.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this PlanDetail.

        Name of the plan  # noqa: E501

        :param plan_name: The plan_name of this PlanDetail.  # noqa: E501
        :type: str
        """
        if plan_name is None:
            raise ValueError("Invalid value for `plan_name`, must not be `None`")  # noqa: E501

        self._plan_name = plan_name

    @property
    def num_versions(self):
        """Gets the num_versions of this PlanDetail.  # noqa: E501

        The number of versions that this plan has.  # noqa: E501

        :return: The num_versions of this PlanDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_versions

    @num_versions.setter
    def num_versions(self, num_versions):
        """Sets the num_versions of this PlanDetail.

        The number of versions that this plan has.  # noqa: E501

        :param num_versions: The num_versions of this PlanDetail.  # noqa: E501
        :type: int
        """
        if num_versions is None:
            raise ValueError("Invalid value for `num_versions`, must not be `None`")  # noqa: E501

        self._num_versions = num_versions

    @property
    def active_subscriptions(self):
        """Gets the active_subscriptions of this PlanDetail.  # noqa: E501

        The number of active subscriptions that this plan has across all versions.  # noqa: E501

        :return: The active_subscriptions of this PlanDetail.  # noqa: E501
        :rtype: int
        """
        return self._active_subscriptions

    @active_subscriptions.setter
    def active_subscriptions(self, active_subscriptions):
        """Sets the active_subscriptions of this PlanDetail.

        The number of active subscriptions that this plan has across all versions.  # noqa: E501

        :param active_subscriptions: The active_subscriptions of this PlanDetail.  # noqa: E501
        :type: int
        """
        if active_subscriptions is None:
            raise ValueError("Invalid value for `active_subscriptions`, must not be `None`")  # noqa: E501

        self._active_subscriptions = active_subscriptions

    @property
    def plan_duration(self):
        """Gets the plan_duration of this PlanDetail.  # noqa: E501

        Duration of the plan  * `monthly` - Monthly * `quarterly` - Quarterly * `yearly` - Yearly  # noqa: E501

        :return: The plan_duration of this PlanDetail.  # noqa: E501
        :rtype: str
        """
        return self._plan_duration

    @plan_duration.setter
    def plan_duration(self, plan_duration):
        """Sets the plan_duration of this PlanDetail.

        Duration of the plan  * `monthly` - Monthly * `quarterly` - Quarterly * `yearly` - Yearly  # noqa: E501

        :param plan_duration: The plan_duration of this PlanDetail.  # noqa: E501
        :type: str
        """
        if plan_duration is None:
            raise ValueError("Invalid value for `plan_duration`, must not be `None`")  # noqa: E501
        allowed_values = ["monthly", "quarterly", "yearly", ""]  # noqa: E501
        if plan_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_duration` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_duration, allowed_values)
            )

        self._plan_duration = plan_duration

    @property
    def versions(self):
        """Gets the versions of this PlanDetail.  # noqa: E501


        :return: The versions of this PlanDetail.  # noqa: E501
        :rtype: list[PlanVersionDetail]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this PlanDetail.


        :param versions: The versions of this PlanDetail.  # noqa: E501
        :type: list[PlanVersionDetail]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    @property
    def external_links(self):
        """Gets the external_links of this PlanDetail.  # noqa: E501

        The external links that this plan has.  # noqa: E501

        :return: The external_links of this PlanDetail.  # noqa: E501
        :rtype: list[InitialExternalPlanLink]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this PlanDetail.

        The external links that this plan has.  # noqa: E501

        :param external_links: The external_links of this PlanDetail.  # noqa: E501
        :type: list[InitialExternalPlanLink]
        """
        if external_links is None:
            raise ValueError("Invalid value for `external_links`, must not be `None`")  # noqa: E501

        self._external_links = external_links

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanDetail.  # noqa: E501


        :return: The plan_id of this PlanDetail.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanDetail.


        :param plan_id: The plan_id of this PlanDetail.  # noqa: E501
        :type: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def active_version(self):
        """Gets the active_version of this PlanDetail.  # noqa: E501

        This plan's currently active version.  # noqa: E501

        :return: The active_version of this PlanDetail.  # noqa: E501
        :rtype: int
        """
        return self._active_version

    @active_version.setter
    def active_version(self, active_version):
        """Sets the active_version of this PlanDetail.

        This plan's currently active version.  # noqa: E501

        :param active_version: The active_version of this PlanDetail.  # noqa: E501
        :type: int
        """
        if active_version is None:
            raise ValueError("Invalid value for `active_version`, must not be `None`")  # noqa: E501

        self._active_version = active_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
