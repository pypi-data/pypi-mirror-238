# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricRevenue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric_name': 'str',
        'original_plan_revenue': 'float',
        'new_plan_revenue': 'float'
    }

    attribute_map = {
        'metric_name': 'metric_name',
        'original_plan_revenue': 'original_plan_revenue',
        'new_plan_revenue': 'new_plan_revenue'
    }

    def __init__(self, metric_name=None, original_plan_revenue=None, new_plan_revenue=None):  # noqa: E501
        """MetricRevenue - a model defined in Swagger"""  # noqa: E501
        self._metric_name = None
        self._original_plan_revenue = None
        self._new_plan_revenue = None
        self.discriminator = None
        self.metric_name = metric_name
        self.original_plan_revenue = original_plan_revenue
        self.new_plan_revenue = new_plan_revenue

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricRevenue.  # noqa: E501


        :return: The metric_name of this MetricRevenue.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricRevenue.


        :param metric_name: The metric_name of this MetricRevenue.  # noqa: E501
        :type: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")  # noqa: E501

        self._metric_name = metric_name

    @property
    def original_plan_revenue(self):
        """Gets the original_plan_revenue of this MetricRevenue.  # noqa: E501


        :return: The original_plan_revenue of this MetricRevenue.  # noqa: E501
        :rtype: float
        """
        return self._original_plan_revenue

    @original_plan_revenue.setter
    def original_plan_revenue(self, original_plan_revenue):
        """Sets the original_plan_revenue of this MetricRevenue.


        :param original_plan_revenue: The original_plan_revenue of this MetricRevenue.  # noqa: E501
        :type: float
        """
        if original_plan_revenue is None:
            raise ValueError("Invalid value for `original_plan_revenue`, must not be `None`")  # noqa: E501

        self._original_plan_revenue = original_plan_revenue

    @property
    def new_plan_revenue(self):
        """Gets the new_plan_revenue of this MetricRevenue.  # noqa: E501


        :return: The new_plan_revenue of this MetricRevenue.  # noqa: E501
        :rtype: float
        """
        return self._new_plan_revenue

    @new_plan_revenue.setter
    def new_plan_revenue(self, new_plan_revenue):
        """Sets the new_plan_revenue of this MetricRevenue.


        :param new_plan_revenue: The new_plan_revenue of this MetricRevenue.  # noqa: E501
        :type: float
        """
        if new_plan_revenue is None:
            raise ValueError("Invalid value for `new_plan_revenue`, must not be `None`")  # noqa: E501

        self._new_plan_revenue = new_plan_revenue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricRevenue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricRevenue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
