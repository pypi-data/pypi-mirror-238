# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerDeleteResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'deleted': 'datetime',
        'email': 'str',
        'num_subscriptions_deleted': 'int',
        'num_addons_deleted': 'int'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'deleted': 'deleted',
        'email': 'email',
        'num_subscriptions_deleted': 'num_subscriptions_deleted',
        'num_addons_deleted': 'num_addons_deleted'
    }

    def __init__(self, customer_id=None, deleted=None, email=None, num_subscriptions_deleted=None, num_addons_deleted=None):  # noqa: E501
        """CustomerDeleteResponse - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._deleted = None
        self._email = None
        self._num_subscriptions_deleted = None
        self._num_addons_deleted = None
        self.discriminator = None
        self.customer_id = customer_id
        self.deleted = deleted
        self.email = email
        self.num_subscriptions_deleted = num_subscriptions_deleted
        self.num_addons_deleted = num_addons_deleted

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerDeleteResponse.  # noqa: E501


        :return: The customer_id of this CustomerDeleteResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerDeleteResponse.


        :param customer_id: The customer_id of this CustomerDeleteResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def deleted(self):
        """Gets the deleted of this CustomerDeleteResponse.  # noqa: E501


        :return: The deleted of this CustomerDeleteResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CustomerDeleteResponse.


        :param deleted: The deleted of this CustomerDeleteResponse.  # noqa: E501
        :type: datetime
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def email(self):
        """Gets the email of this CustomerDeleteResponse.  # noqa: E501


        :return: The email of this CustomerDeleteResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerDeleteResponse.


        :param email: The email of this CustomerDeleteResponse.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def num_subscriptions_deleted(self):
        """Gets the num_subscriptions_deleted of this CustomerDeleteResponse.  # noqa: E501


        :return: The num_subscriptions_deleted of this CustomerDeleteResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_subscriptions_deleted

    @num_subscriptions_deleted.setter
    def num_subscriptions_deleted(self, num_subscriptions_deleted):
        """Sets the num_subscriptions_deleted of this CustomerDeleteResponse.


        :param num_subscriptions_deleted: The num_subscriptions_deleted of this CustomerDeleteResponse.  # noqa: E501
        :type: int
        """
        if num_subscriptions_deleted is None:
            raise ValueError("Invalid value for `num_subscriptions_deleted`, must not be `None`")  # noqa: E501

        self._num_subscriptions_deleted = num_subscriptions_deleted

    @property
    def num_addons_deleted(self):
        """Gets the num_addons_deleted of this CustomerDeleteResponse.  # noqa: E501


        :return: The num_addons_deleted of this CustomerDeleteResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_addons_deleted

    @num_addons_deleted.setter
    def num_addons_deleted(self, num_addons_deleted):
        """Sets the num_addons_deleted of this CustomerDeleteResponse.


        :param num_addons_deleted: The num_addons_deleted of this CustomerDeleteResponse.  # noqa: E501
        :type: int
        """
        if num_addons_deleted is None:
            raise ValueError("Invalid value for `num_addons_deleted`, must not be `None`")  # noqa: E501

        self._num_addons_deleted = num_addons_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerDeleteResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerDeleteResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
