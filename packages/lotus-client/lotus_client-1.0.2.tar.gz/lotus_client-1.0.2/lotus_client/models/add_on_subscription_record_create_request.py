# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOnSubscriptionRecordCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_id': 'str',
        'quantity': 'int',
        'metadata': 'dict(str, object)'
    }

    attribute_map = {
        'addon_id': 'addon_id',
        'quantity': 'quantity',
        'metadata': 'metadata'
    }

    def __init__(self, addon_id=None, quantity=1, metadata=None):  # noqa: E501
        """AddOnSubscriptionRecordCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._addon_id = None
        self._quantity = None
        self._metadata = None
        self.discriminator = None
        if addon_id is not None:
            self.addon_id = addon_id
        if quantity is not None:
            self.quantity = quantity
        if metadata is not None:
            self.metadata = metadata

    @property
    def addon_id(self):
        """Gets the addon_id of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501

        The add-on to be applied to the subscription.   # noqa: E501

        :return: The addon_id of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._addon_id

    @addon_id.setter
    def addon_id(self, addon_id):
        """Sets the addon_id of this AddOnSubscriptionRecordCreateRequest.

        The add-on to be applied to the subscription.   # noqa: E501

        :param addon_id: The addon_id of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :type: str
        """

        self._addon_id = addon_id

    @property
    def quantity(self):
        """Gets the quantity of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501

        The quantity of the add-on to be applied to the subscription. Flat fees of add-ons will be multiplied by this quantity. Usage-based components of add-ons will be unaffected by the quantity.  # noqa: E501

        :return: The quantity of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AddOnSubscriptionRecordCreateRequest.

        The quantity of the add-on to be applied to the subscription. Flat fees of add-ons will be multiplied by this quantity. Usage-based components of add-ons will be unaffected by the quantity.  # noqa: E501

        :param quantity: The quantity of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def metadata(self):
        """Gets the metadata of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501

        A JSON object containing additional information about the add-on subscription. This will be returned in the response when you retrieve the add-on subscription.  # noqa: E501

        :return: The metadata of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AddOnSubscriptionRecordCreateRequest.

        A JSON object containing additional information about the add-on subscription. This will be returned in the response when you retrieve the add-on subscription.  # noqa: E501

        :param metadata: The metadata of this AddOnSubscriptionRecordCreateRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOnSubscriptionRecordCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnSubscriptionRecordCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
