# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsageAlertPayloadRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription': 'LightweightSubscriptionRecordRequest',
        'usage_alert': 'UsageAlertRequest',
        'usage': 'float',
        'time_triggered': 'datetime'
    }

    attribute_map = {
        'subscription': 'subscription',
        'usage_alert': 'usage_alert',
        'usage': 'usage',
        'time_triggered': 'time_triggered'
    }

    def __init__(self, subscription=None, usage_alert=None, usage=None, time_triggered=None):  # noqa: E501
        """UsageAlertPayloadRequest - a model defined in Swagger"""  # noqa: E501
        self._subscription = None
        self._usage_alert = None
        self._usage = None
        self._time_triggered = None
        self.discriminator = None
        self.subscription = subscription
        self.usage_alert = usage_alert
        self.usage = usage
        self.time_triggered = time_triggered

    @property
    def subscription(self):
        """Gets the subscription of this UsageAlertPayloadRequest.  # noqa: E501


        :return: The subscription of this UsageAlertPayloadRequest.  # noqa: E501
        :rtype: LightweightSubscriptionRecordRequest
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UsageAlertPayloadRequest.


        :param subscription: The subscription of this UsageAlertPayloadRequest.  # noqa: E501
        :type: LightweightSubscriptionRecordRequest
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")  # noqa: E501

        self._subscription = subscription

    @property
    def usage_alert(self):
        """Gets the usage_alert of this UsageAlertPayloadRequest.  # noqa: E501


        :return: The usage_alert of this UsageAlertPayloadRequest.  # noqa: E501
        :rtype: UsageAlertRequest
        """
        return self._usage_alert

    @usage_alert.setter
    def usage_alert(self, usage_alert):
        """Sets the usage_alert of this UsageAlertPayloadRequest.


        :param usage_alert: The usage_alert of this UsageAlertPayloadRequest.  # noqa: E501
        :type: UsageAlertRequest
        """
        if usage_alert is None:
            raise ValueError("Invalid value for `usage_alert`, must not be `None`")  # noqa: E501

        self._usage_alert = usage_alert

    @property
    def usage(self):
        """Gets the usage of this UsageAlertPayloadRequest.  # noqa: E501


        :return: The usage of this UsageAlertPayloadRequest.  # noqa: E501
        :rtype: float
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this UsageAlertPayloadRequest.


        :param usage: The usage of this UsageAlertPayloadRequest.  # noqa: E501
        :type: float
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    @property
    def time_triggered(self):
        """Gets the time_triggered of this UsageAlertPayloadRequest.  # noqa: E501


        :return: The time_triggered of this UsageAlertPayloadRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._time_triggered

    @time_triggered.setter
    def time_triggered(self, time_triggered):
        """Sets the time_triggered of this UsageAlertPayloadRequest.


        :param time_triggered: The time_triggered of this UsageAlertPayloadRequest.  # noqa: E501
        :type: datetime
        """
        if time_triggered is None:
            raise ValueError("Invalid value for `time_triggered`, must not be `None`")  # noqa: E501

        self._time_triggered = time_triggered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsageAlertPayloadRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageAlertPayloadRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
