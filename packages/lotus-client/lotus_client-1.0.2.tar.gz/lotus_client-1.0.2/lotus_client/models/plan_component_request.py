# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanComponentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billable_metric': 'MetricRequest',
        'tiers': 'list[PriceTierRequest]',
        'pricing_unit': 'PricingUnitRequest',
        'prepaid_charge': 'AllOfPlanComponentRequestPrepaidCharge'
    }

    attribute_map = {
        'billable_metric': 'billable_metric',
        'tiers': 'tiers',
        'pricing_unit': 'pricing_unit',
        'prepaid_charge': 'prepaid_charge'
    }

    def __init__(self, billable_metric=None, tiers=None, pricing_unit=None, prepaid_charge=None):  # noqa: E501
        """PlanComponentRequest - a model defined in Swagger"""  # noqa: E501
        self._billable_metric = None
        self._tiers = None
        self._pricing_unit = None
        self._prepaid_charge = None
        self.discriminator = None
        self.billable_metric = billable_metric
        self.tiers = tiers
        self.pricing_unit = pricing_unit
        self.prepaid_charge = prepaid_charge

    @property
    def billable_metric(self):
        """Gets the billable_metric of this PlanComponentRequest.  # noqa: E501


        :return: The billable_metric of this PlanComponentRequest.  # noqa: E501
        :rtype: MetricRequest
        """
        return self._billable_metric

    @billable_metric.setter
    def billable_metric(self, billable_metric):
        """Sets the billable_metric of this PlanComponentRequest.


        :param billable_metric: The billable_metric of this PlanComponentRequest.  # noqa: E501
        :type: MetricRequest
        """
        if billable_metric is None:
            raise ValueError("Invalid value for `billable_metric`, must not be `None`")  # noqa: E501

        self._billable_metric = billable_metric

    @property
    def tiers(self):
        """Gets the tiers of this PlanComponentRequest.  # noqa: E501


        :return: The tiers of this PlanComponentRequest.  # noqa: E501
        :rtype: list[PriceTierRequest]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this PlanComponentRequest.


        :param tiers: The tiers of this PlanComponentRequest.  # noqa: E501
        :type: list[PriceTierRequest]
        """
        if tiers is None:
            raise ValueError("Invalid value for `tiers`, must not be `None`")  # noqa: E501

        self._tiers = tiers

    @property
    def pricing_unit(self):
        """Gets the pricing_unit of this PlanComponentRequest.  # noqa: E501


        :return: The pricing_unit of this PlanComponentRequest.  # noqa: E501
        :rtype: PricingUnitRequest
        """
        return self._pricing_unit

    @pricing_unit.setter
    def pricing_unit(self, pricing_unit):
        """Sets the pricing_unit of this PlanComponentRequest.


        :param pricing_unit: The pricing_unit of this PlanComponentRequest.  # noqa: E501
        :type: PricingUnitRequest
        """
        if pricing_unit is None:
            raise ValueError("Invalid value for `pricing_unit`, must not be `None`")  # noqa: E501

        self._pricing_unit = pricing_unit

    @property
    def prepaid_charge(self):
        """Gets the prepaid_charge of this PlanComponentRequest.  # noqa: E501


        :return: The prepaid_charge of this PlanComponentRequest.  # noqa: E501
        :rtype: AllOfPlanComponentRequestPrepaidCharge
        """
        return self._prepaid_charge

    @prepaid_charge.setter
    def prepaid_charge(self, prepaid_charge):
        """Sets the prepaid_charge of this PlanComponentRequest.


        :param prepaid_charge: The prepaid_charge of this PlanComponentRequest.  # noqa: E501
        :type: AllOfPlanComponentRequestPrepaidCharge
        """
        if prepaid_charge is None:
            raise ValueError("Invalid value for `prepaid_charge`, must not be `None`")  # noqa: E501

        self._prepaid_charge = prepaid_charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanComponentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanComponentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
