# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis_summary': 'list[SinglePlanAnalysis]',
        'revenue_per_day_graph': 'list[RevenuePerDay]',
        'revenue_by_metric_graph': 'list[RevenueByPlanMetric]',
        'top_customers_by_plan': 'list[TopCustomersPerPlanAnalysis]'
    }

    attribute_map = {
        'analysis_summary': 'analysis_summary',
        'revenue_per_day_graph': 'revenue_per_day_graph',
        'revenue_by_metric_graph': 'revenue_by_metric_graph',
        'top_customers_by_plan': 'top_customers_by_plan'
    }

    def __init__(self, analysis_summary=None, revenue_per_day_graph=None, revenue_by_metric_graph=None, top_customers_by_plan=None):  # noqa: E501
        """AnalysisResults - a model defined in Swagger"""  # noqa: E501
        self._analysis_summary = None
        self._revenue_per_day_graph = None
        self._revenue_by_metric_graph = None
        self._top_customers_by_plan = None
        self.discriminator = None
        self.analysis_summary = analysis_summary
        self.revenue_per_day_graph = revenue_per_day_graph
        self.revenue_by_metric_graph = revenue_by_metric_graph
        self.top_customers_by_plan = top_customers_by_plan

    @property
    def analysis_summary(self):
        """Gets the analysis_summary of this AnalysisResults.  # noqa: E501


        :return: The analysis_summary of this AnalysisResults.  # noqa: E501
        :rtype: list[SinglePlanAnalysis]
        """
        return self._analysis_summary

    @analysis_summary.setter
    def analysis_summary(self, analysis_summary):
        """Sets the analysis_summary of this AnalysisResults.


        :param analysis_summary: The analysis_summary of this AnalysisResults.  # noqa: E501
        :type: list[SinglePlanAnalysis]
        """
        if analysis_summary is None:
            raise ValueError("Invalid value for `analysis_summary`, must not be `None`")  # noqa: E501

        self._analysis_summary = analysis_summary

    @property
    def revenue_per_day_graph(self):
        """Gets the revenue_per_day_graph of this AnalysisResults.  # noqa: E501


        :return: The revenue_per_day_graph of this AnalysisResults.  # noqa: E501
        :rtype: list[RevenuePerDay]
        """
        return self._revenue_per_day_graph

    @revenue_per_day_graph.setter
    def revenue_per_day_graph(self, revenue_per_day_graph):
        """Sets the revenue_per_day_graph of this AnalysisResults.


        :param revenue_per_day_graph: The revenue_per_day_graph of this AnalysisResults.  # noqa: E501
        :type: list[RevenuePerDay]
        """
        if revenue_per_day_graph is None:
            raise ValueError("Invalid value for `revenue_per_day_graph`, must not be `None`")  # noqa: E501

        self._revenue_per_day_graph = revenue_per_day_graph

    @property
    def revenue_by_metric_graph(self):
        """Gets the revenue_by_metric_graph of this AnalysisResults.  # noqa: E501


        :return: The revenue_by_metric_graph of this AnalysisResults.  # noqa: E501
        :rtype: list[RevenueByPlanMetric]
        """
        return self._revenue_by_metric_graph

    @revenue_by_metric_graph.setter
    def revenue_by_metric_graph(self, revenue_by_metric_graph):
        """Sets the revenue_by_metric_graph of this AnalysisResults.


        :param revenue_by_metric_graph: The revenue_by_metric_graph of this AnalysisResults.  # noqa: E501
        :type: list[RevenueByPlanMetric]
        """
        if revenue_by_metric_graph is None:
            raise ValueError("Invalid value for `revenue_by_metric_graph`, must not be `None`")  # noqa: E501

        self._revenue_by_metric_graph = revenue_by_metric_graph

    @property
    def top_customers_by_plan(self):
        """Gets the top_customers_by_plan of this AnalysisResults.  # noqa: E501


        :return: The top_customers_by_plan of this AnalysisResults.  # noqa: E501
        :rtype: list[TopCustomersPerPlanAnalysis]
        """
        return self._top_customers_by_plan

    @top_customers_by_plan.setter
    def top_customers_by_plan(self, top_customers_by_plan):
        """Sets the top_customers_by_plan of this AnalysisResults.


        :param top_customers_by_plan: The top_customers_by_plan of this AnalysisResults.  # noqa: E501
        :type: list[TopCustomersPerPlanAnalysis]
        """
        if top_customers_by_plan is None:
            raise ValueError("Invalid value for `top_customers_by_plan`, must not be `None`")  # noqa: E501

        self._top_customers_by_plan = top_customers_by_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
