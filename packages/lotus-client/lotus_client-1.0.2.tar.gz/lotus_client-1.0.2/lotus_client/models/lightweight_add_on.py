# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightweightAddOn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_name': 'str',
        'addon_id': 'str',
        'addon_type': 'str',
        'billing_frequency': 'str'
    }

    attribute_map = {
        'addon_name': 'addon_name',
        'addon_id': 'addon_id',
        'addon_type': 'addon_type',
        'billing_frequency': 'billing_frequency'
    }

    def __init__(self, addon_name=None, addon_id=None, addon_type=None, billing_frequency=None):  # noqa: E501
        """LightweightAddOn - a model defined in Swagger"""  # noqa: E501
        self._addon_name = None
        self._addon_id = None
        self._addon_type = None
        self._billing_frequency = None
        self.discriminator = None
        self.addon_name = addon_name
        self.addon_id = addon_id
        self.addon_type = addon_type
        self.billing_frequency = billing_frequency

    @property
    def addon_name(self):
        """Gets the addon_name of this LightweightAddOn.  # noqa: E501

        The name of the add-on plan.  # noqa: E501

        :return: The addon_name of this LightweightAddOn.  # noqa: E501
        :rtype: str
        """
        return self._addon_name

    @addon_name.setter
    def addon_name(self, addon_name):
        """Sets the addon_name of this LightweightAddOn.

        The name of the add-on plan.  # noqa: E501

        :param addon_name: The addon_name of this LightweightAddOn.  # noqa: E501
        :type: str
        """
        if addon_name is None:
            raise ValueError("Invalid value for `addon_name`, must not be `None`")  # noqa: E501

        self._addon_name = addon_name

    @property
    def addon_id(self):
        """Gets the addon_id of this LightweightAddOn.  # noqa: E501

        The ID of the add-on plan.  # noqa: E501

        :return: The addon_id of this LightweightAddOn.  # noqa: E501
        :rtype: str
        """
        return self._addon_id

    @addon_id.setter
    def addon_id(self, addon_id):
        """Sets the addon_id of this LightweightAddOn.

        The ID of the add-on plan.  # noqa: E501

        :param addon_id: The addon_id of this LightweightAddOn.  # noqa: E501
        :type: str
        """
        if addon_id is None:
            raise ValueError("Invalid value for `addon_id`, must not be `None`")  # noqa: E501

        self._addon_id = addon_id

    @property
    def addon_type(self):
        """Gets the addon_type of this LightweightAddOn.  # noqa: E501


        :return: The addon_type of this LightweightAddOn.  # noqa: E501
        :rtype: str
        """
        return self._addon_type

    @addon_type.setter
    def addon_type(self, addon_type):
        """Sets the addon_type of this LightweightAddOn.


        :param addon_type: The addon_type of this LightweightAddOn.  # noqa: E501
        :type: str
        """
        if addon_type is None:
            raise ValueError("Invalid value for `addon_type`, must not be `None`")  # noqa: E501
        allowed_values = ["flat", "usage_based"]  # noqa: E501
        if addon_type not in allowed_values:
            raise ValueError(
                "Invalid value for `addon_type` ({0}), must be one of {1}"  # noqa: E501
                .format(addon_type, allowed_values)
            )

        self._addon_type = addon_type

    @property
    def billing_frequency(self):
        """Gets the billing_frequency of this LightweightAddOn.  # noqa: E501

        * `one_time` - one_time * `recurring` - recurring  # noqa: E501

        :return: The billing_frequency of this LightweightAddOn.  # noqa: E501
        :rtype: str
        """
        return self._billing_frequency

    @billing_frequency.setter
    def billing_frequency(self, billing_frequency):
        """Sets the billing_frequency of this LightweightAddOn.

        * `one_time` - one_time * `recurring` - recurring  # noqa: E501

        :param billing_frequency: The billing_frequency of this LightweightAddOn.  # noqa: E501
        :type: str
        """
        if billing_frequency is None:
            raise ValueError("Invalid value for `billing_frequency`, must not be `None`")  # noqa: E501

        self._billing_frequency = billing_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightweightAddOn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightweightAddOn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
