# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleSubstitutionResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cumulative_revenue': 'list[RevenueDate]',
        'revenue_by_metric': 'list[MetricRevenue]',
        'top_customers': 'TopCustomers'
    }

    attribute_map = {
        'cumulative_revenue': 'cumulative_revenue',
        'revenue_by_metric': 'revenue_by_metric',
        'top_customers': 'top_customers'
    }

    def __init__(self, cumulative_revenue=None, revenue_by_metric=None, top_customers=None):  # noqa: E501
        """SingleSubstitutionResults - a model defined in Swagger"""  # noqa: E501
        self._cumulative_revenue = None
        self._revenue_by_metric = None
        self._top_customers = None
        self.discriminator = None
        self.cumulative_revenue = cumulative_revenue
        self.revenue_by_metric = revenue_by_metric
        self.top_customers = top_customers

    @property
    def cumulative_revenue(self):
        """Gets the cumulative_revenue of this SingleSubstitutionResults.  # noqa: E501


        :return: The cumulative_revenue of this SingleSubstitutionResults.  # noqa: E501
        :rtype: list[RevenueDate]
        """
        return self._cumulative_revenue

    @cumulative_revenue.setter
    def cumulative_revenue(self, cumulative_revenue):
        """Sets the cumulative_revenue of this SingleSubstitutionResults.


        :param cumulative_revenue: The cumulative_revenue of this SingleSubstitutionResults.  # noqa: E501
        :type: list[RevenueDate]
        """
        if cumulative_revenue is None:
            raise ValueError("Invalid value for `cumulative_revenue`, must not be `None`")  # noqa: E501

        self._cumulative_revenue = cumulative_revenue

    @property
    def revenue_by_metric(self):
        """Gets the revenue_by_metric of this SingleSubstitutionResults.  # noqa: E501


        :return: The revenue_by_metric of this SingleSubstitutionResults.  # noqa: E501
        :rtype: list[MetricRevenue]
        """
        return self._revenue_by_metric

    @revenue_by_metric.setter
    def revenue_by_metric(self, revenue_by_metric):
        """Sets the revenue_by_metric of this SingleSubstitutionResults.


        :param revenue_by_metric: The revenue_by_metric of this SingleSubstitutionResults.  # noqa: E501
        :type: list[MetricRevenue]
        """
        if revenue_by_metric is None:
            raise ValueError("Invalid value for `revenue_by_metric`, must not be `None`")  # noqa: E501

        self._revenue_by_metric = revenue_by_metric

    @property
    def top_customers(self):
        """Gets the top_customers of this SingleSubstitutionResults.  # noqa: E501


        :return: The top_customers of this SingleSubstitutionResults.  # noqa: E501
        :rtype: TopCustomers
        """
        return self._top_customers

    @top_customers.setter
    def top_customers(self, top_customers):
        """Sets the top_customers of this SingleSubstitutionResults.


        :param top_customers: The top_customers of this SingleSubstitutionResults.  # noqa: E501
        :type: TopCustomers
        """
        if top_customers is None:
            raise ValueError("Invalid value for `top_customers`, must not be `None`")  # noqa: E501

        self._top_customers = top_customers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleSubstitutionResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleSubstitutionResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
