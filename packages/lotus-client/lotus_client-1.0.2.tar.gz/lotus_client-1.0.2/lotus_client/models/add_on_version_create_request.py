# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOnVersionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_id': 'str',
        'recurring_charges': 'list[RecurringChargeCreateRequest]',
        'components': 'list[PlanComponentCreateRequest]',
        'features': 'list[str]',
        'currency_code': 'str',
        'invoice_when': 'str',
        'billing_frequency': 'str'
    }

    attribute_map = {
        'addon_id': 'addon_id',
        'recurring_charges': 'recurring_charges',
        'components': 'components',
        'features': 'features',
        'currency_code': 'currency_code',
        'invoice_when': 'invoice_when',
        'billing_frequency': 'billing_frequency'
    }

    def __init__(self, addon_id=None, recurring_charges=None, components=None, features=None, currency_code=None, invoice_when=None, billing_frequency=None):  # noqa: E501
        """AddOnVersionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._addon_id = None
        self._recurring_charges = None
        self._components = None
        self._features = None
        self._currency_code = None
        self._invoice_when = None
        self._billing_frequency = None
        self.discriminator = None
        self.addon_id = addon_id
        if recurring_charges is not None:
            self.recurring_charges = recurring_charges
        if components is not None:
            self.components = components
        if features is not None:
            self.features = features
        self.currency_code = currency_code
        self.invoice_when = invoice_when
        self.billing_frequency = billing_frequency

    @property
    def addon_id(self):
        """Gets the addon_id of this AddOnVersionCreateRequest.  # noqa: E501


        :return: The addon_id of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._addon_id

    @addon_id.setter
    def addon_id(self, addon_id):
        """Sets the addon_id of this AddOnVersionCreateRequest.


        :param addon_id: The addon_id of this AddOnVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if addon_id is None:
            raise ValueError("Invalid value for `addon_id`, must not be `None`")  # noqa: E501

        self._addon_id = addon_id

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this AddOnVersionCreateRequest.  # noqa: E501


        :return: The recurring_charges of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: list[RecurringChargeCreateRequest]
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this AddOnVersionCreateRequest.


        :param recurring_charges: The recurring_charges of this AddOnVersionCreateRequest.  # noqa: E501
        :type: list[RecurringChargeCreateRequest]
        """

        self._recurring_charges = recurring_charges

    @property
    def components(self):
        """Gets the components of this AddOnVersionCreateRequest.  # noqa: E501


        :return: The components of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: list[PlanComponentCreateRequest]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this AddOnVersionCreateRequest.


        :param components: The components of this AddOnVersionCreateRequest.  # noqa: E501
        :type: list[PlanComponentCreateRequest]
        """

        self._components = components

    @property
    def features(self):
        """Gets the features of this AddOnVersionCreateRequest.  # noqa: E501


        :return: The features of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this AddOnVersionCreateRequest.


        :param features: The features of this AddOnVersionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def currency_code(self):
        """Gets the currency_code of this AddOnVersionCreateRequest.  # noqa: E501


        :return: The currency_code of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AddOnVersionCreateRequest.


        :param currency_code: The currency_code of this AddOnVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def invoice_when(self):
        """Gets the invoice_when of this AddOnVersionCreateRequest.  # noqa: E501

        * `invoice_on_attach` - invoice_on_attach * `invoice_on_subscription_end` - invoice_on_subscription_end  # noqa: E501

        :return: The invoice_when of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_when

    @invoice_when.setter
    def invoice_when(self, invoice_when):
        """Sets the invoice_when of this AddOnVersionCreateRequest.

        * `invoice_on_attach` - invoice_on_attach * `invoice_on_subscription_end` - invoice_on_subscription_end  # noqa: E501

        :param invoice_when: The invoice_when of this AddOnVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if invoice_when is None:
            raise ValueError("Invalid value for `invoice_when`, must not be `None`")  # noqa: E501

        self._invoice_when = invoice_when

    @property
    def billing_frequency(self):
        """Gets the billing_frequency of this AddOnVersionCreateRequest.  # noqa: E501

        * `one_time` - one_time * `recurring` - recurring  # noqa: E501

        :return: The billing_frequency of this AddOnVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._billing_frequency

    @billing_frequency.setter
    def billing_frequency(self, billing_frequency):
        """Sets the billing_frequency of this AddOnVersionCreateRequest.

        * `one_time` - one_time * `recurring` - recurring  # noqa: E501

        :param billing_frequency: The billing_frequency of this AddOnVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if billing_frequency is None:
            raise ValueError("Invalid value for `billing_frequency`, must not be `None`")  # noqa: E501

        self._billing_frequency = billing_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOnVersionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnVersionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
