# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllSubstitutionResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'substitution_results': 'list[SingleSubstitution]',
        'original_plans_revenue': 'float',
        'new_plans_revenue': 'float',
        'pct_revenue_change': 'float'
    }

    attribute_map = {
        'substitution_results': 'substitution_results',
        'original_plans_revenue': 'original_plans_revenue',
        'new_plans_revenue': 'new_plans_revenue',
        'pct_revenue_change': 'pct_revenue_change'
    }

    def __init__(self, substitution_results=None, original_plans_revenue=None, new_plans_revenue=None, pct_revenue_change=None):  # noqa: E501
        """AllSubstitutionResults - a model defined in Swagger"""  # noqa: E501
        self._substitution_results = None
        self._original_plans_revenue = None
        self._new_plans_revenue = None
        self._pct_revenue_change = None
        self.discriminator = None
        if substitution_results is not None:
            self.substitution_results = substitution_results
        if original_plans_revenue is not None:
            self.original_plans_revenue = original_plans_revenue
        if new_plans_revenue is not None:
            self.new_plans_revenue = new_plans_revenue
        if pct_revenue_change is not None:
            self.pct_revenue_change = pct_revenue_change

    @property
    def substitution_results(self):
        """Gets the substitution_results of this AllSubstitutionResults.  # noqa: E501


        :return: The substitution_results of this AllSubstitutionResults.  # noqa: E501
        :rtype: list[SingleSubstitution]
        """
        return self._substitution_results

    @substitution_results.setter
    def substitution_results(self, substitution_results):
        """Sets the substitution_results of this AllSubstitutionResults.


        :param substitution_results: The substitution_results of this AllSubstitutionResults.  # noqa: E501
        :type: list[SingleSubstitution]
        """

        self._substitution_results = substitution_results

    @property
    def original_plans_revenue(self):
        """Gets the original_plans_revenue of this AllSubstitutionResults.  # noqa: E501


        :return: The original_plans_revenue of this AllSubstitutionResults.  # noqa: E501
        :rtype: float
        """
        return self._original_plans_revenue

    @original_plans_revenue.setter
    def original_plans_revenue(self, original_plans_revenue):
        """Sets the original_plans_revenue of this AllSubstitutionResults.


        :param original_plans_revenue: The original_plans_revenue of this AllSubstitutionResults.  # noqa: E501
        :type: float
        """

        self._original_plans_revenue = original_plans_revenue

    @property
    def new_plans_revenue(self):
        """Gets the new_plans_revenue of this AllSubstitutionResults.  # noqa: E501


        :return: The new_plans_revenue of this AllSubstitutionResults.  # noqa: E501
        :rtype: float
        """
        return self._new_plans_revenue

    @new_plans_revenue.setter
    def new_plans_revenue(self, new_plans_revenue):
        """Sets the new_plans_revenue of this AllSubstitutionResults.


        :param new_plans_revenue: The new_plans_revenue of this AllSubstitutionResults.  # noqa: E501
        :type: float
        """

        self._new_plans_revenue = new_plans_revenue

    @property
    def pct_revenue_change(self):
        """Gets the pct_revenue_change of this AllSubstitutionResults.  # noqa: E501


        :return: The pct_revenue_change of this AllSubstitutionResults.  # noqa: E501
        :rtype: float
        """
        return self._pct_revenue_change

    @pct_revenue_change.setter
    def pct_revenue_change(self, pct_revenue_change):
        """Sets the pct_revenue_change of this AllSubstitutionResults.


        :param pct_revenue_change: The pct_revenue_change of this AllSubstitutionResults.  # noqa: E501
        :type: float
        """

        self._pct_revenue_change = pct_revenue_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllSubstitutionResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllSubstitutionResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
