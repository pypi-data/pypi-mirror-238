# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsageAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'usage_alert_id': 'str',
        'metric': 'Metric',
        'plan_version': 'LightweightPlanVersion',
        'threshold': 'float'
    }

    attribute_map = {
        'usage_alert_id': 'usage_alert_id',
        'metric': 'metric',
        'plan_version': 'plan_version',
        'threshold': 'threshold'
    }

    def __init__(self, usage_alert_id=None, metric=None, plan_version=None, threshold=None):  # noqa: E501
        """UsageAlert - a model defined in Swagger"""  # noqa: E501
        self._usage_alert_id = None
        self._metric = None
        self._plan_version = None
        self._threshold = None
        self.discriminator = None
        self.usage_alert_id = usage_alert_id
        self.metric = metric
        self.plan_version = plan_version
        self.threshold = threshold

    @property
    def usage_alert_id(self):
        """Gets the usage_alert_id of this UsageAlert.  # noqa: E501


        :return: The usage_alert_id of this UsageAlert.  # noqa: E501
        :rtype: str
        """
        return self._usage_alert_id

    @usage_alert_id.setter
    def usage_alert_id(self, usage_alert_id):
        """Sets the usage_alert_id of this UsageAlert.


        :param usage_alert_id: The usage_alert_id of this UsageAlert.  # noqa: E501
        :type: str
        """
        if usage_alert_id is None:
            raise ValueError("Invalid value for `usage_alert_id`, must not be `None`")  # noqa: E501

        self._usage_alert_id = usage_alert_id

    @property
    def metric(self):
        """Gets the metric of this UsageAlert.  # noqa: E501


        :return: The metric of this UsageAlert.  # noqa: E501
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this UsageAlert.


        :param metric: The metric of this UsageAlert.  # noqa: E501
        :type: Metric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def plan_version(self):
        """Gets the plan_version of this UsageAlert.  # noqa: E501


        :return: The plan_version of this UsageAlert.  # noqa: E501
        :rtype: LightweightPlanVersion
        """
        return self._plan_version

    @plan_version.setter
    def plan_version(self, plan_version):
        """Sets the plan_version of this UsageAlert.


        :param plan_version: The plan_version of this UsageAlert.  # noqa: E501
        :type: LightweightPlanVersion
        """
        if plan_version is None:
            raise ValueError("Invalid value for `plan_version`, must not be `None`")  # noqa: E501

        self._plan_version = plan_version

    @property
    def threshold(self):
        """Gets the threshold of this UsageAlert.  # noqa: E501


        :return: The threshold of this UsageAlert.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this UsageAlert.


        :param threshold: The threshold of this UsageAlert.  # noqa: E501
        :type: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsageAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
