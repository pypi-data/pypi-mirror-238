# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanVersionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'str',
        'recurring_charges': 'list[RecurringChargeCreateRequest]',
        'components': 'list[PlanComponentCreateRequest]',
        'features': 'list[str]',
        'price_adjustment': 'PriceAdjustmentRequest',
        'day_anchor': 'int',
        'month_anchor': 'int',
        'currency_code': 'str',
        'version': 'int',
        'target_customer_ids': 'list[str]',
        'localized_name': 'str',
        'make_active': 'bool',
        'make_active_type': 'str'
    }

    attribute_map = {
        'plan_id': 'plan_id',
        'recurring_charges': 'recurring_charges',
        'components': 'components',
        'features': 'features',
        'price_adjustment': 'price_adjustment',
        'day_anchor': 'day_anchor',
        'month_anchor': 'month_anchor',
        'currency_code': 'currency_code',
        'version': 'version',
        'target_customer_ids': 'target_customer_ids',
        'localized_name': 'localized_name',
        'make_active': 'make_active',
        'make_active_type': 'make_active_type'
    }

    def __init__(self, plan_id=None, recurring_charges=None, components=None, features=None, price_adjustment=None, day_anchor=None, month_anchor=None, currency_code=None, version=None, target_customer_ids=None, localized_name=None, make_active=False, make_active_type='replace_on_renewal'):  # noqa: E501
        """PlanVersionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._recurring_charges = None
        self._components = None
        self._features = None
        self._price_adjustment = None
        self._day_anchor = None
        self._month_anchor = None
        self._currency_code = None
        self._version = None
        self._target_customer_ids = None
        self._localized_name = None
        self._make_active = None
        self._make_active_type = None
        self.discriminator = None
        self.plan_id = plan_id
        if recurring_charges is not None:
            self.recurring_charges = recurring_charges
        if components is not None:
            self.components = components
        if features is not None:
            self.features = features
        if price_adjustment is not None:
            self.price_adjustment = price_adjustment
        if day_anchor is not None:
            self.day_anchor = day_anchor
        if month_anchor is not None:
            self.month_anchor = month_anchor
        self.currency_code = currency_code
        self.version = version
        if target_customer_ids is not None:
            self.target_customer_ids = target_customer_ids
        if localized_name is not None:
            self.localized_name = localized_name
        if make_active is not None:
            self.make_active = make_active
        if make_active_type is not None:
            self.make_active_type = make_active_type

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanVersionCreateRequest.  # noqa: E501


        :return: The plan_id of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanVersionCreateRequest.


        :param plan_id: The plan_id of this PlanVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this PlanVersionCreateRequest.  # noqa: E501


        :return: The recurring_charges of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: list[RecurringChargeCreateRequest]
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this PlanVersionCreateRequest.


        :param recurring_charges: The recurring_charges of this PlanVersionCreateRequest.  # noqa: E501
        :type: list[RecurringChargeCreateRequest]
        """

        self._recurring_charges = recurring_charges

    @property
    def components(self):
        """Gets the components of this PlanVersionCreateRequest.  # noqa: E501


        :return: The components of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: list[PlanComponentCreateRequest]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this PlanVersionCreateRequest.


        :param components: The components of this PlanVersionCreateRequest.  # noqa: E501
        :type: list[PlanComponentCreateRequest]
        """

        self._components = components

    @property
    def features(self):
        """Gets the features of this PlanVersionCreateRequest.  # noqa: E501


        :return: The features of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this PlanVersionCreateRequest.


        :param features: The features of this PlanVersionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def price_adjustment(self):
        """Gets the price_adjustment of this PlanVersionCreateRequest.  # noqa: E501


        :return: The price_adjustment of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: PriceAdjustmentRequest
        """
        return self._price_adjustment

    @price_adjustment.setter
    def price_adjustment(self, price_adjustment):
        """Sets the price_adjustment of this PlanVersionCreateRequest.


        :param price_adjustment: The price_adjustment of this PlanVersionCreateRequest.  # noqa: E501
        :type: PriceAdjustmentRequest
        """

        self._price_adjustment = price_adjustment

    @property
    def day_anchor(self):
        """Gets the day_anchor of this PlanVersionCreateRequest.  # noqa: E501


        :return: The day_anchor of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._day_anchor

    @day_anchor.setter
    def day_anchor(self, day_anchor):
        """Sets the day_anchor of this PlanVersionCreateRequest.


        :param day_anchor: The day_anchor of this PlanVersionCreateRequest.  # noqa: E501
        :type: int
        """

        self._day_anchor = day_anchor

    @property
    def month_anchor(self):
        """Gets the month_anchor of this PlanVersionCreateRequest.  # noqa: E501


        :return: The month_anchor of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._month_anchor

    @month_anchor.setter
    def month_anchor(self, month_anchor):
        """Sets the month_anchor of this PlanVersionCreateRequest.


        :param month_anchor: The month_anchor of this PlanVersionCreateRequest.  # noqa: E501
        :type: int
        """

        self._month_anchor = month_anchor

    @property
    def currency_code(self):
        """Gets the currency_code of this PlanVersionCreateRequest.  # noqa: E501


        :return: The currency_code of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PlanVersionCreateRequest.


        :param currency_code: The currency_code of this PlanVersionCreateRequest.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def version(self):
        """Gets the version of this PlanVersionCreateRequest.  # noqa: E501


        :return: The version of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PlanVersionCreateRequest.


        :param version: The version of this PlanVersionCreateRequest.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def target_customer_ids(self):
        """Gets the target_customer_ids of this PlanVersionCreateRequest.  # noqa: E501


        :return: The target_customer_ids of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_customer_ids

    @target_customer_ids.setter
    def target_customer_ids(self, target_customer_ids):
        """Sets the target_customer_ids of this PlanVersionCreateRequest.


        :param target_customer_ids: The target_customer_ids of this PlanVersionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._target_customer_ids = target_customer_ids

    @property
    def localized_name(self):
        """Gets the localized_name of this PlanVersionCreateRequest.  # noqa: E501


        :return: The localized_name of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this PlanVersionCreateRequest.


        :param localized_name: The localized_name of this PlanVersionCreateRequest.  # noqa: E501
        :type: str
        """

        self._localized_name = localized_name

    @property
    def make_active(self):
        """Gets the make_active of this PlanVersionCreateRequest.  # noqa: E501


        :return: The make_active of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._make_active

    @make_active.setter
    def make_active(self, make_active):
        """Sets the make_active of this PlanVersionCreateRequest.


        :param make_active: The make_active of this PlanVersionCreateRequest.  # noqa: E501
        :type: bool
        """

        self._make_active = make_active

    @property
    def make_active_type(self):
        """Gets the make_active_type of this PlanVersionCreateRequest.  # noqa: E501

        * `replace_on_renewal` - Replace on Renewal * `grandfather` - Grandfather  # noqa: E501

        :return: The make_active_type of this PlanVersionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._make_active_type

    @make_active_type.setter
    def make_active_type(self, make_active_type):
        """Sets the make_active_type of this PlanVersionCreateRequest.

        * `replace_on_renewal` - Replace on Renewal * `grandfather` - Grandfather  # noqa: E501

        :param make_active_type: The make_active_type of this PlanVersionCreateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["replace_on_renewal", "grandfather"]  # noqa: E501
        if make_active_type not in allowed_values:
            raise ValueError(
                "Invalid value for `make_active_type` ({0}), must be one of {1}"  # noqa: E501
                .format(make_active_type, allowed_values)
            )

        self._make_active_type = make_active_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanVersionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanVersionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
