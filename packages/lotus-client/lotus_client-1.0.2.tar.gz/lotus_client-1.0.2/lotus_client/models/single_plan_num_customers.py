# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SinglePlanNumCustomers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_name': 'str',
        'num_customers': 'int',
        'percent_total': 'float'
    }

    attribute_map = {
        'plan_name': 'plan_name',
        'num_customers': 'num_customers',
        'percent_total': 'percent_total'
    }

    def __init__(self, plan_name=None, num_customers=None, percent_total=None):  # noqa: E501
        """SinglePlanNumCustomers - a model defined in Swagger"""  # noqa: E501
        self._plan_name = None
        self._num_customers = None
        self._percent_total = None
        self.discriminator = None
        self.plan_name = plan_name
        self.num_customers = num_customers
        self.percent_total = percent_total

    @property
    def plan_name(self):
        """Gets the plan_name of this SinglePlanNumCustomers.  # noqa: E501


        :return: The plan_name of this SinglePlanNumCustomers.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this SinglePlanNumCustomers.


        :param plan_name: The plan_name of this SinglePlanNumCustomers.  # noqa: E501
        :type: str
        """
        if plan_name is None:
            raise ValueError("Invalid value for `plan_name`, must not be `None`")  # noqa: E501

        self._plan_name = plan_name

    @property
    def num_customers(self):
        """Gets the num_customers of this SinglePlanNumCustomers.  # noqa: E501


        :return: The num_customers of this SinglePlanNumCustomers.  # noqa: E501
        :rtype: int
        """
        return self._num_customers

    @num_customers.setter
    def num_customers(self, num_customers):
        """Sets the num_customers of this SinglePlanNumCustomers.


        :param num_customers: The num_customers of this SinglePlanNumCustomers.  # noqa: E501
        :type: int
        """
        if num_customers is None:
            raise ValueError("Invalid value for `num_customers`, must not be `None`")  # noqa: E501

        self._num_customers = num_customers

    @property
    def percent_total(self):
        """Gets the percent_total of this SinglePlanNumCustomers.  # noqa: E501


        :return: The percent_total of this SinglePlanNumCustomers.  # noqa: E501
        :rtype: float
        """
        return self._percent_total

    @percent_total.setter
    def percent_total(self, percent_total):
        """Sets the percent_total of this SinglePlanNumCustomers.


        :param percent_total: The percent_total of this SinglePlanNumCustomers.  # noqa: E501
        :type: float
        """
        if percent_total is None:
            raise ValueError("Invalid value for `percent_total`, must not be `None`")  # noqa: E501

        self._percent_total = percent_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SinglePlanNumCustomers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SinglePlanNumCustomers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
