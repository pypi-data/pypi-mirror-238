# coding: utf-8

"""
    Lotus API

    Lotus is an open-core pricing and billing engine. We enable API companies to automate and optimize their custom usage-based pricing for any metric.  # noqa: E501

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeActiveDatesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_ids': 'list[str]',
        'all_versions': 'bool',
        'active_from': 'datetime',
        'active_to': 'datetime'
    }

    attribute_map = {
        'version_ids': 'version_ids',
        'all_versions': 'all_versions',
        'active_from': 'active_from',
        'active_to': 'active_to'
    }

    def __init__(self, version_ids=None, all_versions=False, active_from=None, active_to=None):  # noqa: E501
        """ChangeActiveDatesRequest - a model defined in Swagger"""  # noqa: E501
        self._version_ids = None
        self._all_versions = None
        self._active_from = None
        self._active_to = None
        self.discriminator = None
        if version_ids is not None:
            self.version_ids = version_ids
        if all_versions is not None:
            self.all_versions = all_versions
        if active_from is not None:
            self.active_from = active_from
        if active_to is not None:
            self.active_to = active_to

    @property
    def version_ids(self):
        """Gets the version_ids of this ChangeActiveDatesRequest.  # noqa: E501

        The version_ids of the plan versions you want to add the feature to. If you want to apply to all versions, use the all_versions parameter.  # noqa: E501

        :return: The version_ids of this ChangeActiveDatesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._version_ids

    @version_ids.setter
    def version_ids(self, version_ids):
        """Sets the version_ids of this ChangeActiveDatesRequest.

        The version_ids of the plan versions you want to add the feature to. If you want to apply to all versions, use the all_versions parameter.  # noqa: E501

        :param version_ids: The version_ids of this ChangeActiveDatesRequest.  # noqa: E501
        :type: list[str]
        """

        self._version_ids = version_ids

    @property
    def all_versions(self):
        """Gets the all_versions of this ChangeActiveDatesRequest.  # noqa: E501

        Whether or not to apply this feature to all versions of the feature. If you want to apply to specific versions, use the version_ids parameter.  # noqa: E501

        :return: The all_versions of this ChangeActiveDatesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._all_versions

    @all_versions.setter
    def all_versions(self, all_versions):
        """Sets the all_versions of this ChangeActiveDatesRequest.

        Whether or not to apply this feature to all versions of the feature. If you want to apply to specific versions, use the version_ids parameter.  # noqa: E501

        :param all_versions: The all_versions of this ChangeActiveDatesRequest.  # noqa: E501
        :type: bool
        """

        self._all_versions = all_versions

    @property
    def active_from(self):
        """Gets the active_from of this ChangeActiveDatesRequest.  # noqa: E501

        The date and time that the feature should be active from. If you want to make this inactive, you can pass null here.  # noqa: E501

        :return: The active_from of this ChangeActiveDatesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._active_from

    @active_from.setter
    def active_from(self, active_from):
        """Sets the active_from of this ChangeActiveDatesRequest.

        The date and time that the feature should be active from. If you want to make this inactive, you can pass null here.  # noqa: E501

        :param active_from: The active_from of this ChangeActiveDatesRequest.  # noqa: E501
        :type: datetime
        """

        self._active_from = active_from

    @property
    def active_to(self):
        """Gets the active_to of this ChangeActiveDatesRequest.  # noqa: E501

        The date and time that the feature should be active until. If you want to make this active indefinitely, you can pass null here.  # noqa: E501

        :return: The active_to of this ChangeActiveDatesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._active_to

    @active_to.setter
    def active_to(self, active_to):
        """Sets the active_to of this ChangeActiveDatesRequest.

        The date and time that the feature should be active until. If you want to make this active indefinitely, you can pass null here.  # noqa: E501

        :param active_to: The active_to of this ChangeActiveDatesRequest.  # noqa: E501
        :type: datetime
        """

        self._active_to = active_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeActiveDatesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeActiveDatesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
