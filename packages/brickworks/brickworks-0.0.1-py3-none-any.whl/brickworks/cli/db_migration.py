import os

from alembic import command
from alembic.config import Config
from alembic.util.exc import AutogenerateDiffsDetected

from brickworks.db import get_db_url
from brickworks.loader import load_modules
from brickworks.settings import BrickworksSettings

dir_path = os.path.dirname(os.path.realpath(__file__))


def migrate(settings: BrickworksSettings):
    """Run database migrations."""

    config = Config(dir_path + "/../alembic.ini")
    config.set_main_option("sqlalchemy.url", get_db_url(settings))
    config.set_main_option("script_location", dir_path + "/../migration")
    command.upgrade(config, "head")


def make_migration(settings: BrickworksSettings, message: str):
    """Create a new database migration."""
    load_modules(settings)

    config = Config(dir_path + "/../alembic.ini")
    config.set_main_option("sqlalchemy.url", get_db_url(settings))
    config.set_main_option("script_location", dir_path + "/../migration")
    return command.revision(config, autogenerate=True, message=message)


def has_changes(settings: BrickworksSettings) -> bool:
    """
    Check if there are any migrations to be made.
    Returns true if there are unmigrated changes.
    """
    load_modules(settings)
    config = Config(dir_path + "/../alembic.ini")
    config.set_main_option("sqlalchemy.url", get_db_url(settings))
    config.set_main_option("script_location", dir_path + "/../migration")

    try:
        command.check(config)
    except AutogenerateDiffsDetected:
        return True
    return False
