# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['epure',
 'epure.helpers',
 'epure.parser',
 'epure.resource',
 'epure.resource.db',
 'epure.resource.file',
 'epure.resource.gres',
 'epure.resource.lite_db',
 'epure.resource.node']

package_data = \
{'': ['*']}

install_requires = \
['inflection>=0.5.1,<0.6.0', 'jsonpickle>=2.2.0,<3.0.0', 'psycopg2==2.9.3']

setup_kwargs = {
    'name': 'epure',
    'version': '0.2.37',
    'description': 'purest architecture',
    'long_description': 'Epure\n=====\n\n<a href="https://github.com/nagvalhm/epure">Epure</a> is python agnostic ORM - you can store and retrieve data having no idea about database, table and columns. \nAll technical details hidden from you. Care only about your business logic.\n\nSupported databases\n----------\nPostgres: yes ✔️\nOracle: no ❌\n\nInstalling\n----------\n\nInstall and update using <a href="https://pip.pypa.io/en/stable/getting-started/">`pip`</a>:\n\n```\n$ pip install -U epure\n```\n\nInstall and update using <a href="https://python-poetry.org/docs/">`poetry`</a>:\n\n```\n$ poetry add epure\n```\nConnecting Epure to database\n----------\n\n```python\n# import connection functions from Epure\nfrom epure import GresDb\nfrom epure import connect\n\n# Classic way to connect database to epure\n\n# Format of string to connect (\'database://user:password@host:port\')\nGresDb(\'postgres://postgres:postgres@localhost:5432\',\nlog_level=3).connect()\n\n# Alternative way of connection\n\ndb = GresDb(\'postgres://postgres:postgres@localhost:32\', \n# host="localhost", \nport="5432", \n# database="postgres", \n# user="postgres", \npassword="postgres",\nlog_level=3) # log_level defines level of description of opertaions\ndb.connect() #  with DB written in auto-generated file epure_db.log\n\n```\n\n\nA Simple Example\n----------------\n ##### ⚠️ In order to save attributes of class to db, type hints is required! ⚠️ \n##### Create example class with Epure, create instance of it and read it from DB.\n```python\n# save this as epure_example.py\n# --------------------------------\n# import epure class decorator\nfrom epure import epure\n# different types hints avalible\nimport types\nfrom typing import List, Dict, Tuple, Callable\n\n# ⚠️ In order to save attributes of class to db, type hints is required! ⚠️ \n\n# decorate class by @epure() wrap function\n@epure()\nclass Example:\n    int_attr:int \n    bool_attr:bool\n    float_attr:float\n    str_attr:str\n    range_attr:range\n    complex_attr:complex\n    list_attr:list\n    generic_list_attr:List[int]\n    dict_attr:Dict[int, str]\n    str_attr_with_default_val:str = \'example_str\' # with default val \'example_str\'\n    epure_cls_attr:SomeEpureCls # field that contains another epure class\n    NoneType_attr:types.NoneType\n\n# creating instance of epurized Example class\nobj = Example()\n\n# assigning vals to instance\nobj.int_attr = 1\nobj.str_attr = "example"\nobj.list_attr = [1,2,3,4]\n\n# saving obj instance to database\nobj.save()\n\n# saved instance has attribute of node_id that is unique\nnode_id = obj.node_id # -> UUID4\n\n# node_id is used to search epure objects and retrive them from DB via read() method, returns list of list with object(s)\nres = obj.table.read(node_id=node_id) # -> list[list[epure_object]]\n```\n\nSave epure instance\n----------------\n```python\n    in development\n```\n\nUpdate epure instance\n----------------\n```python\n    @epure()\n    class Example:\n    int_attr:int\n\n    ex = Example()\n    ex.int_attr = 42\n    ex.save()\n    ex.int_attr = 60\n    ex.save() # If instance of epure already has node_id attr, the next save() will be treated as update\n    \n    res = ex.table.read(node_id=ex.node_id)[0][0]\n    res.int_attr # -> 60  \n```\n\nRead from table method variations\n----------------\n#### 1. Read by kwargs:\nUse keyword arguments to select records with specified fields\n```python \n# node_id is UUID type id used to search epure objects and \n# retrive them from DB via read() method, returns list of list with object(s)\nres = epure.table.read(node_id=node_id) # -> list[list[epure_object]]\n\n# find objects with several keyword args\nres = epure.table.read(int3=6, str3="str3_value") # -> list[list[epure_object(s)]]\n```\n#### 2. Read by lambda function:\nUse python lambda function to select records with certain conditions and to use joins \n```python\n# tp is table proxy of Example table cls, dbp is database proxy of all tables\n# when lambda is used tp and dbp will be assumed as table proxy and db proxy of Example class\nres = Example.resource.read(lambda tp, dbp: \n    [tp.float_attr, tp.range_attr, tp.epure_cls_attr, dbp[\'example\'].node_id,\n    \n    dbp[\'example\'] << (tp.epure_cls_attr == dbp[\'example\'].node_id # "<<" is a join operator\n    | tp.generic_list0 == dbp[\'example\'].generic_list_attr) ^\n\n    tp.str_attr == \'str3_value\' \n    & (tp.int_attr > 3 | tp.float_attr < 0.8)\n\n    ^dbp[\'another_table\'] << tp.epure_class1 == dbp[\'another_table\'].node_id\n    ]\n) # -> list[list[epure_object]]\n```\n#### 3. Read by @ (at/matmul) sign:\n@ (at/matmul) is used in query as header query delimeter\n```python\nexmpl_db_proxy = Example.resource.resource_proxy[\'example\']\nan_ex_db_proxy = Example.resource.resource_proxy[\'another_table\']\n\n#Example A\nExample.resource.read(exmpl_db_proxy @ int_attr > 12) # -> list[list[epure_objects]]\n\n#Example B\n#   exmpl_db_proxy.str_attr is a query header\nExample.resource.read(exmpl_db_proxy.str_attr @ exmpl_db_proxy.str_attr == an_ex_db_proxy.str2 | exmpl_db_proxy.int1 == an_ex_db_proxy.int0 % 3 & 5 == an_ex_db_proxy.int3 | (an_ex_db_proxy.int2 > an_ex_db_proxy.int7)) # -> list[list[epure_objects]]\n```\n#### 4. Read by sql query:\n```python\n#   use your query to select epure obj from db\nExample.resource.read(\'select * from example where int = 42\') # -> list[list[epure_objects]]\n```\n\nAvalible operators in query\n----------------\n#### 1. equals "=="\n```python\nExample.resource.read(int_attr == 12)\n```\n#### 2. and "&"\n```python\nExample.resource.read(int_attr == 12 & str_attr == "cute doge")\n```\n#### 3. or "|"\n```python\nExample.resource.read(int_attr == 12 | str_attr == "cute doge")\n```\n#### 4. more ">" / less "<" \n```python\nExample.resource.read(int_attr > 12 | float_attr < 8.31)\n```\n#### 5. in: gte(greater than or equals) ">=" /lte(less than or equals) "<="\n##### Gte and Lte operators are used as "in" sql operator in cases when operands are:\n##### One of operands is table proxy and other is a tuple or an subquery:\n```python\n# tuple\nExample.resource.read(int_attr >= (12, 24)) # int_attr in (12, 24)\n\n# subquery\nExample.resource.read(int_attr >= (exmpl_db_proxy @ int_attr > 2)) # int_attr in subquery\n```\n##### In any other case >= operator functions as normal gte operator, like for int:\n```python\n# tuple\nExample.resource.read(int_attr >= 12) # int_attr more or equals 12 \n```\n#### 6. like "%" (modulo)\n##### % operator is used as "like" sql operator in cases when operands are:\n##### If left operand is a table proxy and right op is a string\n```python\nExample.resource.read(exmpl_db_proxy.string_attr % \'%a%\') # this % will be treated as \'like\' op\n```\n##### in any other case % will be treated like regular modulo\n```python\nExample.resource.read(exmpl_db_proxy.int_attr % 3) # this % will be treated as regular modulo\n```\n#### 7. not "!=" (ne) (in development)\n```python\n```\n#### 8. join << / >> (bit shift) (in development)\n```python\nExample.resource.read(another_table_proxy << x. == y.f4 ^ x.f1 == y.f2 & 5 == x.f5 | x.f6 == y.f7)\n```\n\n\nDevelopers\n-----\nNikita Umarov (Pichugin), \nPavel Pichugin\n\n\nLinks\n-----\n\n-   Documentation: https://github.com/nagvalhm/epure/blob/main/README.md\n-   Changes: https://github.com/nagvalhm/epure\n-   PyPI Releases: https://pypi.org/project/epure/\n-   Source Code: https://github.com/nagvalhm/epure\n-   Issue Tracker: https://github.com/nagvalhm/epure/issues\n-   Website: https://pypi.org/project/epure/',
    'author': 'Nikita Umarov',
    'author_email': 'nagvalhm@yandex.ru',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
