# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['jageocoder']

package_data = \
{'': ['*']}

install_requires = \
['Werkzeug>=2.2.3',
 'certifi>=2023.7.22',
 'cryptography>=41.0.4',
 'deprecated>=1.2.13,<2.0.0',
 'docopt>=0.6.2,<0.7.0',
 'geographiclib>=2.0,<3.0',
 'jaconv>=0.3.4,<0.4.0',
 'marisa-trie>=0.7.8,<0.8.0',
 'portabletab>=0.3.3',
 'pycapnp>=1.3.0,<2.0.0',
 'rtree>=1.0.0,<2.0.0',
 'tqdm>=4.00.0,<5.0.0',
 'urllib3>=2.0.6']

entry_points = \
{'console_scripts': ['jageocoder = jageocoder.__main__:main']}

setup_kwargs = {
    'name': 'jageocoder',
    'version': '2.1.2',
    'description': 'A Japanese-address geocoder for Python.',
    'long_description': '# jageocoder - A Python Japanese geocoder\n\n日本語版は README_ja.md をお読みください。\n\nThis is a Python port of the Japanese-address geocoder used in CSIS at the University of Tokyo\'s ["Address Matching Service"](https://newspat.csis.u-tokyo.ac.jp/geocode/modules/addmatch/index.php?content_id=1) and [GSI Maps](https://maps.gsi.go.jp/).\n\n# Getting Started\n\nThis package provides address-geocoding functionality for Python programs. The basic usage is to specify a dictionary with `init()` then call `search()` to get geocoding results.\n\n```python\npython\n>>> import jageocoder\n>>> jageocoder.init()\n>>> jageocoder.search(\'新宿区西新宿2-8-1\')\n{\'matched\': \'新宿区西新宿2-8-\', \'candidates\': [{\'id\': 5961406, \'name\': \'8番\', \'x\': 139.691778, \'y\': 35.689627, \'level\': 7, \'note\': None, \'fullname\': [\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\', \'8番\']}]}\n```\n\n# How to install\n\n## Prerequisites\n\nRequires Python 3.7.x or later.\n\nAll other required packages will be installed automatically.\n\n## Install instructions\n\n- Install the package with `pip install jageocoder`\n- Download an address database file compatible with that version from \n  [here](https://www.info-proto.com/static/jageocoder/latest/v2/)\n- Install the dictionary with `install-dictionary` command\n\n```sh\npip install jageocoder\nwget https://www.info-proto.com/static/jageocoder/latest/v2/jukyo_all_v20.zip\njageocoder install-dictionary jukyo_all_v20.zip\n```\n\nThe dictionary database will be installed under\n`{sys.prefix}/jageocoder/db2/` by default,\nhowever if the user doesn\'t have write permission there,\n`{site.USER_DATA}/jageocoder/db2/` instead.\n\nIf you need to know the location of the dictionary directory,\nperform `get-db-dir` command as follows. (Or call\n`jageocoder.get_db_dir()` in your script)\n\n```sh\njageocoder get-db-dir\n```\n\nIf you prefer to create it in another location, set the environment\nvariable `JAGEOCODER_DB2_DIR` before executing `install_dictionary()`\nto specify the directory.\n\n```sh\nexport JAGEOCODER_DB2_DIR=\'/usr/local/share/jageocoder/db2\'\ninstall-dictionary <db-file>\n```\n\n## Uninstall instructions\n\nRemove the directory containing the database, or perform \n`uninstall-dictionary` command as follows.\n\n```sh\njageocoder uninstall-dictionary\n```\n\nThen, uninstall the package with `pip` command.\n\n```sh\npip uninstall jageocoder\n```\n\n# How to use\n\n## Use from the command line\n\nWe assume that jageocoder will be embedded in applications\nas a library and used by calling the API, but for testing purposes,\nyou can check the geocoding results with the following command.\n\n```sh\njageocoder search 新宿区西新宿２－８－１\n```\n\nYou can check the list of available commands with `--help`.\n\n```sh\njageocoder --help\n```\n\n## Using API\n\nFirst, import jageocoder and initialize it with `init()`.\n\n```\n>>> import jageocoder\n>>> jageocoder.init()\n```\n\n### Search for latitude and longitude by address\n\nUse `search()` to search for the address you want to check the longitude and latitude of.\n\nThe `search()` function returns a dict with `matched` as\nthe matched string and `candidates` as the list of search results.\n(The results are formatted for better viewing)\n\nEach element of `candidates` contains the information of an address node (AddressNode).\n\n```\n>>> jageocoder.search(\'新宿区西新宿２－８－１\')\n{\n  \'matched\': \'新宿区西新宿２－８－\',\n  \'candidates\': [{\n    \'id\': 12299846, \'name\': \'8番\',\n    \'x\': 139.691778, \'y\': 35.689627, \'level\': 7, \'note\': None,\n    \'fullname\': [\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\', \'8番\']\n  }]\n}\n```\n\nThe meaning of the items is as follows\n\n- id: ID in the database\n- name: Address notation\n- x: longitude\n- y: latitude\n- level: Address level (1:Prefecture, 2:County, 3:City and 23 district,\n    4:Ward, 5:Oaza, 6:Aza and Chome, 7:Block, 8:Building)\n- note: Notes such as city codes\n- fullname: List of address notations from the prefecture level to this node\n\n### Search for addresses by longitude and latitude\n\nNote: This method is not available in v2 series.\n\n### Explore the attribute information of an address\n\nUse `searchNode()` to retrieve information about an address.\n\nThis function returns a list of type `jageocoder.result.Result` .\nYou can access the address node from node element of the Result object.\n\n```\n>>> results = jageocoder.searchNode(\'新宿区西新宿２－８－１\')\n>>> len(results)\n1\n>>> results[0].matched\n\'新宿区西新宿２－８－\'\n>>> type(results[0].node)\n<class \'jageocoder.node.AddressNode\'>\n>>> node = results[0].node\n>>> node.get_fullname()\n[\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\', \'8番\']\n```\n\n#### Get GeoJSON representation\n\nYou can use the `as_geojson()` method of the Result and AddressNode\nobjects to obtain the GeoJSON representation.\n\n```\n>>> results[0].as_geojson()\n{\'type\': \'Feature\', \'geometry\': {\'type\': \'Point\', \'coordinates\': [139.691778, 35.689627]}, \'properties\': {\'id\': 12299851, \'name\': \'8番\', \'level\': 7, \'note\': None, \'fullname\': [\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\', \'8番\'], \'matched\': \'新宿区西新宿２－８－\'}}\n>>> results[0].node.as_geojson()\n{\'type\': \'Feature\', \'geometry\': {\'type\': \'Point\', \'coordinates\': [139.691778, 35.689627]}, \'properties\': {\'id\': 12299851, \'name\': \'8番\', \'level\': 7, \'note\': None, \'fullname\': [\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\', \'8番\']}}\n```\n\n#### Get the local government codes\n\nThere are two types of local government codes: JISX0402 (5-digit) and\nLocal Government Code (6-digit).\n\nYou can also obtain the prefecture code JISX0401 (2 digits).\n\n```\n>>> node.get_city_jiscode()  # 5-digit code\n\'13104\'\n>>> node.get_city_local_authority_code() # 6-digit code\n\'131041\'\n>>> node.get_pref_jiscode()  # prefecture code\n\'13\'\n```\n\n#### Get link URLs to maps\n\nGenerate URLs to link to GSI and Google maps.\n\n```\n>>> node.get_gsimap_link()\n\'https://maps.gsi.go.jp/#16/35.689627/139.691778/\'\n>>> node.get_googlemap_link()\n\'https://maps.google.com/maps?q=35.689627,139.691778&z=16\'\n```\n\n#### Traverse the parent node\n\nA "parent node" is a node that represents a level above the address.\nGet the node by attribute `parent`.\n\nNow the `node` points to \'8番\', so the parent node will be \'二丁目\'.\n\n```\n>>> parent = node.parent\n>>> parent.get_fullname()\n[\'東京都\', \'新宿区\', \'西新宿\', \'二丁目\']\n>>> parent.x, parent.y\n(139.691774, 35.68945)\n```\n\n#### Traverse the child nodes\n\nA "child node" is a node that represents a level below the address.\nGet the node by attribute `children`.\n\nThere is one parent node, but there are multiple child nodes.\nThe actual return is a SQL query object, but it can be looped through\nwith an iterator or cast to a list.\n\nNow the `parent` points to \'二丁目\', so the child node will be\nthe block number (○番) contained therein.\n\n```\n>>> parent.children\n<sqlalchemy.orm.dynamic.AppenderQuery object at 0x7fbc08404b38>\n>>> [child.name for child in parent.children]\n[\'10番\', \'11番\', \'1番\', \'2番\', \'3番\', \'4番\', \'5番\', \'6番\', \'7番\', \'8番\', \'9番\']\n```\n\n## Create your own dictionary\n\nConsider using [jageocoder-converter](https://github.com/t-sagara/jageocoder-converter).\n\n## ToDos\n\n- Supporting address changes\n\n    The functionality to handle address changes due to municipal consolidation, etc.\n    has already been implemented in the C++ version, but will be implemented\n    in this package in the future.\n\n## Contributing\n\nAddress notation varies. So suggestions for logic improvements are welcome.\nPlease submit an issue with examples of address notations in use and how they should be parsed.\n\n## Authors\n\n* **Takeshi SAGARA** - [Info-proto Co.,Ltd.](https://www.info-proto.com/)\n\n## License\n\nThis project is licensed under [the MIT License](https://opensource.org/licenses/mit-license.php).\n\nThis is not the scope of the dictionary data license. Please follow the license of the respective dictionary data.\n\n## Acknowledgements\n\nWe would like to thank CSIS for allowing us to provide address matching services\non their institutional website for over 20 years.\n\nWe would also like to thank Professor Asanobu Kitamoto of NII for providing us\nwith a large sample of areas using the older address system and for his many help\nin confirming the results of our analysis.\n',
    'author': 'Takeshi Sagara',
    'author_email': 'sagara@info-proto.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/t-sagara/jageocoder/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
