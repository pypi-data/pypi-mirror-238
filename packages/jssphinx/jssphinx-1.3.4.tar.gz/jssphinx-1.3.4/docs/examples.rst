Examples
========
``jsphinx-download`` directive usage
------------------------------------

See the following full functional snippet for generating a ``DOCX`` file.

.. literalinclude:: _static/py/faker_file_docx_1.py
    :language: python
    :lines: 3-11

.. container:: jsphinx-download

    *See the full example*
    :download:`here <_static/py/faker_file_docx_1.py>`

The generated file will have 10,000 characters of text, which is about 5
pages.

If you want a file with more pages, you could either:

- Increase the value of ``max_nb_chars`` accordingly.
- Set value of ``wrap_chars_after`` to 80 characters to force longer pages.
- Insert manual page breaks and other content.

----

See the example below for ``max_nb_chars`` tweak:

.. literalinclude:: _static/py/faker_file_docx_2.py
    :language: python
    :lines: 8-

.. container:: jsphinx-download

    *See the full example*
    :download:`here <_static/py/faker_file_docx_2.py>`

----

See the example below for ``wrap_chars_after`` tweak:

.. literalinclude:: _static/py/faker_file_docx_3.py
    :language: python
    :lines: 8-

.. container:: jsphinx-download

    *See the full example*
    :download:`here <_static/py/faker_file_docx_3.py>`

----

It's possible to diversify the generated context with images, paragraphs,
tables, manual text break and pretty much everything that is supported by
``DOCX`` format specification, although currently only images, paragraphs,
tables and manual text breaks are supported out of the box.

In order to customise the blocks ``DOCX`` file is built from,
the ``DynamicTemplate`` class is used. See the example below for usage
examples:

.. literalinclude:: _static/py/faker_file_docx_4.py
    :language: python
    :lines: 3-9, 14-31

.. container:: jsphinx-download

    *See the full example*
    :download:`here <_static/py/faker_file_docx_4.py>`

``jsphinx-toggle-emphasis`` directive usage
-------------------------------------------
Generate a TXT file.

.. container:: jsphinx-toggle-emphasis

    .. code-block:: python
        :emphasize-lines: 3,6,8

        from faker import Faker
        # Import the file provider we want to use
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        txt_file = FAKER.txt_file()  # Generate a TXT file

        # Meta-data is stored inside a ``data`` attribute (``dict``).
        # The following line would produce something like /tmp/tmp/tmphzzb8mot.txt
        print(file.data["filename"])
        # The following line would produce a text generated by Faker, used as
        # the content of the generated file.
        print(file.data["content"])

You could get just bytes back without physically creating the file.

.. container:: jsphinx-toggle-emphasis

    .. code-block:: python
        :emphasize-lines: 7

        from faker import Faker
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        raw = FAKER.txt_file(raw=True)  # Generate a TXT file

``jsphinx-toggle-emphasis-replace`` directive usage
---------------------------------------------------
Generate a TXT file.

.. container:: jsphinx-toggle-emphasis-replace

    .. code-block:: python
        :emphasize-lines: 3,6,8

        from faker import Faker
        # Import the file provider we want to use
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        txt_file = FAKER.txt_file()  # Generate a TXT file

        # Meta-data is stored inside a ``data`` attribute (``dict``).
        # The following line would produce something like /tmp/tmp/tmphzzb8mot.txt
        print(file.data["filename"])
        # The following line would produce a text generated by Faker, used as
        # the content of the generated file.
        print(file.data["content"])

You could get just bytes back without physically creating the file.

.. container:: jsphinx-toggle-emphasis-replace

    .. code-block:: python
        :emphasize-lines: 7

        from faker import Faker
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        raw = FAKER.txt_file(raw=True)  # Generate a TXT file
