# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceDefinitionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'created_by': 'str',
        'criteria': 'list[MatchingCriteriaResponse]',
        'driver_account': 'str',
        'driver_inputs': 'ValuesSecretsRefsResponse',
        'driver_type': 'str',
        'id': 'str',
        'is_default': 'bool',
        'is_deleted': 'bool',
        'name': 'str',
        'org_id': 'str',
        'provision': 'dict(str, ProvisionDependenciesResponse)',
        'type': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'criteria': 'criteria',
        'driver_account': 'driver_account',
        'driver_inputs': 'driver_inputs',
        'driver_type': 'driver_type',
        'id': 'id',
        'is_default': 'is_default',
        'is_deleted': 'is_deleted',
        'name': 'name',
        'org_id': 'org_id',
        'provision': 'provision',
        'type': 'type'
    }

    def __init__(self, created_at=None, created_by=None, criteria=None, driver_account=None, driver_inputs=None, driver_type=None, id=None, is_default=None, is_deleted=None, name=None, org_id=None, provision=None, type=None):  # noqa: E501
        """ResourceDefinitionResponse - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._criteria = None
        self._driver_account = None
        self._driver_inputs = None
        self._driver_type = None
        self._id = None
        self._is_default = None
        self._is_deleted = None
        self._name = None
        self._org_id = None
        self._provision = None
        self._type = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if criteria is not None:
            self.criteria = criteria
        if driver_account is not None:
            self.driver_account = driver_account
        if driver_inputs is not None:
            self.driver_inputs = driver_inputs
        if driver_type is not None:
            self.driver_type = driver_type
        self.id = id
        if is_default is not None:
            self.is_default = is_default
        if is_deleted is not None:
            self.is_deleted = is_deleted
        self.name = name
        self.org_id = org_id
        if provision is not None:
            self.provision = provision
        self.type = type

    @property
    def created_at(self):
        """Gets the created_at of this ResourceDefinitionResponse.  # noqa: E501

        The timestamp of when this record has been created.  # noqa: E501

        :return: The created_at of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ResourceDefinitionResponse.

        The timestamp of when this record has been created.  # noqa: E501

        :param created_at: The created_at of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ResourceDefinitionResponse.  # noqa: E501

        The user who created this record.  # noqa: E501

        :return: The created_by of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResourceDefinitionResponse.

        The user who created this record.  # noqa: E501

        :param created_by: The created_by of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def criteria(self):
        """Gets the criteria of this ResourceDefinitionResponse.  # noqa: E501

        (Optional) The criteria to use when looking for a Resource Definition during the deployment.  # noqa: E501

        :return: The criteria of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: list[MatchingCriteriaResponse]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this ResourceDefinitionResponse.

        (Optional) The criteria to use when looking for a Resource Definition during the deployment.  # noqa: E501

        :param criteria: The criteria of this ResourceDefinitionResponse.  # noqa: E501
        :type: list[MatchingCriteriaResponse]
        """

        self._criteria = criteria

    @property
    def driver_account(self):
        """Gets the driver_account of this ResourceDefinitionResponse.  # noqa: E501

        (Optional) Security account required by the driver.  # noqa: E501

        :return: The driver_account of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._driver_account

    @driver_account.setter
    def driver_account(self, driver_account):
        """Sets the driver_account of this ResourceDefinitionResponse.

        (Optional) Security account required by the driver.  # noqa: E501

        :param driver_account: The driver_account of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._driver_account = driver_account

    @property
    def driver_inputs(self):
        """Gets the driver_inputs of this ResourceDefinitionResponse.  # noqa: E501


        :return: The driver_inputs of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: ValuesSecretsRefsResponse
        """
        return self._driver_inputs

    @driver_inputs.setter
    def driver_inputs(self, driver_inputs):
        """Sets the driver_inputs of this ResourceDefinitionResponse.


        :param driver_inputs: The driver_inputs of this ResourceDefinitionResponse.  # noqa: E501
        :type: ValuesSecretsRefsResponse
        """

        self._driver_inputs = driver_inputs

    @property
    def driver_type(self):
        """Gets the driver_type of this ResourceDefinitionResponse.  # noqa: E501

        The driver to be used to create the resource.  # noqa: E501

        :return: The driver_type of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._driver_type

    @driver_type.setter
    def driver_type(self, driver_type):
        """Sets the driver_type of this ResourceDefinitionResponse.

        The driver to be used to create the resource.  # noqa: E501

        :param driver_type: The driver_type of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._driver_type = driver_type

    @property
    def id(self):
        """Gets the id of this ResourceDefinitionResponse.  # noqa: E501

        The Resource Definition ID.  # noqa: E501

        :return: The id of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceDefinitionResponse.

        The Resource Definition ID.  # noqa: E501

        :param id: The id of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this ResourceDefinitionResponse.  # noqa: E501

        Indicates this definition is a built-in one (provided by Humanitec).  # noqa: E501

        :return: The is_default of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ResourceDefinitionResponse.

        Indicates this definition is a built-in one (provided by Humanitec).  # noqa: E501

        :param is_default: The is_default of this ResourceDefinitionResponse.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ResourceDefinitionResponse.  # noqa: E501

        Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501

        :return: The is_deleted of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ResourceDefinitionResponse.

        Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501

        :param is_deleted: The is_deleted of this ResourceDefinitionResponse.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def name(self):
        """Gets the name of this ResourceDefinitionResponse.  # noqa: E501

        The display name.  # noqa: E501

        :return: The name of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceDefinitionResponse.

        The display name.  # noqa: E501

        :param name: The name of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this ResourceDefinitionResponse.  # noqa: E501

        The Organization ID.  # noqa: E501

        :return: The org_id of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ResourceDefinitionResponse.

        The Organization ID.  # noqa: E501

        :param org_id: The org_id of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def provision(self):
        """Gets the provision of this ResourceDefinitionResponse.  # noqa: E501

        (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.  # noqa: E501

        :return: The provision of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: dict(str, ProvisionDependenciesResponse)
        """
        return self._provision

    @provision.setter
    def provision(self, provision):
        """Sets the provision of this ResourceDefinitionResponse.

        (Optional) A map where the keys are resType#resId (if resId is omitted, the same id of the current resource definition is used) of the resources that should be provisioned when the current resource is provisioned. This also specifies if the resources have a dependency on the current resource.  # noqa: E501

        :param provision: The provision of this ResourceDefinitionResponse.  # noqa: E501
        :type: dict(str, ProvisionDependenciesResponse)
        """

        self._provision = provision

    @property
    def type(self):
        """Gets the type of this ResourceDefinitionResponse.  # noqa: E501

        The Resource Type.  # noqa: E501

        :return: The type of this ResourceDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceDefinitionResponse.

        The Resource Type.  # noqa: E501

        :param type: The type of this ResourceDefinitionResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceDefinitionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceDefinitionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
