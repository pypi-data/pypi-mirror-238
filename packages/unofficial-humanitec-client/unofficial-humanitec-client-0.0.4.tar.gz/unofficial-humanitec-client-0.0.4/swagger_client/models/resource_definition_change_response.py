# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceDefinitionChangeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'env_id': 'str',
        'from_def': 'str',
        'res_id': 'str',
        'to_def': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        'env_id': 'env_id',
        'from_def': 'from_def',
        'res_id': 'res_id',
        'to_def': 'to_def'
    }

    def __init__(self, app_id=None, env_id=None, from_def=None, res_id=None, to_def=None):  # noqa: E501
        """ResourceDefinitionChangeResponse - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._env_id = None
        self._from_def = None
        self._res_id = None
        self._to_def = None
        self.discriminator = None
        self.app_id = app_id
        self.env_id = env_id
        self.from_def = from_def
        self.res_id = res_id
        self.to_def = to_def

    @property
    def app_id(self):
        """Gets the app_id of this ResourceDefinitionChangeResponse.  # noqa: E501

        The ID of the App the resource is associated with.  # noqa: E501

        :return: The app_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ResourceDefinitionChangeResponse.

        The ID of the App the resource is associated with.  # noqa: E501

        :param app_id: The app_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def env_id(self):
        """Gets the env_id of this ResourceDefinitionChangeResponse.  # noqa: E501

        The ID of the Environment the resource is associated with.  # noqa: E501

        :return: The env_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """Sets the env_id of this ResourceDefinitionChangeResponse.

        The ID of the Environment the resource is associated with.  # noqa: E501

        :param env_id: The env_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :type: str
        """
        if env_id is None:
            raise ValueError("Invalid value for `env_id`, must not be `None`")  # noqa: E501

        self._env_id = env_id

    @property
    def from_def(self):
        """Gets the from_def of this ResourceDefinitionChangeResponse.  # noqa: E501

        The Resource Definition that this resource was provisioned from.  # noqa: E501

        :return: The from_def of this ResourceDefinitionChangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._from_def

    @from_def.setter
    def from_def(self, from_def):
        """Sets the from_def of this ResourceDefinitionChangeResponse.

        The Resource Definition that this resource was provisioned from.  # noqa: E501

        :param from_def: The from_def of this ResourceDefinitionChangeResponse.  # noqa: E501
        :type: str
        """
        if from_def is None:
            raise ValueError("Invalid value for `from_def`, must not be `None`")  # noqa: E501

        self._from_def = from_def

    @property
    def res_id(self):
        """Gets the res_id of this ResourceDefinitionChangeResponse.  # noqa: E501

        The ID of the resource  # noqa: E501

        :return: The res_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this ResourceDefinitionChangeResponse.

        The ID of the resource  # noqa: E501

        :param res_id: The res_id of this ResourceDefinitionChangeResponse.  # noqa: E501
        :type: str
        """
        if res_id is None:
            raise ValueError("Invalid value for `res_id`, must not be `None`")  # noqa: E501

        self._res_id = res_id

    @property
    def to_def(self):
        """Gets the to_def of this ResourceDefinitionChangeResponse.  # noqa: E501

        The Resource Definition that resource *will be* provisioned from if the change is applied.  # noqa: E501

        :return: The to_def of this ResourceDefinitionChangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._to_def

    @to_def.setter
    def to_def(self, to_def):
        """Sets the to_def of this ResourceDefinitionChangeResponse.

        The Resource Definition that resource *will be* provisioned from if the change is applied.  # noqa: E501

        :param to_def: The to_def of this ResourceDefinitionChangeResponse.  # noqa: E501
        :type: str
        """
        if to_def is None:
            raise ValueError("Invalid value for `to_def`, must not be `None`")  # noqa: E501

        self._to_def = to_def

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceDefinitionChangeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceDefinitionChangeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
