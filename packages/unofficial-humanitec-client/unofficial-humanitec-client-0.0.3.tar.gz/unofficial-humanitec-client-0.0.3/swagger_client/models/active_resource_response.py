# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActiveResourceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        '_class': 'str',
        'criteria_id': 'str',
        'def_id': 'str',
        'deploy_id': 'str',
        'driver_type': 'str',
        'env_id': 'str',
        'env_type': 'str',
        'gu_res_id': 'str',
        'org_id': 'str',
        'res_id': 'str',
        'resource': 'dict(str, object)',
        'status': 'str',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        '_class': 'class',
        'criteria_id': 'criteria_id',
        'def_id': 'def_id',
        'deploy_id': 'deploy_id',
        'driver_type': 'driver_type',
        'env_id': 'env_id',
        'env_type': 'env_type',
        'gu_res_id': 'gu_res_id',
        'org_id': 'org_id',
        'res_id': 'res_id',
        'resource': 'resource',
        'status': 'status',
        'type': 'type',
        'updated_at': 'updated_at'
    }

    def __init__(self, app_id=None, _class=None, criteria_id=None, def_id=None, deploy_id=None, driver_type=None, env_id=None, env_type=None, gu_res_id=None, org_id=None, res_id=None, resource=None, status=None, type=None, updated_at=None):  # noqa: E501
        """ActiveResourceResponse - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self.__class = None
        self._criteria_id = None
        self._def_id = None
        self._deploy_id = None
        self._driver_type = None
        self._env_id = None
        self._env_type = None
        self._gu_res_id = None
        self._org_id = None
        self._res_id = None
        self._resource = None
        self._status = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        self.app_id = app_id
        self._class = _class
        if criteria_id is not None:
            self.criteria_id = criteria_id
        self.def_id = def_id
        self.deploy_id = deploy_id
        if driver_type is not None:
            self.driver_type = driver_type
        self.env_id = env_id
        self.env_type = env_type
        self.gu_res_id = gu_res_id
        self.org_id = org_id
        self.res_id = res_id
        self.resource = resource
        self.status = status
        self.type = type
        self.updated_at = updated_at

    @property
    def app_id(self):
        """Gets the app_id of this ActiveResourceResponse.  # noqa: E501

        The ID of the App the resource is associated with.  # noqa: E501

        :return: The app_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ActiveResourceResponse.

        The ID of the App the resource is associated with.  # noqa: E501

        :param app_id: The app_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def _class(self):
        """Gets the _class of this ActiveResourceResponse.  # noqa: E501

        The Resource Class of the resource  # noqa: E501

        :return: The _class of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ActiveResourceResponse.

        The Resource Class of the resource  # noqa: E501

        :param _class: The _class of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def criteria_id(self):
        """Gets the criteria_id of this ActiveResourceResponse.  # noqa: E501

        The Matching Criteria ID.  # noqa: E501

        :return: The criteria_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._criteria_id

    @criteria_id.setter
    def criteria_id(self, criteria_id):
        """Sets the criteria_id of this ActiveResourceResponse.

        The Matching Criteria ID.  # noqa: E501

        :param criteria_id: The criteria_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """

        self._criteria_id = criteria_id

    @property
    def def_id(self):
        """Gets the def_id of this ActiveResourceResponse.  # noqa: E501

        The Resource Definition that this resource was provisioned from.  # noqa: E501

        :return: The def_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this ActiveResourceResponse.

        The Resource Definition that this resource was provisioned from.  # noqa: E501

        :param def_id: The def_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if def_id is None:
            raise ValueError("Invalid value for `def_id`, must not be `None`")  # noqa: E501

        self._def_id = def_id

    @property
    def deploy_id(self):
        """Gets the deploy_id of this ActiveResourceResponse.  # noqa: E501

        The deployment that the resource was last provisioned in.  # noqa: E501

        :return: The deploy_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._deploy_id

    @deploy_id.setter
    def deploy_id(self, deploy_id):
        """Sets the deploy_id of this ActiveResourceResponse.

        The deployment that the resource was last provisioned in.  # noqa: E501

        :param deploy_id: The deploy_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if deploy_id is None:
            raise ValueError("Invalid value for `deploy_id`, must not be `None`")  # noqa: E501

        self._deploy_id = deploy_id

    @property
    def driver_type(self):
        """Gets the driver_type of this ActiveResourceResponse.  # noqa: E501

        The driver to be used to create the resource.  # noqa: E501

        :return: The driver_type of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._driver_type

    @driver_type.setter
    def driver_type(self, driver_type):
        """Sets the driver_type of this ActiveResourceResponse.

        The driver to be used to create the resource.  # noqa: E501

        :param driver_type: The driver_type of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """

        self._driver_type = driver_type

    @property
    def env_id(self):
        """Gets the env_id of this ActiveResourceResponse.  # noqa: E501

        The ID of the Environment the resource is associated with.  # noqa: E501

        :return: The env_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """Sets the env_id of this ActiveResourceResponse.

        The ID of the Environment the resource is associated with.  # noqa: E501

        :param env_id: The env_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if env_id is None:
            raise ValueError("Invalid value for `env_id`, must not be `None`")  # noqa: E501

        self._env_id = env_id

    @property
    def env_type(self):
        """Gets the env_type of this ActiveResourceResponse.  # noqa: E501

        The Environment Type of the Environment specified by env_id.  # noqa: E501

        :return: The env_type of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._env_type

    @env_type.setter
    def env_type(self, env_type):
        """Sets the env_type of this ActiveResourceResponse.

        The Environment Type of the Environment specified by env_id.  # noqa: E501

        :param env_type: The env_type of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if env_type is None:
            raise ValueError("Invalid value for `env_type`, must not be `None`")  # noqa: E501

        self._env_type = env_type

    @property
    def gu_res_id(self):
        """Gets the gu_res_id of this ActiveResourceResponse.  # noqa: E501

        Globally unique resource id  # noqa: E501

        :return: The gu_res_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._gu_res_id

    @gu_res_id.setter
    def gu_res_id(self, gu_res_id):
        """Sets the gu_res_id of this ActiveResourceResponse.

        Globally unique resource id  # noqa: E501

        :param gu_res_id: The gu_res_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if gu_res_id is None:
            raise ValueError("Invalid value for `gu_res_id`, must not be `None`")  # noqa: E501

        self._gu_res_id = gu_res_id

    @property
    def org_id(self):
        """Gets the org_id of this ActiveResourceResponse.  # noqa: E501

        the ID of the Organization the Active Resource is associated with.  # noqa: E501

        :return: The org_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ActiveResourceResponse.

        the ID of the Organization the Active Resource is associated with.  # noqa: E501

        :param org_id: The org_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def res_id(self):
        """Gets the res_id of this ActiveResourceResponse.  # noqa: E501

        The ID of the resource  # noqa: E501

        :return: The res_id of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this ActiveResourceResponse.

        The ID of the resource  # noqa: E501

        :param res_id: The res_id of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if res_id is None:
            raise ValueError("Invalid value for `res_id`, must not be `None`")  # noqa: E501

        self._res_id = res_id

    @property
    def resource(self):
        """Gets the resource of this ActiveResourceResponse.  # noqa: E501

        The data that the resource passes into the deployment ('values' only).  # noqa: E501

        :return: The resource of this ActiveResourceResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ActiveResourceResponse.

        The data that the resource passes into the deployment ('values' only).  # noqa: E501

        :param resource: The resource of this ActiveResourceResponse.  # noqa: E501
        :type: dict(str, object)
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def status(self):
        """Gets the status of this ActiveResourceResponse.  # noqa: E501

        Current resource status: 'pending', 'active', or 'deleting'.  # noqa: E501

        :return: The status of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActiveResourceResponse.

        Current resource status: 'pending', 'active', or 'deleting'.  # noqa: E501

        :param status: The status of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this ActiveResourceResponse.  # noqa: E501

        The Resource Type of the resource  # noqa: E501

        :return: The type of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActiveResourceResponse.

        The Resource Type of the resource  # noqa: E501

        :param type: The type of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this ActiveResourceResponse.  # noqa: E501

        The time the resource was last provisioned as part of a deployment.  # noqa: E501

        :return: The updated_at of this ActiveResourceResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActiveResourceResponse.

        The time the resource was last provisioned as part of a deployment.  # noqa: E501

        :param updated_at: The updated_at of this ActiveResourceResponse.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActiveResourceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveResourceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
