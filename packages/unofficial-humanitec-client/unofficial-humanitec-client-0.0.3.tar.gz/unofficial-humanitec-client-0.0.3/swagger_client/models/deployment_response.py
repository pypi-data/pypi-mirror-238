# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_at': 'str',
        'created_by': 'str',
        'delta_id': 'str',
        'env_id': 'str',
        'export_file': 'str',
        'export_status': 'str',
        'from_id': 'str',
        'id': 'str',
        'set_id': 'str',
        'status': 'str',
        'status_changed_at': 'str',
        'value_set_version_id': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'delta_id': 'delta_id',
        'env_id': 'env_id',
        'export_file': 'export_file',
        'export_status': 'export_status',
        'from_id': 'from_id',
        'id': 'id',
        'set_id': 'set_id',
        'status': 'status',
        'status_changed_at': 'status_changed_at',
        'value_set_version_id': 'value_set_version_id'
    }

    def __init__(self, comment=None, created_at=None, created_by=None, delta_id=None, env_id=None, export_file=None, export_status=None, from_id=None, id=None, set_id=None, status=None, status_changed_at=None, value_set_version_id=None):  # noqa: E501
        """DeploymentResponse - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._created_at = None
        self._created_by = None
        self._delta_id = None
        self._env_id = None
        self._export_file = None
        self._export_status = None
        self._from_id = None
        self._id = None
        self._set_id = None
        self._status = None
        self._status_changed_at = None
        self._value_set_version_id = None
        self.discriminator = None
        self.comment = comment
        self.created_at = created_at
        self.created_by = created_by
        if delta_id is not None:
            self.delta_id = delta_id
        self.env_id = env_id
        self.export_file = export_file
        self.export_status = export_status
        self.from_id = from_id
        self.id = id
        self.set_id = set_id
        self.status = status
        self.status_changed_at = status_changed_at
        if value_set_version_id is not None:
            self.value_set_version_id = value_set_version_id

    @property
    def comment(self):
        """Gets the comment of this DeploymentResponse.  # noqa: E501

        An optional comment to help communicate the purpose of the Deployment.  # noqa: E501

        :return: The comment of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DeploymentResponse.

        An optional comment to help communicate the purpose of the Deployment.  # noqa: E501

        :param comment: The comment of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this DeploymentResponse.  # noqa: E501

        The Timestamp of when the Deployment was initiated.  # noqa: E501

        :return: The created_at of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeploymentResponse.

        The Timestamp of when the Deployment was initiated.  # noqa: E501

        :param created_at: The created_at of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this DeploymentResponse.  # noqa: E501

        The user who initiated the Deployment.  # noqa: E501

        :return: The created_by of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DeploymentResponse.

        The user who initiated the Deployment.  # noqa: E501

        :param created_by: The created_by of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def delta_id(self):
        """Gets the delta_id of this DeploymentResponse.  # noqa: E501

        ID of the Deployment Delta describing the changes to the current Environment for this Deployment.  # noqa: E501

        :return: The delta_id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._delta_id

    @delta_id.setter
    def delta_id(self, delta_id):
        """Sets the delta_id of this DeploymentResponse.

        ID of the Deployment Delta describing the changes to the current Environment for this Deployment.  # noqa: E501

        :param delta_id: The delta_id of this DeploymentResponse.  # noqa: E501
        :type: str
        """

        self._delta_id = delta_id

    @property
    def env_id(self):
        """Gets the env_id of this DeploymentResponse.  # noqa: E501

        The Environment where the Deployment occurred.  # noqa: E501

        :return: The env_id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """Sets the env_id of this DeploymentResponse.

        The Environment where the Deployment occurred.  # noqa: E501

        :param env_id: The env_id of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if env_id is None:
            raise ValueError("Invalid value for `env_id`, must not be `None`")  # noqa: E501

        self._env_id = env_id

    @property
    def export_file(self):
        """Gets the export_file of this DeploymentResponse.  # noqa: E501


        :return: The export_file of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_file

    @export_file.setter
    def export_file(self, export_file):
        """Sets the export_file of this DeploymentResponse.


        :param export_file: The export_file of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if export_file is None:
            raise ValueError("Invalid value for `export_file`, must not be `None`")  # noqa: E501

        self._export_file = export_file

    @property
    def export_status(self):
        """Gets the export_status of this DeploymentResponse.  # noqa: E501


        :return: The export_status of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_status

    @export_status.setter
    def export_status(self, export_status):
        """Sets the export_status of this DeploymentResponse.


        :param export_status: The export_status of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if export_status is None:
            raise ValueError("Invalid value for `export_status`, must not be `None`")  # noqa: E501

        self._export_status = export_status

    @property
    def from_id(self):
        """Gets the from_id of this DeploymentResponse.  # noqa: E501

        The ID of the Deployment that this Deployment was based on.  # noqa: E501

        :return: The from_id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this DeploymentResponse.

        The ID of the Deployment that this Deployment was based on.  # noqa: E501

        :param from_id: The from_id of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if from_id is None:
            raise ValueError("Invalid value for `from_id`, must not be `None`")  # noqa: E501

        self._from_id = from_id

    @property
    def id(self):
        """Gets the id of this DeploymentResponse.  # noqa: E501

        The ID of the Deployment.  # noqa: E501

        :return: The id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentResponse.

        The ID of the Deployment.  # noqa: E501

        :param id: The id of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def set_id(self):
        """Gets the set_id of this DeploymentResponse.  # noqa: E501

        ID of the Deployment Set describing the state of the Environment after Deployment.  # noqa: E501

        :return: The set_id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._set_id

    @set_id.setter
    def set_id(self, set_id):
        """Sets the set_id of this DeploymentResponse.

        ID of the Deployment Set describing the state of the Environment after Deployment.  # noqa: E501

        :param set_id: The set_id of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if set_id is None:
            raise ValueError("Invalid value for `set_id`, must not be `None`")  # noqa: E501

        self._set_id = set_id

    @property
    def status(self):
        """Gets the status of this DeploymentResponse.  # noqa: E501

        The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.  # noqa: E501

        :return: The status of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentResponse.

        The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.  # noqa: E501

        :param status: The status of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_changed_at(self):
        """Gets the status_changed_at of this DeploymentResponse.  # noqa: E501

        The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.  # noqa: E501

        :return: The status_changed_at of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_changed_at

    @status_changed_at.setter
    def status_changed_at(self, status_changed_at):
        """Sets the status_changed_at of this DeploymentResponse.

        The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.  # noqa: E501

        :param status_changed_at: The status_changed_at of this DeploymentResponse.  # noqa: E501
        :type: str
        """
        if status_changed_at is None:
            raise ValueError("Invalid value for `status_changed_at`, must not be `None`")  # noqa: E501

        self._status_changed_at = status_changed_at

    @property
    def value_set_version_id(self):
        """Gets the value_set_version_id of this DeploymentResponse.  # noqa: E501

        ID of the Value Set Version describe the values to be used for this Deployment.  # noqa: E501

        :return: The value_set_version_id of this DeploymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._value_set_version_id

    @value_set_version_id.setter
    def value_set_version_id(self, value_set_version_id):
        """Sets the value_set_version_id of this DeploymentResponse.

        ID of the Value Set Version describe the values to be used for this Deployment.  # noqa: E501

        :param value_set_version_id: The value_set_version_id of this DeploymentResponse.  # noqa: E501
        :type: str
        """

        self._value_set_version_id = value_set_version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
