# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeBodyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'criteria_id': 'str',
        'def_id': 'str',
        'depends_on': 'list[str]',
        'driver': 'dict(str, object)',
        'driver_type': 'str',
        'guresid': 'str',
        'id': 'str',
        'resource': 'dict(str, object)',
        'resource_schema': 'dict(str, object)',
        'target': 'str',
        'type': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'criteria_id': 'criteria_id',
        'def_id': 'def_id',
        'depends_on': 'depends_on',
        'driver': 'driver',
        'driver_type': 'driver_type',
        'guresid': 'guresid',
        'id': 'id',
        'resource': 'resource',
        'resource_schema': 'resource_schema',
        'target': 'target',
        'type': 'type'
    }

    def __init__(self, _class=None, criteria_id=None, def_id=None, depends_on=None, driver=None, driver_type=None, guresid=None, id=None, resource=None, resource_schema=None, target=None, type=None):  # noqa: E501
        """NodeBodyResponse - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._criteria_id = None
        self._def_id = None
        self._depends_on = None
        self._driver = None
        self._driver_type = None
        self._guresid = None
        self._id = None
        self._resource = None
        self._resource_schema = None
        self._target = None
        self._type = None
        self.discriminator = None
        self._class = _class
        self.criteria_id = criteria_id
        self.def_id = def_id
        self.depends_on = depends_on
        self.driver = driver
        self.driver_type = driver_type
        self.guresid = guresid
        self.id = id
        self.resource = resource
        self.resource_schema = resource_schema
        if target is not None:
            self.target = target
        self.type = type

    @property
    def _class(self):
        """Gets the _class of this NodeBodyResponse.  # noqa: E501


        :return: The _class of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this NodeBodyResponse.


        :param _class: The _class of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def criteria_id(self):
        """Gets the criteria_id of this NodeBodyResponse.  # noqa: E501


        :return: The criteria_id of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._criteria_id

    @criteria_id.setter
    def criteria_id(self, criteria_id):
        """Sets the criteria_id of this NodeBodyResponse.


        :param criteria_id: The criteria_id of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if criteria_id is None:
            raise ValueError("Invalid value for `criteria_id`, must not be `None`")  # noqa: E501

        self._criteria_id = criteria_id

    @property
    def def_id(self):
        """Gets the def_id of this NodeBodyResponse.  # noqa: E501


        :return: The def_id of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this NodeBodyResponse.


        :param def_id: The def_id of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if def_id is None:
            raise ValueError("Invalid value for `def_id`, must not be `None`")  # noqa: E501

        self._def_id = def_id

    @property
    def depends_on(self):
        """Gets the depends_on of this NodeBodyResponse.  # noqa: E501


        :return: The depends_on of this NodeBodyResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this NodeBodyResponse.


        :param depends_on: The depends_on of this NodeBodyResponse.  # noqa: E501
        :type: list[str]
        """
        if depends_on is None:
            raise ValueError("Invalid value for `depends_on`, must not be `None`")  # noqa: E501

        self._depends_on = depends_on

    @property
    def driver(self):
        """Gets the driver of this NodeBodyResponse.  # noqa: E501


        :return: The driver of this NodeBodyResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this NodeBodyResponse.


        :param driver: The driver of this NodeBodyResponse.  # noqa: E501
        :type: dict(str, object)
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def driver_type(self):
        """Gets the driver_type of this NodeBodyResponse.  # noqa: E501


        :return: The driver_type of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._driver_type

    @driver_type.setter
    def driver_type(self, driver_type):
        """Sets the driver_type of this NodeBodyResponse.


        :param driver_type: The driver_type of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if driver_type is None:
            raise ValueError("Invalid value for `driver_type`, must not be `None`")  # noqa: E501

        self._driver_type = driver_type

    @property
    def guresid(self):
        """Gets the guresid of this NodeBodyResponse.  # noqa: E501


        :return: The guresid of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._guresid

    @guresid.setter
    def guresid(self, guresid):
        """Sets the guresid of this NodeBodyResponse.


        :param guresid: The guresid of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if guresid is None:
            raise ValueError("Invalid value for `guresid`, must not be `None`")  # noqa: E501

        self._guresid = guresid

    @property
    def id(self):
        """Gets the id of this NodeBodyResponse.  # noqa: E501


        :return: The id of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeBodyResponse.


        :param id: The id of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def resource(self):
        """Gets the resource of this NodeBodyResponse.  # noqa: E501


        :return: The resource of this NodeBodyResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this NodeBodyResponse.


        :param resource: The resource of this NodeBodyResponse.  # noqa: E501
        :type: dict(str, object)
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def resource_schema(self):
        """Gets the resource_schema of this NodeBodyResponse.  # noqa: E501


        :return: The resource_schema of this NodeBodyResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._resource_schema

    @resource_schema.setter
    def resource_schema(self, resource_schema):
        """Sets the resource_schema of this NodeBodyResponse.


        :param resource_schema: The resource_schema of this NodeBodyResponse.  # noqa: E501
        :type: dict(str, object)
        """
        if resource_schema is None:
            raise ValueError("Invalid value for `resource_schema`, must not be `None`")  # noqa: E501

        self._resource_schema = resource_schema

    @property
    def target(self):
        """Gets the target of this NodeBodyResponse.  # noqa: E501


        :return: The target of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NodeBodyResponse.


        :param target: The target of this NodeBodyResponse.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this NodeBodyResponse.  # noqa: E501


        :return: The type of this NodeBodyResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeBodyResponse.


        :param type: The type of this NodeBodyResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeBodyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeBodyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
