# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApprovalRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'app_id': 'str',
        'pipeline_id': 'str',
        'run_id': 'str',
        'job_id': 'str',
        'env_id': 'str',
        'message': 'str',
        'created_at': 'datetime',
        'status': 'str',
        'approved_by': 'str',
        'approved_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'app_id': 'app_id',
        'pipeline_id': 'pipeline_id',
        'run_id': 'run_id',
        'job_id': 'job_id',
        'env_id': 'env_id',
        'message': 'message',
        'created_at': 'created_at',
        'status': 'status',
        'approved_by': 'approved_by',
        'approved_at': 'approved_at'
    }

    def __init__(self, id=None, org_id=None, app_id=None, pipeline_id=None, run_id=None, job_id=None, env_id=None, message=None, created_at=None, status=None, approved_by=None, approved_at=None):  # noqa: E501
        """ApprovalRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._org_id = None
        self._app_id = None
        self._pipeline_id = None
        self._run_id = None
        self._job_id = None
        self._env_id = None
        self._message = None
        self._created_at = None
        self._status = None
        self._approved_by = None
        self._approved_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if app_id is not None:
            self.app_id = app_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if run_id is not None:
            self.run_id = run_id
        if job_id is not None:
            self.job_id = job_id
        if env_id is not None:
            self.env_id = env_id
        if message is not None:
            self.message = message
        if created_at is not None:
            self.created_at = created_at
        if status is not None:
            self.status = status
        if approved_by is not None:
            self.approved_by = approved_by
        if approved_at is not None:
            self.approved_at = approved_at

    @property
    def id(self):
        """Gets the id of this ApprovalRequest.  # noqa: E501

        The id of the approval object.  # noqa: E501

        :return: The id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApprovalRequest.

        The id of the approval object.  # noqa: E501

        :param id: The id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this ApprovalRequest.  # noqa: E501

        The id of the Organization.  # noqa: E501

        :return: The org_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ApprovalRequest.

        The id of the Organization.  # noqa: E501

        :param org_id: The org_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def app_id(self):
        """Gets the app_id of this ApprovalRequest.  # noqa: E501

        The id of the Application.  # noqa: E501

        :return: The app_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ApprovalRequest.

        The id of the Application.  # noqa: E501

        :param app_id: The app_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this ApprovalRequest.  # noqa: E501

        The id of the Pipeline.  # noqa: E501

        :return: The pipeline_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this ApprovalRequest.

        The id of the Pipeline.  # noqa: E501

        :param pipeline_id: The pipeline_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def run_id(self):
        """Gets the run_id of this ApprovalRequest.  # noqa: E501

        The id of the Pipeline's Run.  # noqa: E501

        :return: The run_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ApprovalRequest.

        The id of the Pipeline's Run.  # noqa: E501

        :param run_id: The run_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def job_id(self):
        """Gets the job_id of this ApprovalRequest.  # noqa: E501

        The id of the Run's Job.  # noqa: E501

        :return: The job_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ApprovalRequest.

        The id of the Run's Job.  # noqa: E501

        :param job_id: The job_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def env_id(self):
        """Gets the env_id of this ApprovalRequest.  # noqa: E501

        The environment for which the approver needs to have deploy permission to approve the job.  # noqa: E501

        :return: The env_id of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """Sets the env_id of this ApprovalRequest.

        The environment for which the approver needs to have deploy permission to approve the job.  # noqa: E501

        :param env_id: The env_id of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._env_id = env_id

    @property
    def message(self):
        """Gets the message of this ApprovalRequest.  # noqa: E501

        A human-readable message indicating the reason for approval.  # noqa: E501

        :return: The message of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApprovalRequest.

        A human-readable message indicating the reason for approval.  # noqa: E501

        :param message: The message of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def created_at(self):
        """Gets the created_at of this ApprovalRequest.  # noqa: E501

        The date and time when the approval request was created.  # noqa: E501

        :return: The created_at of this ApprovalRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApprovalRequest.

        The date and time when the approval request was created.  # noqa: E501

        :param created_at: The created_at of this ApprovalRequest.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this ApprovalRequest.  # noqa: E501

        The current status of the approval request.  # noqa: E501

        :return: The status of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApprovalRequest.

        The current status of the approval request.  # noqa: E501

        :param status: The status of this ApprovalRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["waiting", "approved", "denied", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def approved_by(self):
        """Gets the approved_by of this ApprovalRequest.  # noqa: E501

        The user who approved or denied the request.  # noqa: E501

        :return: The approved_by of this ApprovalRequest.  # noqa: E501
        :rtype: str
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by):
        """Sets the approved_by of this ApprovalRequest.

        The user who approved or denied the request.  # noqa: E501

        :param approved_by: The approved_by of this ApprovalRequest.  # noqa: E501
        :type: str
        """

        self._approved_by = approved_by

    @property
    def approved_at(self):
        """Gets the approved_at of this ApprovalRequest.  # noqa: E501

        The date and time when the request was approved or denied.  # noqa: E501

        :return: The approved_at of this ApprovalRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this ApprovalRequest.

        The date and time when the request was approved or denied.  # noqa: E501

        :param approved_at: The approved_at of this ApprovalRequest.  # noqa: E501
        :type: datetime
        """

        self._approved_at = approved_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApprovalRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApprovalRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
