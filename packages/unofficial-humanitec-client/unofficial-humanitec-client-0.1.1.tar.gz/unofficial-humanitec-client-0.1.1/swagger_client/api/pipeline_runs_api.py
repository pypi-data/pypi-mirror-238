# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PipelineRunsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Cancel a Run within an Pipeline.  # noqa: E501

        Attempts to cancel the specified Run. If the Run is in a queued state, this cancellation will be applied immediately. If the Run is executing, the cancellation will be stored and will be resolved by the next Job or Step that supports in-flight cancellation. Runs that are in any other state, are not cancellable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.cancel_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.cancel_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def cancel_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Cancel a Run within an Pipeline.  # noqa: E501

        Attempts to cancel the specified Run. If the Run is in a queued state, this cancellation will be applied immediately. If the Run is executing, the cancellation will be stored and will be resolved by the next Job or Step that supports in-flight cancellation. Runs that are in any other state, are not cancellable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "if_match",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `cancel_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/cancel",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_pipeline_run(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Create a run within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_run(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunCreateRequest body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_pipeline_run_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_pipeline_run_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def create_pipeline_run_with_http_info(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Create a run within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_run_with_http_info(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunCreateRequest body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "pipeline_id",
            "idempotency_key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `create_pipeline_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "idempotency_key" in params:
            header_params["Idempotency-Key"] = params["idempotency_key"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Deleting a completed Run within a Pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def delete_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Deleting a completed Run within a Pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "if_match",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `delete_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Get a run within an pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def get_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Get a run within an pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "pipeline_id", "run_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `get_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_run_job(
        self, org_id, app_id, pipeline_id, run_id, job_id, **kwargs
    ):  # noqa: E501
        """List the details of a Job including Step information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_job(org_id, app_id, pipeline_id, run_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :return: RunJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_run_job_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_run_job_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, **kwargs
            )  # noqa: E501
            return data

    def get_run_job_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, **kwargs
    ):  # noqa: E501
        """List the details of a Job including Step information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_job_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :return: RunJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_job" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `get_run_job`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunJobResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipeline_runs(self, org_id, app_id, pipeline_id, **kwargs):  # noqa: E501
        """List runs within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipeline_runs_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipeline_runs_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipeline_runs_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """List runs within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "status",
            "completed",
            "created_after",
            "created_before",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_runs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipeline_runs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_pipeline_runs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_pipeline_runs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "completed" in params:
            query_params.append(("completed", params["completed"]))  # noqa: E501
        if "created_after" in params:
            query_params.append(
                ("created_after", params["created_after"])
            )  # noqa: E501
        if "created_before" in params:
            query_params.append(
                ("created_before", params["created_before"])
            )  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipeline_runs_by_org(self, org_id, **kwargs):  # noqa: E501
        """List all pipeline runs within the Org. This can be filtered by app, pipeline, and status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_by_org(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipeline_runs_by_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipeline_runs_by_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipeline_runs_by_org_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all pipeline runs within the Org. This can be filtered by app, pipeline, and status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_by_org_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app",
            "pipeline",
            "status",
            "completed",
            "created_after",
            "created_before",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_runs_by_org" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipeline_runs_by_org`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "app" in params:
            query_params.append(("app", params["app"]))  # noqa: E501
            collection_formats["app"] = "multi"  # noqa: E501
        if "pipeline" in params:
            query_params.append(("pipeline", params["pipeline"]))  # noqa: E501
            collection_formats["pipeline"] = "multi"  # noqa: E501
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "completed" in params:
            query_params.append(("completed", params["completed"]))  # noqa: E501
        if "created_after" in params:
            query_params.append(
                ("created_after", params["created_after"])
            )  # noqa: E501
        if "created_before" in params:
            query_params.append(
                ("created_before", params["created_before"])
            )  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/pipeline-runs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_run_job_step_logs(
        self, org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
    ):  # noqa: E501
        """Get a page of log output for a given step within a job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_job_step_logs(org_id, app_id, pipeline_id, run_id, job_id, step_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param int step_index: The index of the step within the Job (required)
        :param str page: The page token to request from
        :return: list[RunJobStepLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_run_job_step_logs_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_run_job_step_logs_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
            )  # noqa: E501
            return data

    def list_run_job_step_logs_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
    ):  # noqa: E501
        """Get a page of log output for a given step within a job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_job_step_logs_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, step_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param int step_index: The index of the step within the Job (required)
        :param str page: The page token to request from
        :return: list[RunJobStepLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
            "step_index",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_job_step_logs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'step_index' is set
        if "step_index" not in params or params["step_index"] is None:
            raise ValueError(
                "Missing the required parameter `step_index` when calling `list_run_job_step_logs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501
        if "step_index" in params:
            path_params["stepIndex"] = params["step_index"]  # noqa: E501

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/steps/{stepIndex}/logs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunJobStepLog]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_run_jobs(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """List the details of the jobs with in a pipeline run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_jobs(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param list[str] status: Optional filter by status.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunJobListResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_run_jobs_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_run_jobs_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def list_run_jobs_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """List the details of the jobs with in a pipeline run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_jobs_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param list[str] status: Optional filter by status.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunJobListResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "status",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_jobs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `list_run_jobs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunJobListResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def restart_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Restart a Run within an Pipeline by cloning it with the same trigger and inputs.  # noqa: E501

        Attempts to copy and restart the specified Run. The run must be in a completed state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.restart_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.restart_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def restart_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Restart a Run within an Pipeline by cloning it with the same trigger and inputs.  # noqa: E501

        Attempts to copy and restart the specified Run. The run must be in a completed state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "idempotency_key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `restart_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "idempotency_key" in params:
            header_params["Idempotency-Key"] = params["idempotency_key"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/restart",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
