# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkloadProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_workload_profile_chart_version(
        self, file, org_id, **kwargs
    ):  # noqa: E501
        """Add new Workload Profile Chart Version  # noqa: E501

        Creates a Workload Profile Chart Version from the uploaded Helm chart. The name and version is retrieved from the chart's metadata (Charts.yaml file).  The request has content type `multipart/form-data` and the request body includes one part:  1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.  Request body example:   Content-Type: multipart/form-data; boundary=----boundary  ----boundary  Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\"  Content-Type: application/x-gzip  [TGZ_DATA]  ----boundary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workload_profile_chart_version(file, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str org_id: The Organization ID (required)
        :return: WorkloadProfileChartVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_workload_profile_chart_version_with_http_info(
                file, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_workload_profile_chart_version_with_http_info(
                file, org_id, **kwargs
            )  # noqa: E501
            return data

    def create_workload_profile_chart_version_with_http_info(
        self, file, org_id, **kwargs
    ):  # noqa: E501
        """Add new Workload Profile Chart Version  # noqa: E501

        Creates a Workload Profile Chart Version from the uploaded Helm chart. The name and version is retrieved from the chart's metadata (Charts.yaml file).  The request has content type `multipart/form-data` and the request body includes one part:  1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.  Request body example:   Content-Type: multipart/form-data; boundary=----boundary  ----boundary  Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\"  Content-Type: application/x-gzip  [TGZ_DATA]  ----boundary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workload_profile_chart_version_with_http_info(file, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str org_id: The Organization ID (required)
        :return: WorkloadProfileChartVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["file", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workload_profile_chart_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'file' is set
        if "file" not in params or params["file"] is None:
            raise ValueError(
                "Missing the required parameter `file` when calling `create_workload_profile_chart_version`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_workload_profile_chart_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "file" in params:
            local_var_files["file"] = params["file"]  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profile-chart-versions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileChartVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_workload_profile_version(
        self, body, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Add new Version of the Workload Profile  # noqa: E501

               Creates a Workload Profile Version for the given Workload Profile.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.create_workload_profile_version(body, org_id, profile_qid, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileVersionRequest body: Workload profile version metadata.

        (required)
               :param str org_id: The Organization ID (required)
               :param str profile_qid: The Workload Profile ID. (required)
               :return: WorkloadProfileVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_workload_profile_version_with_http_info(
                body, org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_workload_profile_version_with_http_info(
                body, org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def create_workload_profile_version_with_http_info(
        self, body, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Add new Version of the Workload Profile  # noqa: E501

               Creates a Workload Profile Version for the given Workload Profile.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.create_workload_profile_version_with_http_info(body, org_id, profile_qid, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileVersionRequest body: Workload profile version metadata.

        (required)
               :param str org_id: The Organization ID (required)
               :param str profile_qid: The Workload Profile ID. (required)
               :return: WorkloadProfileVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workload_profile_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `create_workload_profile_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_latest_workload_profile_version(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Latest version of the given workload profile with optional constraint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_workload_profile_version(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :return: WorkloadProfileVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_latest_workload_profile_version_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_latest_workload_profile_version_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def get_latest_workload_profile_version_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Latest version of the given workload profile with optional constraint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_workload_profile_version_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :return: WorkloadProfileVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_workload_profile_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_latest_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `get_latest_workload_profile_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions/latest",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workload_profile_chart_versions(self, org_id, **kwargs):  # noqa: E501
        """Workload Profile Chart Versions for the given organization.  # noqa: E501

        Returns all Workload Profile Chart Versions for the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_chart_versions(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileChartVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workload_profile_chart_versions_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workload_profile_chart_versions_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def list_workload_profile_chart_versions_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """Workload Profile Chart Versions for the given organization.  # noqa: E501

        Returns all Workload Profile Chart Versions for the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_chart_versions_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileChartVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workload_profile_chart_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_workload_profile_chart_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profile-chart-versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileChartVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workload_profile_versions(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """List versions of the given workload profile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_versions(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workload_profile_versions_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workload_profile_versions_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def list_workload_profile_versions_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """List versions of the given workload profile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_versions_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workload_profile_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_workload_profile_versions`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `list_workload_profile_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_get(self, org_id, **kwargs):  # noqa: E501
        """List workload profiles available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List workload profiles available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create new Workload Profile  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_workload_profiles_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileRequest body: Workload profile details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: WorkloadProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create new Workload Profile  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_workload_profiles_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileRequest body: Workload profile details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: WorkloadProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_workload_profiles_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_id_versions_version_delete(
        self, org_id, profile_id, version, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_id_versions_version_delete(org_id, profile_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_id: The Workload profile ID.   (required)
        :param str version: The Version.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
                org_id, profile_id, version, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
                org_id, profile_id, version, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
        self, org_id, profile_id, version, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(org_id, profile_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_id: The Workload profile ID.   (required)
        :param str version: The Version.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_id_versions_version_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if "profile_id" not in params or params["profile_id"] is None:
            raise ValueError(
                "Missing the required parameter `profile_id` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if "version" not in params or params["version"] is None:
            raise ValueError(
                "Missing the required parameter `version` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_id" in params:
            path_params["profileId"] = params["profile_id"]  # noqa: E501
        if "version" in params:
            path_params["version"] = params["version"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileId}/versions/{version}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_qid_delete(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile  # noqa: E501

        This will also delete all versions of a workload profile.  It is not possible to delete profiles of other organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_delete(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The Workload profile ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile  # noqa: E501

        This will also delete all versions of a workload profile.  It is not possible to delete profiles of other organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The Workload profile ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_qid_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_qid_delete`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `orgs_org_id_workload_profiles_profile_qid_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_qid_get(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Get a Workload Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_get(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The fully qualified Workload ID. (If not a profile from the current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)   (required)
        :return: WorkloadProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Get a Workload Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The fully qualified Workload ID. (If not a profile from the current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)   (required)
        :return: WorkloadProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_qid_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_qid_get`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `orgs_org_id_workload_profiles_profile_qid_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
