# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DeploymentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """List errors that occurred in a Deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: list[DeploymentErrorResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """List errors that occurred in a Deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: list[DeploymentErrorResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "deploy_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if "deploy_id" not in params or params["deploy_id"] is None:
            raise ValueError(
                "Missing the required parameter `deploy_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "deploy_id" in params:
            path_params["deployId"] = params["deploy_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}/errors",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeploymentErrorResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """Get a specific Deployment.  # noqa: E501

        Gets a specific Deployment in an Application and an Environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: DeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """Get a specific Deployment.  # noqa: E501

        Gets a specific Deployment in an Application and an Environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: DeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "deploy_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if "deploy_id" not in params or params["deploy_id"] is None:
            raise ValueError(
                "Missing the required parameter `deploy_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "deploy_id" in params:
            path_params["deployId"] = params["deploy_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeploymentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Deployments in an Environment.  # noqa: E501

        List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[DeploymentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Deployments in an Environment.  # noqa: E501

        List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[DeploymentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeploymentResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_post(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Start a new Deployment.  # noqa: E501

               At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.  When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.  A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.  **NOTE:**  Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_post(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param DeploymentRequest body: The Delta describing the change to the Environment and a comment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: DeploymentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Start a new Deployment.  # noqa: E501

               At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.  When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.  A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.  **NOTE:**  Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param DeploymentRequest body: The Delta describing the change to the Environment and a comment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: DeploymentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeploymentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
