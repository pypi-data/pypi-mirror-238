# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PipelineApprovalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def approve_approval_request(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Approve the approval request  # noqa: E501

        Approve the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
            return data

    def approve_approval_request_with_http_info(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Approve the approval request  # noqa: E501

        Approve the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'app_id', 'pipeline_id', 'run_id', 'job_id', 'approval_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `approve_approval_request`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `approve_approval_request`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `approve_approval_request`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `approve_approval_request`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `approve_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if ('approval_id' not in params or
                params['approval_id'] is None):
            raise ValueError("Missing the required parameter `approval_id` when calling `approve_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in params:
            path_params['orgId'] = params['org_id']  # noqa: E501
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'pipeline_id' in params:
            path_params['pipelineId'] = params['pipeline_id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'approval_id' in params:
            path_params['approvalId'] = params['approval_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deny_approval_request(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Deny the approval request  # noqa: E501

        Deny the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deny_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deny_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
            return data

    def deny_approval_request_with_http_info(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Deny the approval request  # noqa: E501

        Deny the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'app_id', 'pipeline_id', 'run_id', 'job_id', 'approval_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deny_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `deny_approval_request`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `deny_approval_request`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `deny_approval_request`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `deny_approval_request`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `deny_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if ('approval_id' not in params or
                params['approval_id'] is None):
            raise ValueError("Missing the required parameter `approval_id` when calling `deny_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in params:
            path_params['orgId'] = params['org_id']  # noqa: E501
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'pipeline_id' in params:
            path_params['pipelineId'] = params['pipeline_id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'approval_id' in params:
            path_params['approvalId'] = params['approval_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}/deny', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_approval_request(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Get an approval request  # noqa: E501

        Get an approval request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs)  # noqa: E501
            return data

    def get_approval_request_with_http_info(self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs):  # noqa: E501
        """Get an approval request  # noqa: E501

        Get an approval request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'app_id', 'pipeline_id', 'run_id', 'job_id', 'approval_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if ('approval_id' not in params or
                params['approval_id'] is None):
            raise ValueError("Missing the required parameter `approval_id` when calling `get_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in params:
            path_params['orgId'] = params['org_id']  # noqa: E501
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'pipeline_id' in params:
            path_params['pipelineId'] = params['pipeline_id']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'approval_id' in params:
            path_params['approvalId'] = params['approval_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_approval_requests(self, org_id, app_id, **kwargs):  # noqa: E501
        """List of the approval requests  # noqa: E501

        List of the approval requests with in an app.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_approval_requests(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] run: An optional Pipeline Run ID.
        :param str status: Optional filter by status.
        :return: list[ApprovalRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_approval_requests_with_http_info(org_id, app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_approval_requests_with_http_info(org_id, app_id, **kwargs)  # noqa: E501
            return data

    def list_approval_requests_with_http_info(self, org_id, app_id, **kwargs):  # noqa: E501
        """List of the approval requests  # noqa: E501

        List of the approval requests with in an app.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_approval_requests_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] run: An optional Pipeline Run ID.
        :param str status: Optional filter by status.
        :return: list[ApprovalRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'app_id', 'per_page', 'page', 'pipeline', 'run', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_approval_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `list_approval_requests`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `list_approval_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in params:
            path_params['orgId'] = params['org_id']  # noqa: E501
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pipeline' in params:
            query_params.append(('pipeline', params['pipeline']))  # noqa: E501
            collection_formats['pipeline'] = 'multi'  # noqa: E501
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
            collection_formats['run'] = 'multi'  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{orgId}/apps/{appId}/approvals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApprovalRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
