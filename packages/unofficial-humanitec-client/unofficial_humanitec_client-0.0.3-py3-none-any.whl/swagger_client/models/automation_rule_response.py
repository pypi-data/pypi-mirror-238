# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomationRuleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'artefacts_filter': 'list[str]',
        'created_at': 'str',
        'exclude_artefacts_filter': 'bool',
        'exclude_images_filter': 'bool',
        'id': 'str',
        'images_filter': 'list[str]',
        'match': 'str',
        'match_ref': 'str',
        'type': 'str',
        'update_to': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'active': 'active',
        'artefacts_filter': 'artefacts_filter',
        'created_at': 'created_at',
        'exclude_artefacts_filter': 'exclude_artefacts_filter',
        'exclude_images_filter': 'exclude_images_filter',
        'id': 'id',
        'images_filter': 'images_filter',
        'match': 'match',
        'match_ref': 'match_ref',
        'type': 'type',
        'update_to': 'update_to',
        'updated_at': 'updated_at'
    }

    def __init__(self, active=None, artefacts_filter=None, created_at=None, exclude_artefacts_filter=None, exclude_images_filter=None, id=None, images_filter=None, match=None, match_ref=None, type=None, update_to=None, updated_at=None):  # noqa: E501
        """AutomationRuleResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._artefacts_filter = None
        self._created_at = None
        self._exclude_artefacts_filter = None
        self._exclude_images_filter = None
        self._id = None
        self._images_filter = None
        self._match = None
        self._match_ref = None
        self._type = None
        self._update_to = None
        self._updated_at = None
        self.discriminator = None
        self.active = active
        self.artefacts_filter = artefacts_filter
        self.created_at = created_at
        self.exclude_artefacts_filter = exclude_artefacts_filter
        self.exclude_images_filter = exclude_images_filter
        self.id = id
        self.images_filter = images_filter
        self.match = match
        self.match_ref = match_ref
        self.type = type
        self.update_to = update_to
        self.updated_at = updated_at

    @property
    def active(self):
        """Gets the active of this AutomationRuleResponse.  # noqa: E501

        Whether the rule will be processed or not.  # noqa: E501

        :return: The active of this AutomationRuleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AutomationRuleResponse.

        Whether the rule will be processed or not.  # noqa: E501

        :param active: The active of this AutomationRuleResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def artefacts_filter(self):
        """Gets the artefacts_filter of this AutomationRuleResponse.  # noqa: E501

        A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.  # noqa: E501

        :return: The artefacts_filter of this AutomationRuleResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._artefacts_filter

    @artefacts_filter.setter
    def artefacts_filter(self, artefacts_filter):
        """Sets the artefacts_filter of this AutomationRuleResponse.

        A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.  # noqa: E501

        :param artefacts_filter: The artefacts_filter of this AutomationRuleResponse.  # noqa: E501
        :type: list[str]
        """
        if artefacts_filter is None:
            raise ValueError("Invalid value for `artefacts_filter`, must not be `None`")  # noqa: E501

        self._artefacts_filter = artefacts_filter

    @property
    def created_at(self):
        """Gets the created_at of this AutomationRuleResponse.  # noqa: E501

        The timestamp in UTC of when the Automation Rule was created.  # noqa: E501

        :return: The created_at of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AutomationRuleResponse.

        The timestamp in UTC of when the Automation Rule was created.  # noqa: E501

        :param created_at: The created_at of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def exclude_artefacts_filter(self):
        """Gets the exclude_artefacts_filter of this AutomationRuleResponse.  # noqa: E501

        Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.  # noqa: E501

        :return: The exclude_artefacts_filter of this AutomationRuleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_artefacts_filter

    @exclude_artefacts_filter.setter
    def exclude_artefacts_filter(self, exclude_artefacts_filter):
        """Sets the exclude_artefacts_filter of this AutomationRuleResponse.

        Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.  # noqa: E501

        :param exclude_artefacts_filter: The exclude_artefacts_filter of this AutomationRuleResponse.  # noqa: E501
        :type: bool
        """
        if exclude_artefacts_filter is None:
            raise ValueError("Invalid value for `exclude_artefacts_filter`, must not be `None`")  # noqa: E501

        self._exclude_artefacts_filter = exclude_artefacts_filter

    @property
    def exclude_images_filter(self):
        """Gets the exclude_images_filter of this AutomationRuleResponse.  # noqa: E501

        DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.  # noqa: E501

        :return: The exclude_images_filter of this AutomationRuleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_images_filter

    @exclude_images_filter.setter
    def exclude_images_filter(self, exclude_images_filter):
        """Sets the exclude_images_filter of this AutomationRuleResponse.

        DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.  # noqa: E501

        :param exclude_images_filter: The exclude_images_filter of this AutomationRuleResponse.  # noqa: E501
        :type: bool
        """
        if exclude_images_filter is None:
            raise ValueError("Invalid value for `exclude_images_filter`, must not be `None`")  # noqa: E501

        self._exclude_images_filter = exclude_images_filter

    @property
    def id(self):
        """Gets the id of this AutomationRuleResponse.  # noqa: E501

        The unique ID for this rule.  # noqa: E501

        :return: The id of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomationRuleResponse.

        The unique ID for this rule.  # noqa: E501

        :param id: The id of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def images_filter(self):
        """Gets the images_filter of this AutomationRuleResponse.  # noqa: E501

        DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.  # noqa: E501

        :return: The images_filter of this AutomationRuleResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._images_filter

    @images_filter.setter
    def images_filter(self, images_filter):
        """Sets the images_filter of this AutomationRuleResponse.

        DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.  # noqa: E501

        :param images_filter: The images_filter of this AutomationRuleResponse.  # noqa: E501
        :type: list[str]
        """
        if images_filter is None:
            raise ValueError("Invalid value for `images_filter`, must not be `None`")  # noqa: E501

        self._images_filter = images_filter

    @property
    def match(self):
        """Gets the match of this AutomationRuleResponse.  # noqa: E501

        DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.  # noqa: E501

        :return: The match of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this AutomationRuleResponse.

        DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.  # noqa: E501

        :param match: The match of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")  # noqa: E501

        self._match = match

    @property
    def match_ref(self):
        """Gets the match_ref of this AutomationRuleResponse.  # noqa: E501

        A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.  # noqa: E501

        :return: The match_ref of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._match_ref

    @match_ref.setter
    def match_ref(self, match_ref):
        """Sets the match_ref of this AutomationRuleResponse.

        A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.  # noqa: E501

        :param match_ref: The match_ref of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if match_ref is None:
            raise ValueError("Invalid value for `match_ref`, must not be `None`")  # noqa: E501

        self._match_ref = match_ref

    @property
    def type(self):
        """Gets the type of this AutomationRuleResponse.  # noqa: E501

        Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `\"update\"`.  # noqa: E501

        :return: The type of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationRuleResponse.

        Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `\"update\"`.  # noqa: E501

        :param type: The type of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def update_to(self):
        """Gets the update_to of this AutomationRuleResponse.  # noqa: E501

        DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `\"branch\"` or `\"tag\"`.  # noqa: E501

        :return: The update_to of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_to

    @update_to.setter
    def update_to(self, update_to):
        """Sets the update_to of this AutomationRuleResponse.

        DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `\"branch\"` or `\"tag\"`.  # noqa: E501

        :param update_to: The update_to of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if update_to is None:
            raise ValueError("Invalid value for `update_to`, must not be `None`")  # noqa: E501

        self._update_to = update_to

    @property
    def updated_at(self):
        """Gets the updated_at of this AutomationRuleResponse.  # noqa: E501

        The timestamp in UTC of when the Automation Rule was updated.  # noqa: E501

        :return: The updated_at of this AutomationRuleResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AutomationRuleResponse.

        The timestamp in UTC of when the Automation Rule was updated.  # noqa: E501

        :param updated_at: The updated_at of this AutomationRuleResponse.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationRuleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationRuleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
