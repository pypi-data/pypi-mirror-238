# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.public_api import PublicApi  # noqa: E501
from swagger_client.rest import ApiException


class TestPublicApi(unittest.TestCase):
    """PublicApi unit test stubs"""

    def setUp(self):
        self.api = PublicApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_approve_approval_request(self):
        """Test case for approve_approval_request

        Approve the approval request  # noqa: E501
        """
        pass

    def test_cancel_run(self):
        """Test case for cancel_run

        Cancel a Run within an Pipeline.  # noqa: E501
        """
        pass

    def test_create_pipeline(self):
        """Test case for create_pipeline

        Create a Pipeline within an Application.  # noqa: E501
        """
        pass

    def test_create_pipeline_run(self):
        """Test case for create_pipeline_run

        Create a run within a pipeline.  # noqa: E501
        """
        pass

    def test_create_public_key(self):
        """Test case for create_public_key

        Associate a new RSA public key to an organization.  # noqa: E501
        """
        pass

    def test_create_workload_profile_chart_version(self):
        """Test case for create_workload_profile_chart_version

        Add new Workload Profile Chart Version  # noqa: E501
        """
        pass

    def test_create_workload_profile_version(self):
        """Test case for create_workload_profile_version

        Add new Version of the Workload Profile  # noqa: E501
        """
        pass

    def test_current_user_get(self):
        """Test case for current_user_get

        Gets the extended profile of the current user  # noqa: E501
        """
        pass

    def test_current_user_patch(self):
        """Test case for current_user_patch

        Updates the extended profile of the current user.  # noqa: E501
        """
        pass

    def test_delete_pipeline(self):
        """Test case for delete_pipeline

        Delete a pipeline within an application.  # noqa: E501
        """
        pass

    def test_delete_public_key(self):
        """Test case for delete_public_key

        Delete a public key associated to an organization.  # noqa: E501
        """
        pass

    def test_delete_run(self):
        """Test case for delete_run

        Deleting a completed Run within a Pipeline.  # noqa: E501
        """
        pass

    def test_deny_approval_request(self):
        """Test case for deny_approval_request

        Deny the approval request  # noqa: E501
        """
        pass

    def test_get_approval_request(self):
        """Test case for get_approval_request

        Get an approval request  # noqa: E501
        """
        pass

    def test_get_delta(self):
        """Test case for get_delta

        Fetch an existing Delta  # noqa: E501
        """
        pass

    def test_get_humanitec_public_keys(self):
        """Test case for get_humanitec_public_keys

        List all the public keys Humanitec shares with an organization.  # noqa: E501
        """
        pass

    def test_get_latest_pipeline_definition_schema(self):
        """Test case for get_latest_pipeline_definition_schema

        Gets the latest pipeline schema  # noqa: E501
        """
        pass

    def test_get_latest_workload_profile_version(self):
        """Test case for get_latest_workload_profile_version

        Latest version of the given workload profile with optional constraint.  # noqa: E501
        """
        pass

    def test_get_pipeline(self):
        """Test case for get_pipeline

        Get a Pipeline within an Application.  # noqa: E501
        """
        pass

    def test_get_pipeline_definition(self):
        """Test case for get_pipeline_definition

        Get a pipeline schema.  # noqa: E501
        """
        pass

    def test_get_public_key(self):
        """Test case for get_public_key

        Retrieve a single public key associated to an organization.  # noqa: E501
        """
        pass

    def test_get_public_keys(self):
        """Test case for get_public_keys

        List all public keys associated to an organization.  # noqa: E501
        """
        pass

    def test_get_run(self):
        """Test case for get_run

        Get a run within an pipeline.  # noqa: E501
        """
        pass

    def test_get_run_job(self):
        """Test case for get_run_job

        List the details of a Job including Step information  # noqa: E501
        """
        pass

    def test_get_sets(self):
        """Test case for get_sets

        Get all Deployment Sets  # noqa: E501
        """
        pass

    def test_list_approval_requests(self):
        """Test case for list_approval_requests

        List of the approval requests  # noqa: E501
        """
        pass

    def test_list_pipeline_runs(self):
        """Test case for list_pipeline_runs

        List runs within a pipeline.  # noqa: E501
        """
        pass

    def test_list_pipeline_runs_by_org(self):
        """Test case for list_pipeline_runs_by_org

        List all pipeline runs within the Org. This can be filtered by app, pipeline, and status.  # noqa: E501
        """
        pass

    def test_list_pipeline_versions(self):
        """Test case for list_pipeline_versions

        List all versions of the pipeline  # noqa: E501
        """
        pass

    def test_list_pipelines(self):
        """Test case for list_pipelines

        List Pipelines within an Application.  # noqa: E501
        """
        pass

    def test_list_pipelines_in_org(self):
        """Test case for list_pipelines_in_org

        List all Pipelines within an Organization. This can be filtered by Application.  # noqa: E501
        """
        pass

    def test_list_run_job_step_logs(self):
        """Test case for list_run_job_step_logs

        Get a page of log output for a given step within a job.  # noqa: E501
        """
        pass

    def test_list_run_jobs(self):
        """Test case for list_run_jobs

        List the details of the jobs with in a pipeline run.  # noqa: E501
        """
        pass

    def test_list_workload_profile_chart_versions(self):
        """Test case for list_workload_profile_chart_versions

        Workload Profile Chart Versions for the given organization.  # noqa: E501
        """
        pass

    def test_list_workload_profile_versions(self):
        """Test case for list_workload_profile_versions

        List versions of the given workload profile.  # noqa: E501
        """
        pass

    def test_orgs_get(self):
        """Test case for orgs_get

        List active organizations the user has access to.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_delete

        Delete an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put(self):
        """Test case for orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put

        Mark a Delta as \"archived\"  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put(self):
        """Test case for orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put

        Change the Environment of a Delta  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put(self):
        """Test case for orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put

        Change the name of a Delta  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_delta_id_patch(self):
        """Test case for orgs_org_id_apps_app_id_deltas_delta_id_patch

        Update an existing Delta  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_get(self):
        """Test case for orgs_org_id_apps_app_id_deltas_get

        List Deltas in an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_deltas_post(self):
        """Test case for orgs_org_id_apps_app_id_deltas_post

        Create a new Delta  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_delete

        Delete a specific Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get

        List errors that occurred in a Deployment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get

        Get a specific Deployment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_deploys_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_deploys_get

        List Deployments in an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_deploys_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_deploys_post

        Start a new Deployment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put

        Rebase to a different Deployment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_get

        Get a specific Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_resources_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_resources_get

        List Active Resources provisioned in an environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_resources_graph_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_resources_graph_post

        Lists the resource objects that hold the information needed to provision the resources specified in the request and the resources they depend on.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete

        Delete Active Resources.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_rules_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_rules_get

        List all Automation Rules in an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_rules_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_rules_post

        Create a new Automation Rule for an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete

        Delete Automation Rule from an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get

        Get a specific Automation Rule for an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put

        Update an existing Automation Rule for an Environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_runtime_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_runtime_get

        Get Runtime information about the environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put

        Pause / Resume an environment.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch

        Set number of replicas for an environment's modules.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get

        List Value Set Versions in an Environment of an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get

        Get a single Value Set Version in an Environment of an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post

        Purge the value of a specific Shared Value from the App Environment Version history.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post

        Restore a specific key from the Value Set Version in an Environment of an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post

        Restore a Value Set Version in an Environment of an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_delete(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_delete

        Delete all Shared Value for an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_get

        List Shared Values in an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_key_delete(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_key_delete

        Delete Shared Value for an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_key_patch(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_key_patch

        Update Shared Value for an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_key_put(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_key_put

        Update Shared Value for an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_env_id_values_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_env_id_values_post

        Create a Shared Value for an Environment  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_get(self):
        """Test case for orgs_org_id_apps_app_id_envs_get

        List all Environments.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_envs_post(self):
        """Test case for orgs_org_id_apps_app_id_envs_post

        Add a new Environment to an Application.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_get(self):
        """Test case for orgs_org_id_apps_app_id_get

        Get an existing Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_jobs_delete(self):
        """Test case for orgs_org_id_apps_app_id_jobs_delete

        Deletes all Jobs for the Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_runtime_get(self):
        """Test case for orgs_org_id_apps_app_id_runtime_get

        Get Runtime information about specific environments.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get(self):
        """Test case for orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get

        Get the difference between 2 Deployment Sets  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_sets_set_id_get(self):
        """Test case for orgs_org_id_apps_app_id_sets_set_id_get

        Get a Deployment Set  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_sets_set_id_post(self):
        """Test case for orgs_org_id_apps_app_id_sets_set_id_post

        Apply a Deployment Delta to a Deployment Set  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_users_get(self):
        """Test case for orgs_org_id_apps_app_id_users_get

        List Users with roles in an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_users_post(self):
        """Test case for orgs_org_id_apps_app_id_users_post

        Adds a User to an Application with a Role  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_users_user_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_users_user_id_delete

        Remove the role of a User on an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_users_user_id_get(self):
        """Test case for orgs_org_id_apps_app_id_users_user_id_get

        Get the role of a User on an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_users_user_id_patch(self):
        """Test case for orgs_org_id_apps_app_id_users_user_id_patch

        Update the role of a User on an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_value_set_versions_get(self):
        """Test case for orgs_org_id_apps_app_id_value_set_versions_get

        List Value Set Versions in the App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get(self):
        """Test case for orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get

        Get a single Value Set Version from the App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post(self):
        """Test case for orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post

        Purge the value of a specific Shared Value from the App Version history.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post(self):
        """Test case for orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post

        Restore a specific key from the Value Set Version in an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post(self):
        """Test case for orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post

        Restore a Value Set Version in an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_delete(self):
        """Test case for orgs_org_id_apps_app_id_values_delete

        Delete all Shared Value for an App  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_get(self):
        """Test case for orgs_org_id_apps_app_id_values_get

        List Shared Values in an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_key_delete(self):
        """Test case for orgs_org_id_apps_app_id_values_key_delete

        Delete Shared Value for an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_key_patch(self):
        """Test case for orgs_org_id_apps_app_id_values_key_patch

        Update Shared Value for an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_key_put(self):
        """Test case for orgs_org_id_apps_app_id_values_key_put

        Update Shared Value for an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_values_post(self):
        """Test case for orgs_org_id_apps_app_id_values_post

        Create a Shared Value for an Application  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_webhooks_get(self):
        """Test case for orgs_org_id_apps_app_id_webhooks_get

        List Webhooks  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_webhooks_job_id_delete(self):
        """Test case for orgs_org_id_apps_app_id_webhooks_job_id_delete

        Delete a Webhook  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_webhooks_job_id_get(self):
        """Test case for orgs_org_id_apps_app_id_webhooks_job_id_get

        Get a Webhook  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_webhooks_job_id_patch(self):
        """Test case for orgs_org_id_apps_app_id_webhooks_job_id_patch

        Update a Webhook  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_app_id_webhooks_post(self):
        """Test case for orgs_org_id_apps_app_id_webhooks_post

        Create a new Webhook  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_get(self):
        """Test case for orgs_org_id_apps_get

        List all Applications in an Organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_apps_post(self):
        """Test case for orgs_org_id_apps_post

        Add a new Application to an Organization  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefact_versions_artefact_version_id_get(self):
        """Test case for orgs_org_id_artefact_versions_artefact_version_id_get

        Get an Artefacts Versions.  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefact_versions_get(self):
        """Test case for orgs_org_id_artefact_versions_get

        List all Artefacts Versions.  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefact_versions_post(self):
        """Test case for orgs_org_id_artefact_versions_post

        Register a new Artefact Version with your organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefacts_artefact_id_delete(self):
        """Test case for orgs_org_id_artefacts_artefact_id_delete

        Delete Artefact and all related Artefact Versions  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefacts_artefact_id_versions_get(self):
        """Test case for orgs_org_id_artefacts_artefact_id_versions_get

        List all Artefact Versions of an Artefact.  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefacts_artefact_id_versions_version_id_patch(self):
        """Test case for orgs_org_id_artefacts_artefact_id_versions_version_id_patch

        Update Version of an Artefact.  # noqa: E501
        """
        pass

    def test_orgs_org_id_artefacts_get(self):
        """Test case for orgs_org_id_artefacts_get

        List all Artefacts.  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_id_delete(self):
        """Test case for orgs_org_id_env_types_env_type_id_delete

        Deletes an Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_id_get(self):
        """Test case for orgs_org_id_env_types_env_type_id_get

        Get an Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_users_post(self):
        """Test case for orgs_org_id_env_types_env_type_users_post

        Adds a User to an Environment Type with a Role  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_users_user_id_delete(self):
        """Test case for orgs_org_id_env_types_env_type_users_user_id_delete

        Remove the role of a User on an Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_users_user_id_get(self):
        """Test case for orgs_org_id_env_types_env_type_users_user_id_get

        Get the role of a User on an Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_env_type_users_user_id_patch(self):
        """Test case for orgs_org_id_env_types_env_type_users_user_id_patch

        Update the role of a User on an Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_get(self):
        """Test case for orgs_org_id_env_types_get

        List all Environment Types  # noqa: E501
        """
        pass

    def test_orgs_org_id_env_types_post(self):
        """Test case for orgs_org_id_env_types_post

        Add a new Environment Type  # noqa: E501
        """
        pass

    def test_orgs_org_id_events_get(self):
        """Test case for orgs_org_id_events_get

        List Events  # noqa: E501
        """
        pass

    def test_orgs_org_id_get(self):
        """Test case for orgs_org_id_get

        Get the specified Organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_images_get(self):
        """Test case for orgs_org_id_images_get

        List all Container Images  # noqa: E501
        """
        pass

    def test_orgs_org_id_images_image_id_builds_get(self):
        """Test case for orgs_org_id_images_image_id_builds_get

        Lists all the Builds of an Image  # noqa: E501
        """
        pass

    def test_orgs_org_id_images_image_id_builds_post(self):
        """Test case for orgs_org_id_images_image_id_builds_post

        Add a new Image Build  # noqa: E501
        """
        pass

    def test_orgs_org_id_images_image_id_get(self):
        """Test case for orgs_org_id_images_image_id_get

        Get a specific Image Object  # noqa: E501
        """
        pass

    def test_orgs_org_id_invitations_get(self):
        """Test case for orgs_org_id_invitations_get

        List the invites issued for the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_invitations_post(self):
        """Test case for orgs_org_id_invitations_post

        Invites a user to an Organization with a specified role.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_get(self):
        """Test case for orgs_org_id_registries_get

        Lists available registries for the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_post(self):
        """Test case for orgs_org_id_registries_post

        Creates a new registry record.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_reg_id_creds_get(self):
        """Test case for orgs_org_id_registries_reg_id_creds_get

        Returns current account credentials or secret details for the registry.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_reg_id_delete(self):
        """Test case for orgs_org_id_registries_reg_id_delete

        Deletes an existing registry record and all associated credentials and secrets.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_reg_id_get(self):
        """Test case for orgs_org_id_registries_reg_id_get

        Loads a registry record details.  # noqa: E501
        """
        pass

    def test_orgs_org_id_registries_reg_id_patch(self):
        """Test case for orgs_org_id_registries_reg_id_patch

        Updates (patches) an existing registry record.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_account_types_get(self):
        """Test case for orgs_org_id_resources_account_types_get

        List Resource Account Types available to the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_accounts_acc_id_delete(self):
        """Test case for orgs_org_id_resources_accounts_acc_id_delete

        Delete an unused Resource Account.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_accounts_acc_id_get(self):
        """Test case for orgs_org_id_resources_accounts_acc_id_get

        Get a Resource Account.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_accounts_acc_id_patch(self):
        """Test case for orgs_org_id_resources_accounts_acc_id_patch

        Update a Resource Account.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_accounts_get(self):
        """Test case for orgs_org_id_resources_accounts_get

        List Resource Accounts in the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_accounts_post(self):
        """Test case for orgs_org_id_resources_accounts_post

        Create a new Resource Account in the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete(self):
        """Test case for orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete

        Delete a Matching Criteria from a Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_criteria_post(self):
        """Test case for orgs_org_id_resources_defs_def_id_criteria_post

        Add a new Matching Criteria to a Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_delete(self):
        """Test case for orgs_org_id_resources_defs_def_id_delete

        Delete a Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_get(self):
        """Test case for orgs_org_id_resources_defs_def_id_get

        Get a specific Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_patch(self):
        """Test case for orgs_org_id_resources_defs_def_id_patch

        Update a Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_put(self):
        """Test case for orgs_org_id_resources_defs_def_id_put

        Update a Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_def_id_resources_get(self):
        """Test case for orgs_org_id_resources_defs_def_id_resources_get

        List Active Resources provisioned via a specific Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_get(self):
        """Test case for orgs_org_id_resources_defs_get

        List Resource Definitions.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_defs_post(self):
        """Test case for orgs_org_id_resources_defs_post

        Create a new Resource Definition.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_drivers_driver_id_delete(self):
        """Test case for orgs_org_id_resources_drivers_driver_id_delete

        Delete a Resources Driver.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_drivers_driver_id_get(self):
        """Test case for orgs_org_id_resources_drivers_driver_id_get

        Get a Resource Driver.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_drivers_driver_id_put(self):
        """Test case for orgs_org_id_resources_drivers_driver_id_put

        Update a Resource Driver.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_drivers_get(self):
        """Test case for orgs_org_id_resources_drivers_get

        List Resource Drivers.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_drivers_post(self):
        """Test case for orgs_org_id_resources_drivers_post

        Register a new Resource Driver.  # noqa: E501
        """
        pass

    def test_orgs_org_id_resources_types_get(self):
        """Test case for orgs_org_id_resources_types_get

        List Resource Types.  # noqa: E501
        """
        pass

    def test_orgs_org_id_secretstores_get(self):
        """Test case for orgs_org_id_secretstores_get

        Get list of Secret Stores for the given organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_secretstores_post(self):
        """Test case for orgs_org_id_secretstores_post

        Create a Secret Store for the given organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_secretstores_store_id_delete(self):
        """Test case for orgs_org_id_secretstores_store_id_delete

        Delete the Secret Store.  # noqa: E501
        """
        pass

    def test_orgs_org_id_secretstores_store_id_get(self):
        """Test case for orgs_org_id_secretstores_store_id_get

        Get the Secret Store.  # noqa: E501
        """
        pass

    def test_orgs_org_id_secretstores_store_id_patch(self):
        """Test case for orgs_org_id_secretstores_store_id_patch

        Update the Secret Store.  # noqa: E501
        """
        pass

    def test_orgs_org_id_users_get(self):
        """Test case for orgs_org_id_users_get

        List Users with roles in an Organization  # noqa: E501
        """
        pass

    def test_orgs_org_id_users_post(self):
        """Test case for orgs_org_id_users_post

        Creates a new service user.  # noqa: E501
        """
        pass

    def test_orgs_org_id_users_user_id_delete(self):
        """Test case for orgs_org_id_users_user_id_delete

        Remove the role of a User on an Organization  # noqa: E501
        """
        pass

    def test_orgs_org_id_users_user_id_get(self):
        """Test case for orgs_org_id_users_user_id_get

        Get the role of a User on an Organization  # noqa: E501
        """
        pass

    def test_orgs_org_id_users_user_id_patch(self):
        """Test case for orgs_org_id_users_user_id_patch

        Update the role of a User on an Organization  # noqa: E501
        """
        pass

    def test_orgs_org_id_workload_profiles_get(self):
        """Test case for orgs_org_id_workload_profiles_get

        List workload profiles available to the organization.  # noqa: E501
        """
        pass

    def test_orgs_org_id_workload_profiles_post(self):
        """Test case for orgs_org_id_workload_profiles_post

        Create new Workload Profile  # noqa: E501
        """
        pass

    def test_orgs_org_id_workload_profiles_profile_id_versions_version_delete(self):
        """Test case for orgs_org_id_workload_profiles_profile_id_versions_version_delete

        Delete a Workload Profile Version  # noqa: E501
        """
        pass

    def test_orgs_org_id_workload_profiles_profile_qid_delete(self):
        """Test case for orgs_org_id_workload_profiles_profile_qid_delete

        Delete a Workload Profile  # noqa: E501
        """
        pass

    def test_orgs_org_id_workload_profiles_profile_qid_get(self):
        """Test case for orgs_org_id_workload_profiles_profile_qid_get

        Get a Workload Profile  # noqa: E501
        """
        pass

    def test_put_delta(self):
        """Test case for put_delta

        Update an existing Delta  # noqa: E501
        """
        pass

    def test_restart_run(self):
        """Test case for restart_run

        Restart a Run within an Pipeline by cloning it with the same trigger and inputs.  # noqa: E501
        """
        pass

    def test_tokens_get(self):
        """Test case for tokens_get

        DEPRECATED  # noqa: E501
        """
        pass

    def test_tokens_token_id_delete(self):
        """Test case for tokens_token_id_delete

        DEPRECATED  # noqa: E501
        """
        pass

    def test_update_pipeline(self):
        """Test case for update_pipeline

        update a Pipeline within an Application.  # noqa: E501
        """
        pass

    def test_users_me_get(self):
        """Test case for users_me_get

        DEPRECATED  # noqa: E501
        """
        pass

    def test_users_user_id_tokens_get(self):
        """Test case for users_user_id_tokens_get

        Lists tokens associated with a user  # noqa: E501
        """
        pass

    def test_users_user_id_tokens_post(self):
        """Test case for users_user_id_tokens_post

        Creates a new static token for a user.  # noqa: E501
        """
        pass

    def test_users_user_id_tokens_token_id_delete(self):
        """Test case for users_user_id_tokens_token_id_delete

        Deletes a specific token associated with a user  # noqa: E501
        """
        pass

    def test_users_user_id_tokens_token_id_get(self):
        """Test case for users_user_id_tokens_token_id_get

        Gets a specific token associated with a user  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
