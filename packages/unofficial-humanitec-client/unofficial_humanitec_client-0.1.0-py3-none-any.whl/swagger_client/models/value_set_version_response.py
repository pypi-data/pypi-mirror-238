# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValueSetVersionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change': 'JSONPatchesResponse',
        'comment': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'id': 'str',
        'result_of': 'ValueSetVersionResultOf',
        'source_value_set_version_id': 'str',
        'updated_at': 'datetime',
        'values': 'ValueSetResponse'
    }

    attribute_map = {
        'change': 'change',
        'comment': 'comment',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'id': 'id',
        'result_of': 'result_of',
        'source_value_set_version_id': 'source_value_set_version_id',
        'updated_at': 'updated_at',
        'values': 'values'
    }

    def __init__(self, change=None, comment=None, created_at=None, created_by=None, id=None, result_of=None, source_value_set_version_id=None, updated_at=None, values=None):  # noqa: E501
        """ValueSetVersionResponse - a model defined in Swagger"""  # noqa: E501
        self._change = None
        self._comment = None
        self._created_at = None
        self._created_by = None
        self._id = None
        self._result_of = None
        self._source_value_set_version_id = None
        self._updated_at = None
        self._values = None
        self.discriminator = None
        self.change = change
        self.comment = comment
        self.created_at = created_at
        self.created_by = created_by
        self.id = id
        self.result_of = result_of
        self.source_value_set_version_id = source_value_set_version_id
        self.updated_at = updated_at
        self.values = values

    @property
    def change(self):
        """Gets the change of this ValueSetVersionResponse.  # noqa: E501


        :return: The change of this ValueSetVersionResponse.  # noqa: E501
        :rtype: JSONPatchesResponse
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this ValueSetVersionResponse.


        :param change: The change of this ValueSetVersionResponse.  # noqa: E501
        :type: JSONPatchesResponse
        """
        if change is None:
            raise ValueError("Invalid value for `change`, must not be `None`")  # noqa: E501

        self._change = change

    @property
    def comment(self):
        """Gets the comment of this ValueSetVersionResponse.  # noqa: E501


        :return: The comment of this ValueSetVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ValueSetVersionResponse.


        :param comment: The comment of this ValueSetVersionResponse.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this ValueSetVersionResponse.  # noqa: E501


        :return: The created_at of this ValueSetVersionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ValueSetVersionResponse.


        :param created_at: The created_at of this ValueSetVersionResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ValueSetVersionResponse.  # noqa: E501


        :return: The created_by of this ValueSetVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ValueSetVersionResponse.


        :param created_by: The created_by of this ValueSetVersionResponse.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this ValueSetVersionResponse.  # noqa: E501


        :return: The id of this ValueSetVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ValueSetVersionResponse.


        :param id: The id of this ValueSetVersionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def result_of(self):
        """Gets the result_of of this ValueSetVersionResponse.  # noqa: E501


        :return: The result_of of this ValueSetVersionResponse.  # noqa: E501
        :rtype: ValueSetVersionResultOf
        """
        return self._result_of

    @result_of.setter
    def result_of(self, result_of):
        """Sets the result_of of this ValueSetVersionResponse.


        :param result_of: The result_of of this ValueSetVersionResponse.  # noqa: E501
        :type: ValueSetVersionResultOf
        """
        if result_of is None:
            raise ValueError("Invalid value for `result_of`, must not be `None`")  # noqa: E501

        self._result_of = result_of

    @property
    def source_value_set_version_id(self):
        """Gets the source_value_set_version_id of this ValueSetVersionResponse.  # noqa: E501


        :return: The source_value_set_version_id of this ValueSetVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_value_set_version_id

    @source_value_set_version_id.setter
    def source_value_set_version_id(self, source_value_set_version_id):
        """Sets the source_value_set_version_id of this ValueSetVersionResponse.


        :param source_value_set_version_id: The source_value_set_version_id of this ValueSetVersionResponse.  # noqa: E501
        :type: str
        """
        if source_value_set_version_id is None:
            raise ValueError("Invalid value for `source_value_set_version_id`, must not be `None`")  # noqa: E501

        self._source_value_set_version_id = source_value_set_version_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ValueSetVersionResponse.  # noqa: E501


        :return: The updated_at of this ValueSetVersionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ValueSetVersionResponse.


        :param updated_at: The updated_at of this ValueSetVersionResponse.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def values(self):
        """Gets the values of this ValueSetVersionResponse.  # noqa: E501


        :return: The values of this ValueSetVersionResponse.  # noqa: E501
        :rtype: ValueSetResponse
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ValueSetVersionResponse.


        :param values: The values of this ValueSetVersionResponse.  # noqa: E501
        :type: ValueSetResponse
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueSetVersionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueSetVersionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
