# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PublicApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def approve_approval_request(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Approve the approval request  # noqa: E501

        Approve the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.approve_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.approve_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
            return data

    def approve_approval_request_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Approve the approval request  # noqa: E501

        Approve the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
            "approval_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_approval_request" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `approve_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `approve_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `approve_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `approve_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `approve_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if "approval_id" not in params or params["approval_id"] is None:
            raise ValueError(
                "Missing the required parameter `approval_id` when calling `approve_approval_request`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501
        if "approval_id" in params:
            path_params["approvalId"] = params["approval_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}/approve",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApprovalRequest",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def cancel_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Cancel a Run within an Pipeline.  # noqa: E501

        Attempts to cancel the specified Run. If the Run is in a queued state, this cancellation will be applied immediately. If the Run is executing, the cancellation will be stored and will be resolved by the next Job or Step that supports in-flight cancellation. Runs that are in any other state, are not cancellable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.cancel_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.cancel_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def cancel_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Cancel a Run within an Pipeline.  # noqa: E501

        Attempts to cancel the specified Run. If the Run is in a queued state, this cancellation will be applied immediately. If the Run is executing, the cancellation will be stored and will be resolved by the next Job or Step that supports in-flight cancellation. Runs that are in any other state, are not cancellable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "if_match",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `cancel_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `cancel_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/cancel",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_pipeline(self, body, org_id, app_id, **kwargs):  # noqa: E501
        """Create a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline(body, org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_pipeline_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_pipeline_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def create_pipeline_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_with_http_info(body, org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `create_pipeline`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-yaml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Pipeline",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_pipeline_run(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Create a run within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_run(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunCreateRequest body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_pipeline_run_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_pipeline_run_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def create_pipeline_run_with_http_info(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Create a run within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_run_with_http_info(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunCreateRequest body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "pipeline_id",
            "idempotency_key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `create_pipeline_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `create_pipeline_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "idempotency_key" in params:
            header_params["Idempotency-Key"] = params["idempotency_key"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_public_key(self, body, org_id, **kwargs):  # noqa: E501
        """Associate a new RSA public key to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_public_key(body, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A pcks8 RSA public key PEM encoded (as the ones produced by openssl), whose module length is greater or equal than 4096 bits. It should be provided as a single line. This might be accomplished through the usage of `awk` bash tool: `awk -v ORS='\n' '1' public_key.pem` (required)
        :param str org_id: The organization ID. (required)
        :return: PublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_public_key_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_public_key_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def create_public_key_with_http_info(self, body, org_id, **kwargs):  # noqa: E501
        """Associate a new RSA public key to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_public_key_with_http_info(body, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A pcks8 RSA public key PEM encoded (as the ones produced by openssl), whose module length is greater or equal than 4096 bits. It should be provided as a single line. This might be accomplished through the usage of `awk` bash tool: `awk -v ORS='\n' '1' public_key.pem` (required)
        :param str org_id: The organization ID. (required)
        :return: PublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_public_key" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_public_key`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_public_key`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/keys",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PublicKey",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_workload_profile_chart_version(
        self, file, org_id, **kwargs
    ):  # noqa: E501
        """Add new Workload Profile Chart Version  # noqa: E501

        Creates a Workload Profile Chart Version from the uploaded Helm chart. The name and version is retrieved from the chart's metadata (Charts.yaml file).  The request has content type `multipart/form-data` and the request body includes one part:  1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.  Request body example:   Content-Type: multipart/form-data; boundary=----boundary  ----boundary  Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\"  Content-Type: application/x-gzip  [TGZ_DATA]  ----boundary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workload_profile_chart_version(file, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str org_id: The Organization ID (required)
        :return: WorkloadProfileChartVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_workload_profile_chart_version_with_http_info(
                file, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_workload_profile_chart_version_with_http_info(
                file, org_id, **kwargs
            )  # noqa: E501
            return data

    def create_workload_profile_chart_version_with_http_info(
        self, file, org_id, **kwargs
    ):  # noqa: E501
        """Add new Workload Profile Chart Version  # noqa: E501

        Creates a Workload Profile Chart Version from the uploaded Helm chart. The name and version is retrieved from the chart's metadata (Charts.yaml file).  The request has content type `multipart/form-data` and the request body includes one part:  1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.  Request body example:   Content-Type: multipart/form-data; boundary=----boundary  ----boundary  Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\"  Content-Type: application/x-gzip  [TGZ_DATA]  ----boundary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workload_profile_chart_version_with_http_info(file, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str org_id: The Organization ID (required)
        :return: WorkloadProfileChartVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["file", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workload_profile_chart_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'file' is set
        if "file" not in params or params["file"] is None:
            raise ValueError(
                "Missing the required parameter `file` when calling `create_workload_profile_chart_version`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_workload_profile_chart_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "file" in params:
            local_var_files["file"] = params["file"]  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profile-chart-versions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileChartVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_workload_profile_version(
        self, body, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Add new Version of the Workload Profile  # noqa: E501

               Creates a Workload Profile Version for the given Workload Profile.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.create_workload_profile_version(body, org_id, profile_qid, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileVersionRequest body: Workload profile version metadata.

        (required)
               :param str org_id: The Organization ID (required)
               :param str profile_qid: The Workload Profile ID. (required)
               :return: WorkloadProfileVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_workload_profile_version_with_http_info(
                body, org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_workload_profile_version_with_http_info(
                body, org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def create_workload_profile_version_with_http_info(
        self, body, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Add new Version of the Workload Profile  # noqa: E501

               Creates a Workload Profile Version for the given Workload Profile.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.create_workload_profile_version_with_http_info(body, org_id, profile_qid, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileVersionRequest body: Workload profile version metadata.

        (required)
               :param str org_id: The Organization ID (required)
               :param str profile_qid: The Workload Profile ID. (required)
               :return: WorkloadProfileVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workload_profile_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `create_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `create_workload_profile_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def current_user_get(self, **kwargs):  # noqa: E501
        """Gets the extended profile of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_user_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserProfileExtendedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.current_user_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.current_user_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def current_user_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the extended profile of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_user_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserProfileExtendedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method current_user_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/current-user",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserProfileExtendedResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def current_user_patch(self, body, **kwargs):  # noqa: E501
        """Updates the extended profile of the current user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_user_patch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserProfileExtendedRequest body: (required)
        :return: UserProfileExtendedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.current_user_patch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.current_user_patch_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def current_user_patch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Updates the extended profile of the current user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_user_patch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserProfileExtendedRequest body: (required)
        :return: UserProfileExtendedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method current_user_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `current_user_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/current-user",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserProfileExtendedResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_pipeline(self, org_id, app_id, pipeline_id, **kwargs):  # noqa: E501
        """Delete a pipeline within an application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_pipeline_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_pipeline_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def delete_pipeline_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Delete a pipeline within an application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "pipeline_id", "if_match"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `delete_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `delete_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `delete_pipeline`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_public_key(self, org_id, key_id, **kwargs):  # noqa: E501
        """Delete a public key associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_public_key(org_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str key_id: The public key ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_public_key_with_http_info(
                org_id, key_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_public_key_with_http_info(
                org_id, key_id, **kwargs
            )  # noqa: E501
            return data

    def delete_public_key_with_http_info(self, org_id, key_id, **kwargs):  # noqa: E501
        """Delete a public key associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_public_key_with_http_info(org_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str key_id: The public key ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "key_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_public_key" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `delete_public_key`"
            )  # noqa: E501
        # verify the required parameter 'key_id' is set
        if "key_id" not in params or params["key_id"] is None:
            raise ValueError(
                "Missing the required parameter `key_id` when calling `delete_public_key`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "key_id" in params:
            path_params["keyId"] = params["key_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/keys/{keyId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Deleting a completed Run within a Pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def delete_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Deleting a completed Run within a Pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "if_match",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `delete_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `delete_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def deny_approval_request(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Deny the approval request  # noqa: E501

        Deny the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.deny_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.deny_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
            return data

    def deny_approval_request_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Deny the approval request  # noqa: E501

        Deny the approval requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
            "approval_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deny_approval_request" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `deny_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `deny_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `deny_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `deny_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `deny_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if "approval_id" not in params or params["approval_id"] is None:
            raise ValueError(
                "Missing the required parameter `approval_id` when calling `deny_approval_request`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501
        if "approval_id" in params:
            path_params["approvalId"] = params["approval_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}/deny",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApprovalRequest",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_approval_request(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Get an approval request  # noqa: E501

        Get an approval request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_approval_request_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
            )  # noqa: E501
            return data

    def get_approval_request_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, approval_id, **kwargs
    ):  # noqa: E501
        """Get an approval request  # noqa: E501

        Get an approval request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param str approval_id: The Approval ID (required)
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
            "approval_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approval_request" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `get_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `get_approval_request`"
            )  # noqa: E501
        # verify the required parameter 'approval_id' is set
        if "approval_id" not in params or params["approval_id"] is None:
            raise ValueError(
                "Missing the required parameter `approval_id` when calling `get_approval_request`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501
        if "approval_id" in params:
            path_params["approvalId"] = params["approval_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/approvals/{approvalId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApprovalRequest",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_delta(self, org_id, app_id, delta_id, **kwargs):  # noqa: E501
        """Fetch an existing Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delta(org_id, app_id, delta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str delta_id: ID of the Delta to fetch.   (required)
        :return: DeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_delta_with_http_info(
                org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_delta_with_http_info(
                org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def get_delta_with_http_info(
        self, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Fetch an existing Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delta_with_http_info(org_id, app_id, delta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str delta_id: ID of the Delta to fetch.   (required)
        :return: DeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delta" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_delta`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_delta`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `get_delta`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeltaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_humanitec_public_keys(self, org_id, **kwargs):  # noqa: E501
        """List all the public keys Humanitec shares with an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_humanitec_public_keys(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param bool active: If set to true, the response includes only the active key, if set to false only non-active keys, otherwise both active and non-active keys.
        :return: list[HumanitecPublicKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_humanitec_public_keys_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_humanitec_public_keys_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def get_humanitec_public_keys_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all the public keys Humanitec shares with an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_humanitec_public_keys_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param bool active: If set to true, the response includes only the active key, if set to false only non-active keys, otherwise both active and non-active keys.
        :return: list[HumanitecPublicKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "active"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_humanitec_public_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_humanitec_public_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "active" in params:
            query_params.append(("active", params["active"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/humanitec-keys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[HumanitecPublicKey]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_latest_pipeline_definition_schema(self, org_id, **kwargs):  # noqa: E501
        """Gets the latest pipeline schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_pipeline_definition_schema(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_latest_pipeline_definition_schema_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_latest_pipeline_definition_schema_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def get_latest_pipeline_definition_schema_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """Gets the latest pipeline schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_pipeline_definition_schema_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_pipeline_definition_schema" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_latest_pipeline_definition_schema`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/pipeline-schemas/latest",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_latest_workload_profile_version(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Latest version of the given workload profile with optional constraint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_workload_profile_version(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :return: WorkloadProfileVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_latest_workload_profile_version_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_latest_workload_profile_version_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def get_latest_workload_profile_version_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Latest version of the given workload profile with optional constraint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_workload_profile_version_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :return: WorkloadProfileVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_workload_profile_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_latest_workload_profile_version`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `get_latest_workload_profile_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions/latest",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_pipeline(self, org_id, app_id, pipeline_id, **kwargs):  # noqa: E501
        """Get a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str version: An optional Pipeline Version ID.
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_pipeline_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_pipeline_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def get_pipeline_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Get a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str version: An optional Pipeline Version ID.
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "pipeline_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_pipeline`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Pipeline",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_pipeline_definition(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Get a pipeline schema.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_definition(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str version: An optional Pipeline Version ID.
        :param str accept:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_pipeline_definition_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_pipeline_definition_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def get_pipeline_definition_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """Get a pipeline schema.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_definition_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str version: An optional Pipeline Version ID.
        :param str accept:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "version",
            "accept",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_definition" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_pipeline_definition`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_pipeline_definition`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_pipeline_definition`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501

        header_params = {}
        if "accept" in params:
            header_params["Accept"] = params["accept"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/x.humanitec-pipelines-v1.0+yaml", "application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/schema",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_public_key(self, org_id, key_id, **kwargs):  # noqa: E501
        """Retrieve a single public key associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_key(org_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str key_id: The public key ID. (required)
        :return: PublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_public_key_with_http_info(
                org_id, key_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_public_key_with_http_info(
                org_id, key_id, **kwargs
            )  # noqa: E501
            return data

    def get_public_key_with_http_info(self, org_id, key_id, **kwargs):  # noqa: E501
        """Retrieve a single public key associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_key_with_http_info(org_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str key_id: The public key ID. (required)
        :return: PublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "key_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_key" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_public_key`"
            )  # noqa: E501
        # verify the required parameter 'key_id' is set
        if "key_id" not in params or params["key_id"] is None:
            raise ValueError(
                "Missing the required parameter `key_id` when calling `get_public_key`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "key_id" in params:
            path_params["keyId"] = params["key_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/keys/{keyId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PublicKey",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_public_keys(self, org_id, **kwargs):  # noqa: E501
        """List all public keys associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_keys(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str fingerprint: The fingerprint of the requested key. If a value is provided, the result will contain a single key, if any.
        :return: list[PublicKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_public_keys_with_http_info(org_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_keys_with_http_info(org_id, **kwargs)  # noqa: E501
            return data

    def get_public_keys_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all public keys associated to an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_keys_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str fingerprint: The fingerprint of the requested key. If a value is provided, the result will contain a single key, if any.
        :return: list[PublicKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "fingerprint"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_public_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "fingerprint" in params:
            query_params.append(("fingerprint", params["fingerprint"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/keys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[PublicKey]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Get a run within an pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def get_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Get a run within an pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "pipeline_id", "run_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `get_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_run_job(
        self, org_id, app_id, pipeline_id, run_id, job_id, **kwargs
    ):  # noqa: E501
        """List the details of a Job including Step information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_job(org_id, app_id, pipeline_id, run_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :return: RunJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_run_job_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_run_job_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, **kwargs
            )  # noqa: E501
            return data

    def get_run_job_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, **kwargs
    ):  # noqa: E501
        """List the details of a Job including Step information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_job_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :return: RunJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_job" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `get_run_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `get_run_job`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunJobResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_sets(self, org_id, app_id, **kwargs):  # noqa: E501
        """Get all Deployment Sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sets(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[SetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sets_with_http_info(org_id, app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sets_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def get_sets_with_http_info(self, org_id, app_id, **kwargs):  # noqa: E501
        """Get all Deployment Sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sets_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[SetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_sets`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_sets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/sets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[SetResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_approval_requests(self, org_id, app_id, **kwargs):  # noqa: E501
        """List of the approval requests  # noqa: E501

        List of the approval requests with in an app.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_approval_requests(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] run: An optional Pipeline Run ID.
        :param str status: Optional filter by status.
        :return: list[ApprovalRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_approval_requests_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_approval_requests_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def list_approval_requests_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List of the approval requests  # noqa: E501

        List of the approval requests with in an app.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_approval_requests_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] run: An optional Pipeline Run ID.
        :param str status: Optional filter by status.
        :return: list[ApprovalRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "per_page",
            "page",
            "pipeline",
            "run",
            "status",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_approval_requests" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_approval_requests`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_approval_requests`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "pipeline" in params:
            query_params.append(("pipeline", params["pipeline"]))  # noqa: E501
            collection_formats["pipeline"] = "multi"  # noqa: E501
        if "run" in params:
            query_params.append(("run", params["run"]))  # noqa: E501
            collection_formats["run"] = "multi"  # noqa: E501
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/approvals",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ApprovalRequest]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipeline_runs(self, org_id, app_id, pipeline_id, **kwargs):  # noqa: E501
        """List runs within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipeline_runs_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipeline_runs_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipeline_runs_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """List runs within a pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "status",
            "completed",
            "created_after",
            "created_before",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_runs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipeline_runs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_pipeline_runs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_pipeline_runs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "completed" in params:
            query_params.append(("completed", params["completed"]))  # noqa: E501
        if "created_after" in params:
            query_params.append(
                ("created_after", params["created_after"])
            )  # noqa: E501
        if "created_before" in params:
            query_params.append(
                ("created_before", params["created_before"])
            )  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipeline_runs_by_org(self, org_id, **kwargs):  # noqa: E501
        """List all pipeline runs within the Org. This can be filtered by app, pipeline, and status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_by_org(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipeline_runs_by_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipeline_runs_by_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipeline_runs_by_org_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all pipeline runs within the Org. This can be filtered by app, pipeline, and status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_by_org_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param list[str] pipeline: An optional list of Pipeline IDs.
        :param list[str] status: Optional filter by status.
        :param bool completed: Optional filer by completed or not.
        :param datetime created_after: Optional filter by creation after date time.
        :param datetime created_before: Optional filter by creation before date time
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app",
            "pipeline",
            "status",
            "completed",
            "created_after",
            "created_before",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_runs_by_org" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipeline_runs_by_org`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "app" in params:
            query_params.append(("app", params["app"]))  # noqa: E501
            collection_formats["app"] = "multi"  # noqa: E501
        if "pipeline" in params:
            query_params.append(("pipeline", params["pipeline"]))  # noqa: E501
            collection_formats["pipeline"] = "multi"  # noqa: E501
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "completed" in params:
            query_params.append(("completed", params["completed"]))  # noqa: E501
        if "created_after" in params:
            query_params.append(
                ("created_after", params["created_after"])
            )  # noqa: E501
        if "created_before" in params:
            query_params.append(
                ("created_before", params["created_before"])
            )  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/pipeline-runs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipeline_versions(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """List all versions of the pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_versions(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[PipelineVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipeline_versions_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipeline_versions_with_http_info(
                org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipeline_versions_with_http_info(
        self, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """List all versions of the pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_versions_with_http_info(org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[PipelineVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipeline_versions`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_pipeline_versions`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_pipeline_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[PipelineVersion]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipelines(self, org_id, app_id, **kwargs):  # noqa: E501
        """List Pipelines within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param str trigger: An optional filter by trigger type.
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipelines_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipelines_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipelines_with_http_info(self, org_id, app_id, **kwargs):  # noqa: E501
        """List Pipelines within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param str trigger: An optional filter by trigger type.
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "per_page", "page", "trigger"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipelines" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipelines`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_pipelines`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "trigger" in params:
            query_params.append(("trigger", params["trigger"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Pipeline]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pipelines_in_org(self, org_id, **kwargs):  # noqa: E501
        """List all Pipelines within an Organization. This can be filtered by Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines_in_org(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param str trigger: An optional filter by trigger type.
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pipelines_in_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_pipelines_in_org_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def list_pipelines_in_org_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all Pipelines within an Organization. This can be filtered by Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines_in_org_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param list[str] app: An optional list of Application IDs.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :param str trigger: An optional filter by trigger type.
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app", "per_page", "page", "trigger"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipelines_in_org" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_pipelines_in_org`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "app" in params:
            query_params.append(("app", params["app"]))  # noqa: E501
            collection_formats["app"] = "multi"  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "trigger" in params:
            query_params.append(("trigger", params["trigger"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/pipelines",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Pipeline]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_run_job_step_logs(
        self, org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
    ):  # noqa: E501
        """Get a page of log output for a given step within a job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_job_step_logs(org_id, app_id, pipeline_id, run_id, job_id, step_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param int step_index: The index of the step within the Job (required)
        :param str page: The page token to request from
        :return: list[RunJobStepLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_run_job_step_logs_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_run_job_step_logs_with_http_info(
                org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
            )  # noqa: E501
            return data

    def list_run_job_step_logs_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, job_id, step_index, **kwargs
    ):  # noqa: E501
        """Get a page of log output for a given step within a job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_job_step_logs_with_http_info(org_id, app_id, pipeline_id, run_id, job_id, step_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str job_id: The Job ID (required)
        :param int step_index: The index of the step within the Job (required)
        :param str page: The page token to request from
        :return: list[RunJobStepLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "job_id",
            "step_index",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_job_step_logs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `list_run_job_step_logs`"
            )  # noqa: E501
        # verify the required parameter 'step_index' is set
        if "step_index" not in params or params["step_index"] is None:
            raise ValueError(
                "Missing the required parameter `step_index` when calling `list_run_job_step_logs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501
        if "step_index" in params:
            path_params["stepIndex"] = params["step_index"]  # noqa: E501

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs/{jobId}/steps/{stepIndex}/logs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunJobStepLog]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_run_jobs(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """List the details of the jobs with in a pipeline run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_jobs(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param list[str] status: Optional filter by status.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunJobListResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_run_jobs_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_run_jobs_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def list_run_jobs_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """List the details of the jobs with in a pipeline run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_run_jobs_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param list[str] status: Optional filter by status.
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[RunJobListResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "status",
            "per_page",
            "page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_jobs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `list_run_jobs`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `list_run_jobs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RunJobListResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workload_profile_chart_versions(self, org_id, **kwargs):  # noqa: E501
        """Workload Profile Chart Versions for the given organization.  # noqa: E501

        Returns all Workload Profile Chart Versions for the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_chart_versions(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileChartVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workload_profile_chart_versions_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workload_profile_chart_versions_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def list_workload_profile_chart_versions_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """Workload Profile Chart Versions for the given organization.  # noqa: E501

        Returns all Workload Profile Chart Versions for the given organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_chart_versions_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileChartVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workload_profile_chart_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_workload_profile_chart_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profile-chart-versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileChartVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workload_profile_versions(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """List versions of the given workload profile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_versions(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workload_profile_versions_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workload_profile_versions_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def list_workload_profile_versions_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """List versions of the given workload profile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workload_profile_versions_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str profile_qid: The Workload Profile ID. (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workload_profile_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `list_workload_profile_versions`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `list_workload_profile_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}/versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_get(self, **kwargs):  # noqa: E501
        """List active organizations the user has access to.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrganizationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.orgs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def orgs_get_with_http_info(self, **kwargs):  # noqa: E501
        """List active organizations the user has access to.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrganizationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[OrganizationResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_delete(self, org_id, app_id, **kwargs):  # noqa: E501
        """Delete an Application  # noqa: E501

        Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.  _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_delete(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_delete_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Delete an Application  # noqa: E501

        Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.  _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_delete_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Mark a Delta as \"archived\"  # noqa: E501

               Archived Deltas are still accessible but can no longer be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: Either `true` or `false`.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Mark a Delta as \"archived\"  # noqa: E501

               Archived Deltas are still accessible but can no longer be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: Either `true` or `false`.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/archived",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the Environment of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new Environment ID. (NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the Environment of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new Environment ID. (NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/env_id",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the name of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new name.(NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the name of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new name.(NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/name",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_patch(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_patch(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param list[DeltaRequest] body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: DeltaResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param list[DeltaRequest] body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: DeltaResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeltaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Deltas in an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_deltas_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param bool archived: If true, return archived Deltas.
        :param str env: Only return Deltas associated with the specified Environment.
        :return: list[DeltaResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Deltas in an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_deltas_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param bool archived: If true, return archived Deltas.
        :param str env: Only return Deltas associated with the specified Environment.
        :return: list[DeltaResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "archived", "env"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501
        if "env" in params:
            query_params.append(("env", params["env"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeltaResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_post(body, org_id, app_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: A Deployment Delta to create.

        The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.

        NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :return: InlineResponse200
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_post_with_http_info(body, org_id, app_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: A Deployment Delta to create.

        The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.

        NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :return: InlineResponse200
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse200",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_delete(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Delete a specific Environment.  # noqa: E501

        Deletes a specific Environment in an Application.  Deleting an Environment will also delete the Deployment history of the Environment.  _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_delete(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_delete_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_env_id_delete_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_delete_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Delete a specific Environment.  # noqa: E501

        Deletes a specific Environment in an Application.  Deleting an Environment will also delete the Deployment history of the Environment.  _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_delete_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """List errors that occurred in a Deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: list[DeploymentErrorResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """List errors that occurred in a Deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get_with_http_info(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: list[DeploymentErrorResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "deploy_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if "deploy_id" not in params or params["deploy_id"] is None:
            raise ValueError(
                "Missing the required parameter `deploy_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_errors_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "deploy_id" in params:
            path_params["deployId"] = params["deploy_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}/errors",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeploymentErrorResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """Get a specific Deployment.  # noqa: E501

        Gets a specific Deployment in an Application and an Environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: DeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
                org_id, app_id, env_id, deploy_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(
        self, org_id, app_id, env_id, deploy_id, **kwargs
    ):  # noqa: E501
        """Get a specific Deployment.  # noqa: E501

        Gets a specific Deployment in an Application and an Environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get_with_http_info(org_id, app_id, env_id, deploy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str deploy_id: The Deployment ID.   (required)
        :return: DeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "deploy_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501
        # verify the required parameter 'deploy_id' is set
        if "deploy_id" not in params or params["deploy_id"] is None:
            raise ValueError(
                "Missing the required parameter `deploy_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_deploy_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "deploy_id" in params:
            path_params["deployId"] = params["deploy_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeploymentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Deployments in an Environment.  # noqa: E501

        List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[DeploymentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Deployments in an Environment.  # noqa: E501

        List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[DeploymentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeploymentResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_deploys_post(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Start a new Deployment.  # noqa: E501

               At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.  When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.  A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.  **NOTE:**  Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_post(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param DeploymentRequest body: The Delta describing the change to the Environment and a comment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: DeploymentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Start a new Deployment.  # noqa: E501

               At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.  When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.  A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.  **NOTE:**  Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_deploys_post_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param DeploymentRequest body: The Delta describing the change to the Environment and a comment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: DeploymentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_deploys_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_deploys_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeploymentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Rebase to a different Deployment.  # noqa: E501

               Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.  _Running code will only be affected on the next Deployment to the Environment._  Common use cases for rebasing an Environment:  * _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.  * _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The Deployment ID to rebase to.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Rebase to a different Deployment.  # noqa: E501

               Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.  _Running code will only be affected on the next Deployment to the Environment._  Common use cases for rebasing an Environment:  * _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.  * _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The Deployment ID to rebase to.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_from_deploy_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/from_deploy_id",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Get a specific Environment.  # noqa: E501

        Gets a specific Environment in an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: EnvironmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_env_id_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Get a specific Environment.  # noqa: E501

        Gets a specific Environment in an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: EnvironmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="EnvironmentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_resources_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_apps_app_id_envs_env_id_resources_get_with_http_info(
                    org_id, app_id, env_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_resources_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_resources_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_resources_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/resources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ActiveResourceResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_resources_graph_post(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Lists the resource objects that hold the information needed to provision the resources specified in the request and the resources they depend on.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_graph_post(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param list[ResourceProvisionRequestRequest] body: Resources to provision.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: list[NodeBodyResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_resources_graph_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_resources_graph_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_resources_graph_post_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Lists the resource objects that hold the information needed to provision the resources specified in the request and the resources they depend on.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_graph_post_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param list[ResourceProvisionRequestRequest] body: Resources to provision.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: list[NodeBodyResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_resources_graph_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_graph_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_graph_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_graph_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_graph_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/resources/graph",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[NodeBodyResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete(
        self, org_id, app_id, env_id, type, res_id, **kwargs
    ):  # noqa: E501
        """Delete Active Resources.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete(org_id, app_id, env_id, type, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str type: The Resource Type, may include a resource class: {type}.{class}.   (required)
        :param str res_id: The Resource ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete_with_http_info(
                org_id, app_id, env_id, type, res_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete_with_http_info(
                org_id, app_id, env_id, type, res_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete_with_http_info(
        self, org_id, app_id, env_id, type, res_id, **kwargs
    ):  # noqa: E501
        """Delete Active Resources.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete_with_http_info(org_id, app_id, env_id, type, res_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str type: The Resource Type, may include a resource class: {type}.{class}.   (required)
        :param str res_id: The Resource ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "type", "res_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if "type" not in params or params["type"] is None:
            raise ValueError(
                "Missing the required parameter `type` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'res_id' is set
        if "res_id" not in params or params["res_id"] is None:
            raise ValueError(
                "Missing the required parameter `res_id` when calling `orgs_org_id_apps_app_id_envs_env_id_resources_type_res_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "type" in params:
            path_params["type"] = params["type"]  # noqa: E501
        if "res_id" in params:
            path_params["resId"] = params["res_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/resources/{type}/{resId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_rules_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List all Automation Rules in an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[AutomationRuleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_rules_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_env_id_rules_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_rules_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List all Automation Rules in an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[AutomationRuleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_rules_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[AutomationRuleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_rules_post(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Create a new Automation Rule for an Environment.  # noqa: E501

               Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_post(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AutomationRuleRequest body: The definition of the Automation Rule.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: AutomationRuleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_rules_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_env_id_rules_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_rules_post_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Create a new Automation Rule for an Environment.  # noqa: E501

               Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_post_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AutomationRuleRequest body: The definition of the Automation Rule.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: AutomationRuleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_rules_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutomationRuleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete(
        self, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Delete Automation Rule from an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete(org_id, app_id, env_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str rule_id: The Automation Rule ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete_with_http_info(
                org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete_with_http_info(
                org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete_with_http_info(
        self, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Delete Automation Rule from an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete_with_http_info(org_id, app_id, env_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str rule_id: The Automation Rule ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "rule_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if "rule_id" not in params or params["rule_id"] is None:
            raise ValueError(
                "Missing the required parameter `rule_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "rule_id" in params:
            path_params["ruleId"] = params["rule_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get(
        self, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Get a specific Automation Rule for an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get(org_id, app_id, env_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str rule_id: The Automation Rule ID.   (required)
        :return: AutomationRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get_with_http_info(
                org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get_with_http_info(
                org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get_with_http_info(
        self, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Get a specific Automation Rule for an Environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get_with_http_info(org_id, app_id, env_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str rule_id: The Automation Rule ID.   (required)
        :return: AutomationRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "rule_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get`"
            )  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if "rule_id" not in params or params["rule_id"] is None:
            raise ValueError(
                "Missing the required parameter `rule_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "rule_id" in params:
            path_params["ruleId"] = params["rule_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutomationRuleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put(
        self, body, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Update an existing Automation Rule for an Environment.  # noqa: E501

               Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put(body, org_id, app_id, env_id, rule_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AutomationRuleRequest body: The definition of the Automation Rule.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str rule_id: The Automation Rule ID.   (required)
               :return: AutomationRuleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put_with_http_info(
                body, org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put_with_http_info(
                body, org_id, app_id, env_id, rule_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put_with_http_info(
        self, body, org_id, app_id, env_id, rule_id, **kwargs
    ):  # noqa: E501
        """Update an existing Automation Rule for an Environment.  # noqa: E501

               Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put_with_http_info(body, org_id, app_id, env_id, rule_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AutomationRuleRequest body: The definition of the Automation Rule.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str rule_id: The Automation Rule ID.   (required)
               :return: AutomationRuleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id", "rule_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put`"
            )  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if "rule_id" not in params or params["rule_id"] is None:
            raise ValueError(
                "Missing the required parameter `rule_id` when calling `orgs_org_id_apps_app_id_envs_env_id_rules_rule_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "rule_id" in params:
            path_params["ruleId"] = params["rule_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutomationRuleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_runtime_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Get Runtime information about the environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: RuntimeInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_runtime_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_runtime_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_runtime_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Get Runtime information about the environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: RuntimeInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_runtime_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RuntimeInfoResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Pause / Resume an environment.  # noqa: E501

               On pause requests, all the Kubernetes Deployment resources are scaled down to 0 replicas.  On resume requests, all the Kubernetes Deployment resources are scaled up to the number of replicas running before the environment was paused.  When an environment is paused, it is not possible to:  ```   - Deploy the environment within Humanitec.   - Scale the number of replicas running of any workload. ```  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: If the value is `true` the request is to pause an environment, if it is `false` is to resume an environment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Pause / Resume an environment.  # noqa: E501

               On pause requests, all the Kubernetes Deployment resources are scaled down to 0 replicas.  On resume requests, all the Kubernetes Deployment resources are scaled up to the number of replicas running before the environment was paused.  When an environment is paused, it is not possible to:  ```   - Deploy the environment within Humanitec.   - Scale the number of replicas running of any workload. ```  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: If the value is `true` the request is to pause an environment, if it is `false` is to resume an environment.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_paused_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/paused",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Set number of replicas for an environment's modules.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param dict(str, int) body: map of replicas by modules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Set number of replicas for an environment's modules.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param dict(str, int) body: map of replicas by modules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_runtime_replicas_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/replicas",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Value Set Versions in an Environment of an App  # noqa: E501

        A new Value Set Version is created on every modification of a Value inside the an Environment of an App. In case this environment has no overrides the response is the same as the App level endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str key_changed: (Optional) Return only value set version where the specified key changed
        :return: list[ValueSetVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Value Set Versions in an Environment of an App  # noqa: E501

        A new Value Set Version is created on every modification of a Value inside the an Environment of an App. In case this environment has no overrides the response is the same as the App level endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str key_changed: (Optional) Return only value set version where the specified key changed
        :return: list[ValueSetVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "key_changed"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []
        if "key_changed" in params:
            query_params.append(("key_changed", params["key_changed"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ValueSetVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get(
        self, org_id, app_id, env_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Get a single Value Set Version in an Environment of an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get(org_id, app_id, env_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get_with_http_info(
                org_id, app_id, env_id, value_set_version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get_with_http_info(
                org_id, app_id, env_id, value_set_version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get_with_http_info(
        self, org_id, app_id, env_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Get a single Value Set Version in an Environment of an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get_with_http_info(org_id, app_id, env_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "env_id",
            "value_set_version_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post(
        self, body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Purge the value of a specific Shared Value from the App Environment Version history.  # noqa: E501

        Purging permanently removes the value of a specific Shared Value in an application. A purged value is no longer accessible, can't be restored and can't be used by deployments referencing a Value Set Version where the value was present.  Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post(body, org_id, app_id, env_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be purged.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
        self, body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Purge the value of a specific Shared Value from the App Environment Version history.  # noqa: E501

        Purging permanently removes the value of a specific Shared Value in an application. A purged value is no longer accessible, can't be restored and can't be used by deployments referencing a Value Set Version where the value was present.  Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(body, org_id, app_id, env_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be purged.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "env_id",
            "value_set_version_id",
            "key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/purge/{key}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post(
        self, body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Restore a specific key from the Value Set Version in an Environment of an App  # noqa: E501

        Restore the values of a single Shared Value in an Environment from a specific version.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post(body, org_id, app_id, env_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be restored.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
        self, body, org_id, app_id, env_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Restore a specific key from the Value Set Version in an Environment of an App  # noqa: E501

        Restore the values of a single Shared Value in an Environment from a specific version.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(body, org_id, app_id, env_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be restored.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "env_id",
            "value_set_version_id",
            "key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore/{key}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post(
        self, body, org_id, app_id, env_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Restore a Value Set Version in an Environment of an App  # noqa: E501

        Restore the values of all Shared Values in an environment from a specific version. Keys not existing in the selected version are deleted.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post(body, org_id, app_id, env_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
                body, org_id, app_id, env_id, value_set_version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
        self, body, org_id, app_id, env_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Restore a Value Set Version in an Environment of an App  # noqa: E501

        Restore the values of all Shared Values in an environment from a specific version. Keys not existing in the selected version are deleted.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post_with_http_info(body, org_id, app_id, env_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "env_id",
            "value_set_version_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_envs_env_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_delete(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Delete all Shared Value for an Environment  # noqa: E501

        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_delete(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_apps_app_id_envs_env_id_values_delete_with_http_info(
                    org_id, app_id, env_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_values_delete_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_delete_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Delete all Shared Value for an Environment  # noqa: E501

        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_delete_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_get(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Shared Values in an Environment  # noqa: E501

        The returned values will be the base Application values with the Environment overrides where applicable. The `source` field will specify the level from which the value is from.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_get(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[ValueResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_values_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_env_id_values_get_with_http_info(
                org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_get_with_http_info(
        self, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """List Shared Values in an Environment  # noqa: E501

        The returned values will be the base Application values with the Environment overrides where applicable. The `source` field will specify the level from which the value is from.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_get_with_http_info(org_id, app_id, env_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :return: list[ValueResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_get`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ValueResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_key_delete(
        self, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Delete Shared Value for an Environment  # noqa: E501

        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_delete(org_id, app_id, env_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str key: The key to update.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_values_key_delete_with_http_info(
                org_id, app_id, env_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_values_key_delete_with_http_info(
                org_id, app_id, env_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_key_delete_with_http_info(
        self, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Delete Shared Value for an Environment  # noqa: E501

        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_delete_with_http_info(org_id, app_id, env_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str env_id: The Environment ID.   (required)
        :param str key: The key to update.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "env_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_key_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_delete`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_key_patch(
        self, body, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Environment  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_patch(body, org_id, app_id, env_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValuePatchPayloadRequest body: At least `value` or `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_values_key_patch_with_http_info(
                body, org_id, app_id, env_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_values_key_patch_with_http_info(
                body, org_id, app_id, env_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_key_patch_with_http_info(
        self, body, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Environment  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_patch_with_http_info(body, org_id, app_id, env_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValuePatchPayloadRequest body: At least `value` or `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_key_patch"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_key_put(
        self, body, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Environment  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_put(body, org_id, app_id, env_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueEditPayloadRequest body: Both `value` and `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_apps_app_id_envs_env_id_values_key_put_with_http_info(
                    body, org_id, app_id, env_id, key, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_values_key_put_with_http_info(
                body, org_id, app_id, env_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_key_put_with_http_info(
        self, body, org_id, app_id, env_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Environment  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_key_put_with_http_info(body, org_id, app_id, env_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueEditPayloadRequest body: Both `value` and `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_key_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_envs_env_id_values_key_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_env_id_values_post(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Create a Shared Value for an Environment  # noqa: E501

               The Shared Value created will only be available to the specific Environment.  If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_post(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueCreatePayloadRequest body: Definition of the new Shared Value.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_env_id_values_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_envs_env_id_values_post_with_http_info(
                body, org_id, app_id, env_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_env_id_values_post_with_http_info(
        self, body, org_id, app_id, env_id, **kwargs
    ):  # noqa: E501
        """Create a Shared Value for an Environment  # noqa: E501

               The Shared Value created will only be available to the specific Environment.  If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_env_id_values_post_with_http_info(body, org_id, app_id, env_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueCreatePayloadRequest body: Definition of the new Shared Value.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str env_id: The Environment ID.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "env_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_env_id_values_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_env_id_values_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_post`"
            )  # noqa: E501
        # verify the required parameter 'env_id' is set
        if "env_id" not in params or params["env_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_id` when calling `orgs_org_id_apps_app_id_envs_env_id_values_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "env_id" in params:
            path_params["envId"] = params["env_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs/{envId}/values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_get(self, org_id, app_id, **kwargs):  # noqa: E501
        """List all Environments.  # noqa: E501

        Lists all of the Environments in the Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[EnvironmentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List all Environments.  # noqa: E501

        Lists all of the Environments in the Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_envs_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[EnvironmentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[EnvironmentResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_envs_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Add a new Environment to an Application.  # noqa: E501

               Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.  The Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)  The Type of the Environment must be already defined in the Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_post(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param EnvironmentDefinitionRequest body: The ID, Name, Type, and Deployment the Environment will be derived from.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: EnvironmentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_envs_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_envs_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_envs_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Add a new Environment to an Application.  # noqa: E501

               Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.  The Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)  The Type of the Environment must be already defined in the Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_envs_post_with_http_info(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param EnvironmentDefinitionRequest body: The ID, Name, Type, and Deployment the Environment will be derived from.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: EnvironmentResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_envs_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_envs_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_envs_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_envs_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/envs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="EnvironmentResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_get(self, org_id, app_id, **kwargs):  # noqa: E501
        """Get an existing Application  # noqa: E501

        Gets a specific Application in the specified Organization by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: ApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Get an existing Application  # noqa: E501

        Gets a specific Application in the specified Organization by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: ApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApplicationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_jobs_delete(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Deletes all Jobs for the Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_jobs_delete(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_jobs_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_jobs_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_jobs_delete_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Deletes all Jobs for the Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_jobs_delete_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_jobs_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_jobs_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_jobs_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/jobs",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_runtime_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Get Runtime information about specific environments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_runtime_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str id: Filter environments by ID (required). Up to 5 ids can be supplied per request.
        :return: list[EnvironmentRuntimeInfoResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_runtime_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_runtime_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_runtime_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Get Runtime information about specific environments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_runtime_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str id: Filter environments by ID (required). Up to 5 ids can be supplied per request.
        :return: list[EnvironmentRuntimeInfoResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_runtime_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_runtime_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_runtime_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "id" in params:
            query_params.append(("id", params["id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/runtime",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[EnvironmentRuntimeInfoResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get(
        self, org_id, app_id, set_id, source_set_id, **kwargs
    ):  # noqa: E501
        """Get the difference between 2 Deployment Sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get(org_id, app_id, set_id, source_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str set_id: ID of the Deployment Set.   (required)
        :param str source_set_id: ID of the Deployment Set to diff against.   (required)
        :return: PlainDeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get_with_http_info(
                org_id, app_id, set_id, source_set_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get_with_http_info(
                org_id, app_id, set_id, source_set_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get_with_http_info(
        self, org_id, app_id, set_id, source_set_id, **kwargs
    ):  # noqa: E501
        """Get the difference between 2 Deployment Sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get_with_http_info(org_id, app_id, set_id, source_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str set_id: ID of the Deployment Set.   (required)
        :param str source_set_id: ID of the Deployment Set to diff against.   (required)
        :return: PlainDeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "set_id", "source_set_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get`"
            )  # noqa: E501
        # verify the required parameter 'set_id' is set
        if "set_id" not in params or params["set_id"] is None:
            raise ValueError(
                "Missing the required parameter `set_id` when calling `orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get`"
            )  # noqa: E501
        # verify the required parameter 'source_set_id' is set
        if "source_set_id" not in params or params["source_set_id"] is None:
            raise ValueError(
                "Missing the required parameter `source_set_id` when calling `orgs_org_id_apps_app_id_sets_set_id_diff_source_set_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "set_id" in params:
            path_params["setId"] = params["set_id"]  # noqa: E501
        if "source_set_id" in params:
            path_params["sourceSetId"] = params["source_set_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/sets/{setId}/diff/{sourceSetId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlainDeltaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_sets_set_id_get(
        self, org_id, app_id, set_id, **kwargs
    ):  # noqa: E501
        """Get a Deployment Set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_get(org_id, app_id, set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str set_id: ID of the Deployment Set.   (required)
        :param str diff: ID of the Deployment Set to compared against.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_sets_set_id_get_with_http_info(
                org_id, app_id, set_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_sets_set_id_get_with_http_info(
                org_id, app_id, set_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_sets_set_id_get_with_http_info(
        self, org_id, app_id, set_id, **kwargs
    ):  # noqa: E501
        """Get a Deployment Set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_get_with_http_info(org_id, app_id, set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str set_id: ID of the Deployment Set.   (required)
        :param str diff: ID of the Deployment Set to compared against.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "set_id", "diff"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_sets_set_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_sets_set_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_sets_set_id_get`"
            )  # noqa: E501
        # verify the required parameter 'set_id' is set
        if "set_id" not in params or params["set_id"] is None:
            raise ValueError(
                "Missing the required parameter `set_id` when calling `orgs_org_id_apps_app_id_sets_set_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "set_id" in params:
            path_params["setId"] = params["set_id"]  # noqa: E501

        query_params = []
        if "diff" in params:
            query_params.append(("diff", params["diff"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/sets/{setId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_sets_set_id_post(
        self, body, org_id, app_id, set_id, **kwargs
    ):  # noqa: E501
        """Apply a Deployment Delta to a Deployment Set  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_post(body, org_id, app_id, set_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: The Delta to apply to the Set.

        NOTE: The `id` parameter is ignored if provided. The request body should be the full Delta. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str set_id: ID of the Deployment Set.   (required)
                :return: str
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_sets_set_id_post_with_http_info(
                body, org_id, app_id, set_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_sets_set_id_post_with_http_info(
                body, org_id, app_id, set_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_sets_set_id_post_with_http_info(
        self, body, org_id, app_id, set_id, **kwargs
    ):  # noqa: E501
        """Apply a Deployment Delta to a Deployment Set  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_sets_set_id_post_with_http_info(body, org_id, app_id, set_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: The Delta to apply to the Set.

        NOTE: The `id` parameter is ignored if provided. The request body should be the full Delta. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str set_id: ID of the Deployment Set.   (required)
                :return: str
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "set_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_sets_set_id_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_sets_set_id_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_sets_set_id_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_sets_set_id_post`"
            )  # noqa: E501
        # verify the required parameter 'set_id' is set
        if "set_id" not in params or params["set_id"] is None:
            raise ValueError(
                "Missing the required parameter `set_id` when calling `orgs_org_id_apps_app_id_sets_set_id_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "set_id" in params:
            path_params["setId"] = params["set_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/sets/{setId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_get(self, org_id, app_id, **kwargs):  # noqa: E501
        """List Users with roles in an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Users with roles in an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Adds a User to an Application with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_post(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Adds a User to an Application with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_post_with_http_info(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_delete(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_delete(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_get(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_get(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_patch(
        self, body, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Application  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_user_id_patch(body, org_id, app_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
                body, org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
                body, org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
        self, body, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Application  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(body, org_id, app_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_value_set_versions_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Value Set Versions in the App  # noqa: E501

        A new Value Set Version is created on every modification of a Value inside the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str key_changed: (Optional) Return only value set version where the specified key changed
        :return: list[ValueSetVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_value_set_versions_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_value_set_versions_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_value_set_versions_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Value Set Versions in the App  # noqa: E501

        A new Value Set Version is created on every modification of a Value inside the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str key_changed: (Optional) Return only value set version where the specified key changed
        :return: list[ValueSetVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "key_changed"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_value_set_versions_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_value_set_versions_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_value_set_versions_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "key_changed" in params:
            query_params.append(("key_changed", params["key_changed"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/value-set-versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ValueSetVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get(
        self, org_id, app_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Get a single Value Set Version from the App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get(org_id, app_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get_with_http_info(
                org_id, app_id, value_set_version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get_with_http_info(
                org_id, app_id, value_set_version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get_with_http_info(
        self, org_id, app_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Get a single Value Set Version from the App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get_with_http_info(org_id, app_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "value_set_version_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post(
        self, body, org_id, app_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Purge the value of a specific Shared Value from the App Version history.  # noqa: E501

        Purging permanently removes the value of a specific Shared Value in an Application. A purged value is no longer accessible, can't be restored and can't be used by deployments referencing a Value Set Version where the value was present.  Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post(body, org_id, app_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be purged.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
                body, org_id, app_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
                body, org_id, app_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(
        self, body, org_id, app_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Purge the value of a specific Shared Value from the App Version history.  # noqa: E501

        Purging permanently removes the value of a specific Shared Value in an Application. A purged value is no longer accessible, can't be restored and can't be used by deployments referencing a Value Set Version where the value was present.  Learn more about purging in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#purge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post_with_http_info(body, org_id, app_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be purged.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "value_set_version_id",
            "key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_purge_key_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/purge/{key}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post(
        self, body, org_id, app_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Restore a specific key from the Value Set Version in an App  # noqa: E501

        Restore the values of a single Shared Value in an application from a specific version.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post(body, org_id, app_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be restored.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
                body, org_id, app_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
                body, org_id, app_id, value_set_version_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(
        self, body, org_id, app_id, value_set_version_id, key, **kwargs
    ):  # noqa: E501
        """Restore a specific key from the Value Set Version in an App  # noqa: E501

        Restore the values of a single Shared Value in an application from a specific version.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post_with_http_info(body, org_id, app_id, value_set_version_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :param str key: Key of the value to be restored.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "value_set_version_id",
            "key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_key_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore/{key}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post(
        self, body, org_id, app_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Restore a Value Set Version in an App  # noqa: E501

        Restore the values of all Shared Values in an application from a specific version. Keys not existing in the selected version are deleted.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post(body, org_id, app_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
                body, org_id, app_id, value_set_version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
                body, org_id, app_id, value_set_version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post_with_http_info(
        self, body, org_id, app_id, value_set_version_id, **kwargs
    ):  # noqa: E501
        """Restore a Value Set Version in an App  # noqa: E501

        Restore the values of all Shared Values in an application from a specific version. Keys not existing in the selected version are deleted.  Learn more about reverting in our [docs](https://docs.humanitec.com/reference/concepts/app-config/shared-app-values#revert).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post_with_http_info(body, org_id, app_id, value_set_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValueSetActionPayloadRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str value_set_version_id: The ValueSetVersion ID.   (required)
        :return: ValueSetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "value_set_version_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501
        # verify the required parameter 'value_set_version_id' is set
        if (
            "value_set_version_id" not in params
            or params["value_set_version_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `value_set_version_id` when calling `orgs_org_id_apps_app_id_value_set_versions_value_set_version_id_restore_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "value_set_version_id" in params:
            path_params["valueSetVersionId"] = params[
                "value_set_version_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueSetVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_delete(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Delete all Shared Value for an App  # noqa: E501

        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_delete(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_delete_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_delete_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Delete all Shared Value for an App  # noqa: E501

        All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_delete_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Shared Values in an Application  # noqa: E501

        The returned values will be the \"base\" values for the Application. The overridden value for the Environment can be retrieved via the `/orgs/{orgId}/apps/{appId}/envs/{envId}/values` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[ValueResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Shared Values in an Application  # noqa: E501

        The returned values will be the \"base\" values for the Application. The overridden value for the Environment can be retrieved via the `/orgs/{orgId}/apps/{appId}/envs/{envId}/values` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[ValueResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ValueResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_key_delete(
        self, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Delete Shared Value for an Application  # noqa: E501

        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_key_delete(org_id, app_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str key: The key to update.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_key_delete_with_http_info(
                org_id, app_id, key, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_key_delete_with_http_info(
                org_id, app_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_key_delete_with_http_info(
        self, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Delete Shared Value for an Application  # noqa: E501

        The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_values_key_delete_with_http_info(org_id, app_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str key: The key to update.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_key_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_key_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_key_delete`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_values_key_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values/{key}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_key_patch(
        self, body, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Application  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_key_patch(body, org_id, app_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValuePatchPayloadRequest body: At least `value` or `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_key_patch_with_http_info(
                body, org_id, app_id, key, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_key_patch_with_http_info(
                body, org_id, app_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_key_patch_with_http_info(
        self, body, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Application  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_key_patch_with_http_info(body, org_id, app_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValuePatchPayloadRequest body: At least `value` or `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_key_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_key_patch`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_values_key_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values/{key}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_key_put(
        self, body, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Application  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_key_put(body, org_id, app_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueEditPayloadRequest body: Both `value` and `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_key_put_with_http_info(
                body, org_id, app_id, key, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_key_put_with_http_info(
                body, org_id, app_id, key, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_key_put_with_http_info(
        self, body, org_id, app_id, key, **kwargs
    ):  # noqa: E501
        """Update Shared Value for an Application  # noqa: E501

               Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_key_put_with_http_info(body, org_id, app_id, key, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueEditPayloadRequest body: Both `value` and `description` must be supplied. All other fields will be ignored.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str key: The key to update.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_key_put" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_key_put`"
            )  # noqa: E501
        # verify the required parameter 'key' is set
        if "key" not in params or params["key"] is None:
            raise ValueError(
                "Missing the required parameter `key` when calling `orgs_org_id_apps_app_id_values_key_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "key" in params:
            path_params["key"] = params["key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values/{key}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_values_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a Shared Value for an Application  # noqa: E501

               The Shared Value created will be available to all Environments in that Application.  If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_post(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueCreatePayloadRequest body: Definition of the new Shared Value.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_values_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_values_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_values_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a Shared Value for an Application  # noqa: E501

               The Shared Value created will be available to all Environments in that Application.  If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_values_post_with_http_info(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ValueCreatePayloadRequest body: Definition of the new Shared Value.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: ValueResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_values_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_values_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_values_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_values_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ValueResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_webhooks_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Webhooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[WebhookResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_webhooks_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_webhooks_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_webhooks_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Webhooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[WebhookResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_webhooks_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_webhooks_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_webhooks_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/webhooks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WebhookResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_webhooks_job_id_delete(
        self, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Delete a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_delete(org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_webhooks_job_id_delete_with_http_info(
                org_id, app_id, job_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_webhooks_job_id_delete_with_http_info(
                org_id, app_id, job_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_webhooks_job_id_delete_with_http_info(
        self, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Delete a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_delete_with_http_info(org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_webhooks_job_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/webhooks/{jobId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_webhooks_job_id_get(
        self, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Get a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_get(org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: WebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_webhooks_job_id_get_with_http_info(
                org_id, app_id, job_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_webhooks_job_id_get_with_http_info(
                org_id, app_id, job_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_webhooks_job_id_get_with_http_info(
        self, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Get a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_get_with_http_info(org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: WebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_webhooks_job_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_get`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/webhooks/{jobId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WebhookResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_webhooks_job_id_patch(
        self, body, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Update a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_patch(body, org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: WebhookUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_webhooks_job_id_patch_with_http_info(
                body, org_id, app_id, job_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_webhooks_job_id_patch_with_http_info(
                body, org_id, app_id, job_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_webhooks_job_id_patch_with_http_info(
        self, body, org_id, app_id, job_id, **kwargs
    ):  # noqa: E501
        """Update a Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_job_id_patch_with_http_info(body, org_id, app_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str job_id: The Webhook ID.   (required)
        :return: WebhookUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_webhooks_job_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_webhooks_job_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter `job_id` when calling `orgs_org_id_apps_app_id_webhooks_job_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/webhooks/{jobId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WebhookUpdateResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_webhooks_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_post(body, org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: WebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_webhooks_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_webhooks_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_webhooks_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_webhooks_post_with_http_info(body, org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: WebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_webhooks_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_webhooks_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_webhooks_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_webhooks_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/webhooks",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WebhookResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_get(self, org_id, **kwargs):  # noqa: E501
        """List all Applications in an Organization.  # noqa: E501

        Listing or lists of all Applications that exist within a specific Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ApplicationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all Applications in an Organization.  # noqa: E501

        Listing or lists of all Applications that exist within a specific Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ApplicationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ApplicationResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_post(self, body, org_id, **kwargs):  # noqa: E501
        """Add a new Application to an Organization  # noqa: E501

               Creates a new Application, then adds it to the specified Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ApplicationCreationRequest body: The request ID, Human-friendly name and environment of the Application.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ApplicationResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Add a new Application to an Organization  # noqa: E501

               Creates a new Application, then adds it to the specified Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ApplicationCreationRequest body: The request ID, Human-friendly name and environment of the Application.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ApplicationResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApplicationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefact_versions_artefact_version_id_get(
        self, org_id, artefact_version_id, **kwargs
    ):  # noqa: E501
        """Get an Artefacts Versions.  # noqa: E501

        Returns a specific Artefact Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefact_versions_artefact_version_id_get(org_id, artefact_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_version_id: The Artefact Version ID.   (required)
        :return: ArtefactVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefact_versions_artefact_version_id_get_with_http_info(
                org_id, artefact_version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_artefact_versions_artefact_version_id_get_with_http_info(
                org_id, artefact_version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefact_versions_artefact_version_id_get_with_http_info(
        self, org_id, artefact_version_id, **kwargs
    ):  # noqa: E501
        """Get an Artefacts Versions.  # noqa: E501

        Returns a specific Artefact Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefact_versions_artefact_version_id_get_with_http_info(org_id, artefact_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_version_id: The Artefact Version ID.   (required)
        :return: ArtefactVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "artefact_version_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefact_versions_artefact_version_id_get"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefact_versions_artefact_version_id_get`"
            )  # noqa: E501
        # verify the required parameter 'artefact_version_id' is set
        if "artefact_version_id" not in params or params["artefact_version_id"] is None:
            raise ValueError(
                "Missing the required parameter `artefact_version_id` when calling `orgs_org_id_artefact_versions_artefact_version_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "artefact_version_id" in params:
            path_params["artefactVersionId"] = params[
                "artefact_version_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefact-versions/{artefactVersionId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ArtefactVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefact_versions_get(self, org_id, **kwargs):  # noqa: E501
        """List all Artefacts Versions.  # noqa: E501

        Returns the Artefact Versions registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefact_versions_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str name: (Optional) Filter Artefact Versions by name.
        :param str reference: (Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.
        :param str archived: (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
        :return: list[ArtefactVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefact_versions_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_artefact_versions_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefact_versions_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List all Artefacts Versions.  # noqa: E501

        Returns the Artefact Versions registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefact_versions_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str name: (Optional) Filter Artefact Versions by name.
        :param str reference: (Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.
        :param str archived: (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
        :return: list[ArtefactVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "name", "reference", "archived"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefact_versions_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefact_versions_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "reference" in params:
            query_params.append(("reference", params["reference"]))  # noqa: E501
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefact-versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ArtefactVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefact_versions_post(self, body, org_id, **kwargs):  # noqa: E501
        """Register a new Artefact Version with your organization.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_artefact_versions_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AddArtefactVersionPayloadRequest body: The data needed to register a new Artefact Version within the organization.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str vcs: (Optional) Which version control system the version comes from. Default value is \"git\". If this parameter is not supplied or its value is \"git\", the provided ref, if not empty, is checked to ensure that it has the prefix \"refs/\".
               :return: ArtefactVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefact_versions_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_artefact_versions_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefact_versions_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Register a new Artefact Version with your organization.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_artefact_versions_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param AddArtefactVersionPayloadRequest body: The data needed to register a new Artefact Version within the organization.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str vcs: (Optional) Which version control system the version comes from. Default value is \"git\". If this parameter is not supplied or its value is \"git\", the provided ref, if not empty, is checked to ensure that it has the prefix \"refs/\".
               :return: ArtefactVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "vcs"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefact_versions_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_artefact_versions_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefact_versions_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "vcs" in params:
            query_params.append(("vcs", params["vcs"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefact-versions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ArtefactVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefacts_artefact_id_delete(
        self, org_id, artefact_id, **kwargs
    ):  # noqa: E501
        """Delete Artefact and all related Artefact Versions  # noqa: E501

        The specified Artefact and its Artefact Versions will be permanently deleted. Only Administrators can delete an Artefact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_artefact_id_delete(org_id, artefact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_id: The Artefact ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefacts_artefact_id_delete_with_http_info(
                org_id, artefact_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_artefacts_artefact_id_delete_with_http_info(
                org_id, artefact_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefacts_artefact_id_delete_with_http_info(
        self, org_id, artefact_id, **kwargs
    ):  # noqa: E501
        """Delete Artefact and all related Artefact Versions  # noqa: E501

        The specified Artefact and its Artefact Versions will be permanently deleted. Only Administrators can delete an Artefact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_artefact_id_delete_with_http_info(org_id, artefact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_id: The Artefact ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "artefact_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefacts_artefact_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefacts_artefact_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'artefact_id' is set
        if "artefact_id" not in params or params["artefact_id"] is None:
            raise ValueError(
                "Missing the required parameter `artefact_id` when calling `orgs_org_id_artefacts_artefact_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "artefact_id" in params:
            path_params["artefactId"] = params["artefact_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefacts/{artefactId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefacts_artefact_id_versions_get(
        self, org_id, artefact_id, **kwargs
    ):  # noqa: E501
        """List all Artefact Versions of an Artefact.  # noqa: E501

        Returns the Artefact Versions of a specified Artefact registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_artefact_id_versions_get(org_id, artefact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_id: The Artefact ID.   (required)
        :param str archived: (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
        :param str reference: (Optional) Filter Artefact Versions by by name including a version or digest.
        :param str limit: (Optional) Limit the number of versions returned by the endpoint.
        :return: list[ArtefactVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefacts_artefact_id_versions_get_with_http_info(
                org_id, artefact_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_artefacts_artefact_id_versions_get_with_http_info(
                org_id, artefact_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefacts_artefact_id_versions_get_with_http_info(
        self, org_id, artefact_id, **kwargs
    ):  # noqa: E501
        """List all Artefact Versions of an Artefact.  # noqa: E501

        Returns the Artefact Versions of a specified Artefact registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_artefact_id_versions_get_with_http_info(org_id, artefact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str artefact_id: The Artefact ID.   (required)
        :param str archived: (Optional) Filter for non-archived Artefact Versions. If no filter is defined only non-archived Artefact Versions are returned, if the filter is true both archived and non-archived Versions are returned.
        :param str reference: (Optional) Filter Artefact Versions by by name including a version or digest.
        :param str limit: (Optional) Limit the number of versions returned by the endpoint.
        :return: list[ArtefactVersionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "artefact_id",
            "archived",
            "reference",
            "limit",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefacts_artefact_id_versions_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefacts_artefact_id_versions_get`"
            )  # noqa: E501
        # verify the required parameter 'artefact_id' is set
        if "artefact_id" not in params or params["artefact_id"] is None:
            raise ValueError(
                "Missing the required parameter `artefact_id` when calling `orgs_org_id_artefacts_artefact_id_versions_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "artefact_id" in params:
            path_params["artefactId"] = params["artefact_id"]  # noqa: E501

        query_params = []
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501
        if "reference" in params:
            query_params.append(("reference", params["reference"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefacts/{artefactId}/versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ArtefactVersionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefacts_artefact_id_versions_version_id_patch(
        self, body, org_id, artefact_id, version_id, **kwargs
    ):  # noqa: E501
        """Update Version of an Artefact.  # noqa: E501

               Update the version of a specified Artefact registered with your organization\".  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_artefacts_artefact_id_versions_version_id_patch(body, org_id, artefact_id, version_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UpdateArtefactVersionPayloadRequest body: The Artefact Version Update Request. Only the field `archive` can be updated.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str artefact_id: The Artefact ID.   (required)
               :param str version_id: The Version ID.   (required)
               :return: ArtefactVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefacts_artefact_id_versions_version_id_patch_with_http_info(
                body, org_id, artefact_id, version_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_artefacts_artefact_id_versions_version_id_patch_with_http_info(
                body, org_id, artefact_id, version_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefacts_artefact_id_versions_version_id_patch_with_http_info(
        self, body, org_id, artefact_id, version_id, **kwargs
    ):  # noqa: E501
        """Update Version of an Artefact.  # noqa: E501

               Update the version of a specified Artefact registered with your organization\".  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_artefacts_artefact_id_versions_version_id_patch_with_http_info(body, org_id, artefact_id, version_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UpdateArtefactVersionPayloadRequest body: The Artefact Version Update Request. Only the field `archive` can be updated.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str artefact_id: The Artefact ID.   (required)
               :param str version_id: The Version ID.   (required)
               :return: ArtefactVersionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "artefact_id", "version_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefacts_artefact_id_versions_version_id_patch"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_artefacts_artefact_id_versions_version_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefacts_artefact_id_versions_version_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'artefact_id' is set
        if "artefact_id" not in params or params["artefact_id"] is None:
            raise ValueError(
                "Missing the required parameter `artefact_id` when calling `orgs_org_id_artefacts_artefact_id_versions_version_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'version_id' is set
        if "version_id" not in params or params["version_id"] is None:
            raise ValueError(
                "Missing the required parameter `version_id` when calling `orgs_org_id_artefacts_artefact_id_versions_version_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "artefact_id" in params:
            path_params["artefactId"] = params["artefact_id"]  # noqa: E501
        if "version_id" in params:
            path_params["versionId"] = params["version_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefacts/{artefactId}/versions/{versionId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ArtefactVersionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_artefacts_get(self, org_id, **kwargs):  # noqa: E501
        """List all Artefacts.  # noqa: E501

        Returns the Artefacts registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str type: (Optional) Filter Artefacts by type.
        :param str name: (Optional) Filter Artefacts by name.
        :return: list[ArtefactResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_artefacts_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_artefacts_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_artefacts_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all Artefacts.  # noqa: E501

        Returns the Artefacts registered with your organization. If no elements are found, an empty list is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_artefacts_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str type: (Optional) Filter Artefacts by type.
        :param str name: (Optional) Filter Artefacts by name.
        :return: list[ArtefactResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "type", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_artefacts_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_artefacts_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "type" in params:
            query_params.append(("type", params["type"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/artefacts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ArtefactResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_id_delete(
        self, org_id, env_type_id, **kwargs
    ):  # noqa: E501
        """Deletes an Environment Type  # noqa: E501

        Deletes a specific Environment Type from an Organization. If there are Environments with this Type in the Organization, the operation will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_id_delete(org_id, env_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type_id: ID of the Environment Type.   (required)
        :return: EnvironmentTypeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_id_delete_with_http_info(
                org_id, env_type_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_env_type_id_delete_with_http_info(
                org_id, env_type_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_id_delete_with_http_info(
        self, org_id, env_type_id, **kwargs
    ):  # noqa: E501
        """Deletes an Environment Type  # noqa: E501

        Deletes a specific Environment Type from an Organization. If there are Environments with this Type in the Organization, the operation will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_id_delete_with_http_info(org_id, env_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type_id: ID of the Environment Type.   (required)
        :return: EnvironmentTypeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_type_id' is set
        if "env_type_id" not in params or params["env_type_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_type_id` when calling `orgs_org_id_env_types_env_type_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type_id" in params:
            path_params["envTypeId"] = params["env_type_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envTypeId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="EnvironmentTypeResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_id_get(
        self, org_id, env_type_id, **kwargs
    ):  # noqa: E501
        """Get an Environment Type  # noqa: E501

        Gets a specific Environment Type within an Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_id_get(org_id, env_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type_id: ID of the Environment Type.   (required)
        :return: EnvironmentTypeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_id_get_with_http_info(
                org_id, env_type_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_env_type_id_get_with_http_info(
                org_id, env_type_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_id_get_with_http_info(
        self, org_id, env_type_id, **kwargs
    ):  # noqa: E501
        """Get an Environment Type  # noqa: E501

        Gets a specific Environment Type within an Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_id_get_with_http_info(org_id, env_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type_id: ID of the Environment Type.   (required)
        :return: EnvironmentTypeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_type_id' is set
        if "env_type_id" not in params or params["env_type_id"] is None:
            raise ValueError(
                "Missing the required parameter `env_type_id` when calling `orgs_org_id_env_types_env_type_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type_id" in params:
            path_params["envTypeId"] = params["env_type_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envTypeId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="EnvironmentTypeResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_post(
        self, body, org_id, env_type, **kwargs
    ):  # noqa: E501
        """Adds a User to an Environment Type with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_post(body, org_id, env_type, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_users_post_with_http_info(
                body, org_id, env_type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_env_type_users_post_with_http_info(
                body, org_id, env_type, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_post_with_http_info(
        self, body, org_id, env_type, **kwargs
    ):  # noqa: E501
        """Adds a User to an Environment Type with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_post_with_http_info(body, org_id, env_type, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "env_type"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_delete(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_delete(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
                    org_id, env_type, user_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_get(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_get(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_patch(
        self, body, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Environment Type  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_patch(body, org_id, env_type, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
                    body, org_id, env_type, user_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
                body, org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
        self, body, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Environment Type  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(body, org_id, env_type, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_patch"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_get(self, org_id, **kwargs):  # noqa: E501
        """List all Environment Types  # noqa: E501

        Lists all Environment Types in an Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[EnvironmentTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all Environment Types  # noqa: E501

        Lists all Environment Types in an Organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[EnvironmentTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[EnvironmentTypeResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_post(self, body, org_id, **kwargs):  # noqa: E501
        """Add a new Environment Type  # noqa: E501

               Adds a new Environment Type to an Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param EnvironmentTypeRequest body: New Environment Type.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: EnvironmentTypeResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Add a new Environment Type  # noqa: E501

               Adds a new Environment Type to an Organization.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param EnvironmentTypeRequest body: New Environment Type.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: EnvironmentTypeResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_env_types_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="EnvironmentTypeResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_events_get(self, org_id, **kwargs):  # noqa: E501
        """List Events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_events_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[EventResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_events_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_events_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_events_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List Events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_events_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[EventResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_events_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_events_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/events",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[EventResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_get(self, org_id, **kwargs):  # noqa: E501
        """Get the specified Organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_get_with_http_info(org_id, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_org_id_get_with_http_info(org_id, **kwargs)  # noqa: E501
            return data

    def orgs_org_id_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """Get the specified Organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="OrganizationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_images_get(self, org_id, **kwargs):  # noqa: E501
        """List all Container Images  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  Lists all of the Container Images registered for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :return: list[ImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_images_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_images_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_images_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List all Container Images  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  Lists all of the Container Images registered for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :return: list[ImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_images_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_images_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ImageResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_images_image_id_builds_get(
        self, org_id, image_id, **kwargs
    ):  # noqa: E501
        """Lists all the Builds of an Image  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  The response lists all available Image Builds of an Image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_image_id_builds_get(org_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str image_id: The Image ID.   (required)
        :return: list[ImageBuildResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_images_image_id_builds_get_with_http_info(
                org_id, image_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_images_image_id_builds_get_with_http_info(
                org_id, image_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_images_image_id_builds_get_with_http_info(
        self, org_id, image_id, **kwargs
    ):  # noqa: E501
        """Lists all the Builds of an Image  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  The response lists all available Image Builds of an Image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_image_id_builds_get_with_http_info(org_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str image_id: The Image ID.   (required)
        :return: list[ImageBuildResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "image_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_images_image_id_builds_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_images_image_id_builds_get`"
            )  # noqa: E501
        # verify the required parameter 'image_id' is set
        if "image_id" not in params or params["image_id"] is None:
            raise ValueError(
                "Missing the required parameter `image_id` when calling `orgs_org_id_images_image_id_builds_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "image_id" in params:
            path_params["imageId"] = params["image_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/images/{imageId}/builds",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ImageBuildResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_images_image_id_builds_post(
        self, body, org_id, image_id, **kwargs
    ):  # noqa: E501
        """Add a new Image Build  # noqa: E501

               DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  This endpoint is used by Continuous Integration (CI) pipelines to notify Humanitec that a new Image Build is available.  If there is no Image with ID `imageId`, it will be automatically created.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_images_image_id_builds_post(body, org_id, image_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ImageBuildRequest body: The metadata associated with the build.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str image_id: The Image ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_images_image_id_builds_post_with_http_info(
                body, org_id, image_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_images_image_id_builds_post_with_http_info(
                body, org_id, image_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_images_image_id_builds_post_with_http_info(
        self, body, org_id, image_id, **kwargs
    ):  # noqa: E501
        """Add a new Image Build  # noqa: E501

               DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  This endpoint is used by Continuous Integration (CI) pipelines to notify Humanitec that a new Image Build is available.  If there is no Image with ID `imageId`, it will be automatically created.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_images_image_id_builds_post_with_http_info(body, org_id, image_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param ImageBuildRequest body: The metadata associated with the build.

        (required)
               :param str org_id: The organization ID.   (required)
               :param str image_id: The Image ID.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "image_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_images_image_id_builds_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_images_image_id_builds_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_images_image_id_builds_post`"
            )  # noqa: E501
        # verify the required parameter 'image_id' is set
        if "image_id" not in params or params["image_id"] is None:
            raise ValueError(
                "Missing the required parameter `image_id` when calling `orgs_org_id_images_image_id_builds_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "image_id" in params:
            path_params["imageId"] = params["image_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/images/{imageId}/builds",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_images_image_id_get(self, org_id, image_id, **kwargs):  # noqa: E501
        """Get a specific Image Object  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  The response includes a list of Image Builds as well as some metadata about the Image such as its Image Source.  Note, `imageId` may not be the same as the container name. `imageId` is determined by the system making notifications about new builds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_image_id_get(org_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str image_id: The Image ID.   (required)
        :return: ImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_images_image_id_get_with_http_info(
                org_id, image_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_images_image_id_get_with_http_info(
                org_id, image_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_images_image_id_get_with_http_info(
        self, org_id, image_id, **kwargs
    ):  # noqa: E501
        """Get a specific Image Object  # noqa: E501

        DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.  The response includes a list of Image Builds as well as some metadata about the Image such as its Image Source.  Note, `imageId` may not be the same as the container name. `imageId` is determined by the system making notifications about new builds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_images_image_id_get_with_http_info(org_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID.   (required)
        :param str image_id: The Image ID.   (required)
        :return: ImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "image_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_images_image_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_images_image_id_get`"
            )  # noqa: E501
        # verify the required parameter 'image_id' is set
        if "image_id" not in params or params["image_id"] is None:
            raise ValueError(
                "Missing the required parameter `image_id` when calling `orgs_org_id_images_image_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "image_id" in params:
            path_params["imageId"] = params["image_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/images/{imageId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ImageResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_invitations_get(self, org_id, **kwargs):  # noqa: E501
        """List the invites issued for the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_invitations_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserInviteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_invitations_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_invitations_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_invitations_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List the invites issued for the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_invitations_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserInviteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_invitations_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_invitations_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/invitations",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserInviteResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_invitations_post(self, body, org_id, **kwargs):  # noqa: E501
        """Invites a user to an Organization with a specified role.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_invitations_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserInviteRequestRequest body: The email and the desired role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: list[UserRoleResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_invitations_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_invitations_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_invitations_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Invites a user to an Organization with a specified role.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_invitations_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserInviteRequestRequest body: The email and the desired role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: list[UserRoleResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_invitations_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_invitations_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_invitations_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/invitations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_get(self, org_id, **kwargs):  # noqa: E501
        """Lists available registries for the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :return: list[RegistryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """Lists available registries for the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :return: list[RegistryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RegistryResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_post(self, body, org_id, **kwargs):  # noqa: E501
        """Creates a new registry record.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_registries_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RegistryRequest body: A new record details.

        (required)
               :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
               :return: RegistryResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Creates a new registry record.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_registries_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RegistryRequest body: A new record details.

        (required)
               :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
               :return: RegistryResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_registries_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RegistryResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_reg_id_creds_get(
        self, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Returns current account credentials or secret details for the registry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_creds_get(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: RegistryCredsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_reg_id_creds_get_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_reg_id_creds_get_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_reg_id_creds_get_with_http_info(
        self, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Returns current account credentials or secret details for the registry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_creds_get_with_http_info(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: RegistryCredsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "reg_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_reg_id_creds_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_reg_id_creds_get`"
            )  # noqa: E501
        # verify the required parameter 'reg_id' is set
        if "reg_id" not in params or params["reg_id"] is None:
            raise ValueError(
                "Missing the required parameter `reg_id` when calling `orgs_org_id_registries_reg_id_creds_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "reg_id" in params:
            path_params["regId"] = params["reg_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries/{regId}/creds",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RegistryCredsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_reg_id_delete(
        self, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Deletes an existing registry record and all associated credentials and secrets.  # noqa: E501

        _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_delete(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_reg_id_delete_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_reg_id_delete_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_reg_id_delete_with_http_info(
        self, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Deletes an existing registry record and all associated credentials and secrets.  # noqa: E501

        _Deletions are currently irreversible._  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_delete_with_http_info(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "reg_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_reg_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_reg_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'reg_id' is set
        if "reg_id" not in params or params["reg_id"] is None:
            raise ValueError(
                "Missing the required parameter `reg_id` when calling `orgs_org_id_registries_reg_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "reg_id" in params:
            path_params["regId"] = params["reg_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries/{regId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_reg_id_get(self, org_id, reg_id, **kwargs):  # noqa: E501
        """Loads a registry record details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_get(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: RegistryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_reg_id_get_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_reg_id_get_with_http_info(
                org_id, reg_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_reg_id_get_with_http_info(
        self, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Loads a registry record details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_registries_reg_id_get_with_http_info(org_id, reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
        :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
        :return: RegistryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "reg_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_reg_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_reg_id_get`"
            )  # noqa: E501
        # verify the required parameter 'reg_id' is set
        if "reg_id" not in params or params["reg_id"] is None:
            raise ValueError(
                "Missing the required parameter `reg_id` when calling `orgs_org_id_registries_reg_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "reg_id" in params:
            path_params["regId"] = params["reg_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries/{regId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RegistryResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_registries_reg_id_patch(
        self, body, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Updates (patches) an existing registry record.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_registries_reg_id_patch(body, org_id, reg_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RegistryRequest body: Record details to update.

        (required)
               :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
               :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
               :return: RegistryResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_registries_reg_id_patch_with_http_info(
                body, org_id, reg_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_registries_reg_id_patch_with_http_info(
                body, org_id, reg_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_registries_reg_id_patch_with_http_info(
        self, body, org_id, reg_id, **kwargs
    ):  # noqa: E501
        """Updates (patches) an existing registry record.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_registries_reg_id_patch_with_http_info(body, org_id, reg_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RegistryRequest body: Record details to update.

        (required)
               :param str org_id: Unique (alpha-numerical) organization identifier.   (required)
               :param str reg_id: Unique (alpha-numerical) registry identifier.   (required)
               :return: RegistryResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "reg_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_registries_reg_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_registries_reg_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_registries_reg_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'reg_id' is set
        if "reg_id" not in params or params["reg_id"] is None:
            raise ValueError(
                "Missing the required parameter `reg_id` when calling `orgs_org_id_registries_reg_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "reg_id" in params:
            path_params["regId"] = params["reg_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/registries/{regId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RegistryResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_account_types_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Account Types available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_account_types_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[AccountTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_account_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_account_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_account_types_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Account Types available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_account_types_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[AccountTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_account_types_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_account_types_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/account-types",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[AccountTypeResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_accounts_acc_id_delete(
        self, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Delete an unused Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_delete(org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_accounts_acc_id_delete_with_http_info(
                org_id, acc_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_accounts_acc_id_delete_with_http_info(
                org_id, acc_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_accounts_acc_id_delete_with_http_info(
        self, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Delete an unused Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_delete_with_http_info(org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "acc_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_accounts_acc_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_accounts_acc_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'acc_id' is set
        if "acc_id" not in params or params["acc_id"] is None:
            raise ValueError(
                "Missing the required parameter `acc_id` when calling `orgs_org_id_resources_accounts_acc_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "acc_id" in params:
            path_params["accId"] = params["acc_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/accounts/{accId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_accounts_acc_id_get(
        self, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Get a Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_get(org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_accounts_acc_id_get_with_http_info(
                org_id, acc_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_accounts_acc_id_get_with_http_info(
                org_id, acc_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_accounts_acc_id_get_with_http_info(
        self, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Get a Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_get_with_http_info(org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "acc_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_accounts_acc_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_accounts_acc_id_get`"
            )  # noqa: E501
        # verify the required parameter 'acc_id' is set
        if "acc_id" not in params or params["acc_id"] is None:
            raise ValueError(
                "Missing the required parameter `acc_id` when calling `orgs_org_id_resources_accounts_acc_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "acc_id" in params:
            path_params["accId"] = params["acc_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/accounts/{accId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceAccountResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_accounts_acc_id_patch(
        self, body, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_patch(body, org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateResourceAccountRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_accounts_acc_id_patch_with_http_info(
                body, org_id, acc_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_accounts_acc_id_patch_with_http_info(
                body, org_id, acc_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_accounts_acc_id_patch_with_http_info(
        self, body, org_id, acc_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_acc_id_patch_with_http_info(body, org_id, acc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateResourceAccountRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str acc_id: The Resource Account ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "acc_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_accounts_acc_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_accounts_acc_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_accounts_acc_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'acc_id' is set
        if "acc_id" not in params or params["acc_id"] is None:
            raise ValueError(
                "Missing the required parameter `acc_id` when calling `orgs_org_id_resources_accounts_acc_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "acc_id" in params:
            path_params["accId"] = params["acc_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/accounts/{accId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceAccountResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_accounts_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Accounts in the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ResourceAccountResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_accounts_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_accounts_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_accounts_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Accounts in the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ResourceAccountResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_accounts_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_accounts_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/accounts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ResourceAccountResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_accounts_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create a new Resource Account in the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_post(body, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateResourceAccountRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_accounts_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_accounts_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_accounts_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create a new Resource Account in the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_accounts_post_with_http_info(body, org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateResourceAccountRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :return: ResourceAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_accounts_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_accounts_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_accounts_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/accounts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceAccountResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete(
        self, org_id, def_id, criteria_id, **kwargs
    ):  # noqa: E501
        """Delete a Matching Criteria from a Resource Definition.  # noqa: E501

        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.  If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.  The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete(org_id, def_id, criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param str criteria_id: The Matching Criteria ID.   (required)
        :param bool force: If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
                org_id, def_id, criteria_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
                org_id, def_id, criteria_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
        self, org_id, def_id, criteria_id, **kwargs
    ):  # noqa: E501
        """Delete a Matching Criteria from a Resource Definition.  # noqa: E501

        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.  If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.  The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(org_id, def_id, criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param str criteria_id: The Matching Criteria ID.   (required)
        :param bool force: If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id", "criteria_id", "force"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'criteria_id' is set
        if "criteria_id" not in params or params["criteria_id"] is None:
            raise ValueError(
                "Missing the required parameter `criteria_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501
        if "criteria_id" in params:
            path_params["criteriaId"] = params["criteria_id"]  # noqa: E501

        query_params = []
        if "force" in params:
            query_params.append(("force", params["force"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_criteria_post(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Add a new Matching Criteria to a Resource Definition.  # noqa: E501

               Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.  For example, given 3 sets of matching criteria for the same type:  ```  1. {\"env_type\":\"test\"}  2. {\"env_type\":\"development\"}  3. {\"env_type\":\"test\", \"app_id\":\"my-app\"} ```  If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resource definitions matching the criteria: #1 & #3. Definition #3 will be chosen because its matching criteria is the most specific.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_post(body, org_id, def_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param MatchingCriteriaRuleRequest body: Matching Criteria rules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str def_id: The Resource Definition ID.   (required)
               :return: MatchingCriteriaResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Add a new Matching Criteria to a Resource Definition.  # noqa: E501

               Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.  For example, given 3 sets of matching criteria for the same type:  ```  1. {\"env_type\":\"test\"}  2. {\"env_type\":\"development\"}  3. {\"env_type\":\"test\", \"app_id\":\"my-app\"} ```  If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resource definitions matching the criteria: #1 & #3. Definition #3 will be chosen because its matching criteria is the most specific.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(body, org_id, def_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param MatchingCriteriaRuleRequest body: Matching Criteria rules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str def_id: The Resource Definition ID.   (required)
               :return: MatchingCriteriaResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_criteria_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/criteria",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MatchingCriteriaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_delete(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Delete a Resource Definition.  # noqa: E501

        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.  If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.  The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).  The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_delete(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param bool force: If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_delete_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_delete_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_delete_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Delete a Resource Definition.  # noqa: E501

        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.  If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.  The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).  The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_delete_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param bool force: If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id", "force"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []
        if "force" in params:
            query_params.append(("force", params["force"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_get(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Get a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_get(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: ResourceDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_get_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Get a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_get_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: ResourceDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_get`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_patch(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_patch(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param PatchResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.

        For the map properties, such as PatchResourceDefinitionRequest.DriverInputs, the merge operation is applied.

        Merge rules are as follows:

        - If a map property has a value, it is replaced (or added).

        - If a map property is set to `null`, it is removed.

        - If a map property is not included (missing in JSON), it remains unchanged. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_patch_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_patch_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_patch_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_patch_with_http_info(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param PatchResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.

        For the map properties, such as PatchResourceDefinitionRequest.DriverInputs, the merge operation is applied.

        Merge rules are as follows:

        - If a map property has a value, it is replaced (or added).

        - If a map property is set to `null`, it is removed.

        - If a map property is not included (missing in JSON), it remains unchanged. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_put(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_put(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param UpdateResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PUT operation updates a resource definition using the provided payload. An empty driver_account or driver_inputs property will unset the existing values.

        Currently the resource and driver types can't be changed. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_put_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_put_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_put_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_put_with_http_info(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param UpdateResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PUT operation updates a resource definition using the provided payload. An empty driver_account or driver_inputs property will unset the existing values.

        Currently the resource and driver types can't be changed. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_put" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_resources_get(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned via a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_resources_get(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned via a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_resources_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_resources_get`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_resources_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/resources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ActiveResourceResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Definitions.  # noqa: E501

        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app: (Optional) Filter Resource Definitions that may match a specific Application.
        :param str env: (Optional) Filter Resource Definitions that may match a specific Environment.
        :param str env_type: (Optional) Filter Resource Definitions that may match a specific Environment Type.
        :param str res: (Optional) Filter Resource Definitions that may match a specific Resource.
        :param str res_type: (Optional) Filter Resource Definitions that may match a specific Resource Type.
        :param str _class: (Optional) Filter Resource Definitions that may match a specific Class.
        :return: list[ResourceDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Definitions.  # noqa: E501

        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app: (Optional) Filter Resource Definitions that may match a specific Application.
        :param str env: (Optional) Filter Resource Definitions that may match a specific Environment.
        :param str env_type: (Optional) Filter Resource Definitions that may match a specific Environment Type.
        :param str res: (Optional) Filter Resource Definitions that may match a specific Resource.
        :param str res_type: (Optional) Filter Resource Definitions that may match a specific Resource Type.
        :param str _class: (Optional) Filter Resource Definitions that may match a specific Class.
        :return: list[ResourceDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app",
            "env",
            "env_type",
            "res",
            "res_type",
            "_class",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "app" in params:
            query_params.append(("app", params["app"]))  # noqa: E501
        if "env" in params:
            query_params.append(("env", params["env"]))  # noqa: E501
        if "env_type" in params:
            query_params.append(("env_type", params["env_type"]))  # noqa: E501
        if "res" in params:
            query_params.append(("res", params["res"]))  # noqa: E501
        if "res_type" in params:
            query_params.append(("res_type", params["res_type"]))  # noqa: E501
        if "_class" in params:
            query_params.append(("class", params["_class"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ResourceDefinitionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create a new Resource Definition.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateResourceDefinitionRequestRequest body: The Resource Definition details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ResourceDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create a new Resource Definition.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateResourceDefinitionRequestRequest body: The Resource Definition details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ResourceDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_drivers_driver_id_delete(
        self, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Delete a Resources Driver.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_delete(org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resources Driver ID to delete.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_drivers_driver_id_delete_with_http_info(
                org_id, driver_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_drivers_driver_id_delete_with_http_info(
                org_id, driver_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_drivers_driver_id_delete_with_http_info(
        self, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Delete a Resources Driver.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_delete_with_http_info(org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resources Driver ID to delete.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "driver_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_drivers_driver_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_drivers_driver_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'driver_id' is set
        if "driver_id" not in params or params["driver_id"] is None:
            raise ValueError(
                "Missing the required parameter `driver_id` when calling `orgs_org_id_resources_drivers_driver_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "driver_id" in params:
            path_params["driverId"] = params["driver_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/drivers/{driverId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_drivers_driver_id_get(
        self, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Get a Resource Driver.  # noqa: E501

        # Only drivers that belongs to the given organization or registered as `public` are accessible through this endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_get(org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resource Driver ID.   (required)
        :return: DriverDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_drivers_driver_id_get_with_http_info(
                org_id, driver_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_drivers_driver_id_get_with_http_info(
                org_id, driver_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_drivers_driver_id_get_with_http_info(
        self, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Get a Resource Driver.  # noqa: E501

        # Only drivers that belongs to the given organization or registered as `public` are accessible through this endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_get_with_http_info(org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resource Driver ID.   (required)
        :return: DriverDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "driver_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_drivers_driver_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_drivers_driver_id_get`"
            )  # noqa: E501
        # verify the required parameter 'driver_id' is set
        if "driver_id" not in params or params["driver_id"] is None:
            raise ValueError(
                "Missing the required parameter `driver_id` when calling `orgs_org_id_resources_drivers_driver_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "driver_id" in params:
            path_params["driverId"] = params["driver_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/drivers/{driverId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DriverDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_drivers_driver_id_put(
        self, body, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Driver.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_put(body, org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDriverRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resource Driver ID.   (required)
        :return: DriverDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_drivers_driver_id_put_with_http_info(
                body, org_id, driver_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_drivers_driver_id_put_with_http_info(
                body, org_id, driver_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_drivers_driver_id_put_with_http_info(
        self, body, org_id, driver_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Driver.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_driver_id_put_with_http_info(body, org_id, driver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDriverRequestRequest body: (required)
        :param str org_id: The Organization ID.   (required)
        :param str driver_id: The Resource Driver ID.   (required)
        :return: DriverDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "org_id", "driver_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_drivers_driver_id_put" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_drivers_driver_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_drivers_driver_id_put`"
            )  # noqa: E501
        # verify the required parameter 'driver_id' is set
        if "driver_id" not in params or params["driver_id"] is None:
            raise ValueError(
                "Missing the required parameter `driver_id` when calling `orgs_org_id_resources_drivers_driver_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "driver_id" in params:
            path_params["driverId"] = params["driver_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/drivers/{driverId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DriverDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_drivers_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Drivers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[DriverDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_drivers_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_drivers_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_drivers_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Drivers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_drivers_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[DriverDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_drivers_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_drivers_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/drivers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DriverDefinitionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_drivers_post(self, body, org_id, **kwargs):  # noqa: E501
        """Register a new Resource Driver.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_drivers_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateDriverRequestRequest body: Resources Driver details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: DriverDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_drivers_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_drivers_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_drivers_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Register a new Resource Driver.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_drivers_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateDriverRequestRequest body: Resources Driver details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: DriverDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_drivers_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_drivers_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_drivers_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/drivers",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DriverDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_types_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_types_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ResourceTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_types_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_types_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_types_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[ResourceTypeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_types_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_types_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/types",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ResourceTypeResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_secretstores_get(self, org_id, **kwargs):  # noqa: E501
        """Get list of Secret Stores for the given organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[SecretStoreResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_secretstores_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_secretstores_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_secretstores_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """Get list of Secret Stores for the given organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[SecretStoreResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_secretstores_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_secretstores_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/secretstores",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[SecretStoreResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_secretstores_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create a Secret Store for the given organization.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_secretstores_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateSecretStorePayloadRequest body: Secret Store data.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: SecretStoreResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_secretstores_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_secretstores_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_secretstores_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create a Secret Store for the given organization.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_secretstores_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateSecretStorePayloadRequest body: Secret Store data.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: SecretStoreResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_secretstores_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_secretstores_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_secretstores_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/secretstores",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SecretStoreResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_secretstores_store_id_delete(
        self, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Delete the Secret Store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_store_id_delete(org_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str store_id: The Secret Store ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_secretstores_store_id_delete_with_http_info(
                org_id, store_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_secretstores_store_id_delete_with_http_info(
                org_id, store_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_secretstores_store_id_delete_with_http_info(
        self, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Delete the Secret Store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_store_id_delete_with_http_info(org_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str store_id: The Secret Store ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "store_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_secretstores_store_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_secretstores_store_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'store_id' is set
        if "store_id" not in params or params["store_id"] is None:
            raise ValueError(
                "Missing the required parameter `store_id` when calling `orgs_org_id_secretstores_store_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "store_id" in params:
            path_params["storeId"] = params["store_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/secretstores/{storeId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_secretstores_store_id_get(
        self, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Get the Secret Store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_store_id_get(org_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str store_id: The Secret Store ID.   (required)
        :return: SecretStoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_secretstores_store_id_get_with_http_info(
                org_id, store_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_secretstores_store_id_get_with_http_info(
                org_id, store_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_secretstores_store_id_get_with_http_info(
        self, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Get the Secret Store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_secretstores_store_id_get_with_http_info(org_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str store_id: The Secret Store ID.   (required)
        :return: SecretStoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "store_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_secretstores_store_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_secretstores_store_id_get`"
            )  # noqa: E501
        # verify the required parameter 'store_id' is set
        if "store_id" not in params or params["store_id"] is None:
            raise ValueError(
                "Missing the required parameter `store_id` when calling `orgs_org_id_secretstores_store_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "store_id" in params:
            path_params["storeId"] = params["store_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/secretstores/{storeId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SecretStoreResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_secretstores_store_id_patch(
        self, body, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Update the Secret Store.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_secretstores_store_id_patch(body, org_id, store_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UpdateSecretStorePayloadRequest body: Secret Store data.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str store_id: The Secret Store ID.   (required)
               :return: SecretStoreResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_secretstores_store_id_patch_with_http_info(
                body, org_id, store_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_secretstores_store_id_patch_with_http_info(
                body, org_id, store_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_secretstores_store_id_patch_with_http_info(
        self, body, org_id, store_id, **kwargs
    ):  # noqa: E501
        """Update the Secret Store.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_secretstores_store_id_patch_with_http_info(body, org_id, store_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UpdateSecretStorePayloadRequest body: Secret Store data.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str store_id: The Secret Store ID.   (required)
               :return: SecretStoreResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "store_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_secretstores_store_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_secretstores_store_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_secretstores_store_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'store_id' is set
        if "store_id" not in params or params["store_id"] is None:
            raise ValueError(
                "Missing the required parameter `store_id` when calling `orgs_org_id_secretstores_store_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "store_id" in params:
            path_params["storeId"] = params["store_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/secretstores/{storeId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SecretStoreResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_get(self, org_id, **kwargs):  # noqa: E501
        """List Users with roles in an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List Users with roles in an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_post(self, body, org_id, **kwargs):  # noqa: E501
        """Creates a new service user.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param NewServiceUserRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: UserProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Creates a new service user.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param NewServiceUserRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: UserProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_users_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserProfileResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_delete(self, org_id, user_id, **kwargs):  # noqa: E501
        """Remove the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_delete(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_delete_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_delete_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_delete_with_http_info(
        self, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_delete_with_http_info(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_get(self, org_id, user_id, **kwargs):  # noqa: E501
        """Get the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_get(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_get_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_get_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_get_with_http_info(
        self, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_get_with_http_info(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_patch(
        self, body, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Organization  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_user_id_patch(body, org_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_patch_with_http_info(
                body, org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_patch_with_http_info(
                body, org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_patch_with_http_info(
        self, body, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Organization  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_user_id_patch_with_http_info(body, org_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_get(self, org_id, **kwargs):  # noqa: E501
        """List workload profiles available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List workload profiles available to the organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param int per_page: The maximum number of items to return in a page of results
        :param str page: The page token to request from
        :return: list[WorkloadProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "per_page", "page"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkloadProfileResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create new Workload Profile  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_workload_profiles_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileRequest body: Workload profile details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: WorkloadProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create new Workload Profile  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_workload_profiles_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param WorkloadProfileRequest body: Workload profile details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: WorkloadProfileResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_workload_profiles_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_id_versions_version_delete(
        self, org_id, profile_id, version, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_id_versions_version_delete(org_id, profile_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_id: The Workload profile ID.   (required)
        :param str version: The Version.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
                org_id, profile_id, version, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
                org_id, profile_id, version, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(
        self, org_id, profile_id, version, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_id_versions_version_delete_with_http_info(org_id, profile_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_id: The Workload profile ID.   (required)
        :param str version: The Version.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_id_versions_version_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if "profile_id" not in params or params["profile_id"] is None:
            raise ValueError(
                "Missing the required parameter `profile_id` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if "version" not in params or params["version"] is None:
            raise ValueError(
                "Missing the required parameter `version` when calling `orgs_org_id_workload_profiles_profile_id_versions_version_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_id" in params:
            path_params["profileId"] = params["profile_id"]  # noqa: E501
        if "version" in params:
            path_params["version"] = params["version"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileId}/versions/{version}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_qid_delete(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile  # noqa: E501

        This will also delete all versions of a workload profile.  It is not possible to delete profiles of other organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_delete(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The Workload profile ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Delete a Workload Profile  # noqa: E501

        This will also delete all versions of a workload profile.  It is not possible to delete profiles of other organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_delete_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The Workload profile ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_qid_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_qid_delete`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `orgs_org_id_workload_profiles_profile_qid_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_workload_profiles_profile_qid_get(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Get a Workload Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_get(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The fully qualified Workload ID. (If not a profile from the current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)   (required)
        :return: WorkloadProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
                org_id, profile_qid, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_workload_profiles_profile_qid_get_with_http_info(
        self, org_id, profile_qid, **kwargs
    ):  # noqa: E501
        """Get a Workload Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_workload_profiles_profile_qid_get_with_http_info(org_id, profile_qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str profile_qid: The fully qualified Workload ID. (If not a profile from the current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)   (required)
        :return: WorkloadProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "profile_qid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_workload_profiles_profile_qid_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_workload_profiles_profile_qid_get`"
            )  # noqa: E501
        # verify the required parameter 'profile_qid' is set
        if "profile_qid" not in params or params["profile_qid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_qid` when calling `orgs_org_id_workload_profiles_profile_qid_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "profile_qid" in params:
            path_params["profileQid"] = params["profile_qid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/workload-profiles/{profileQid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkloadProfileResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_delta(self, body, org_id, app_id, delta_id, **kwargs):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.put_delta(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: None
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_delta_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_delta_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def put_delta_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.put_delta_with_http_info(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: None
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_delta" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `put_delta`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def restart_run(self, org_id, app_id, pipeline_id, run_id, **kwargs):  # noqa: E501
        """Restart a Run within an Pipeline by cloning it with the same trigger and inputs.  # noqa: E501

        Attempts to copy and restart the specified Run. The run must be in a completed state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_run(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.restart_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.restart_run_with_http_info(
                org_id, app_id, pipeline_id, run_id, **kwargs
            )  # noqa: E501
            return data

    def restart_run_with_http_info(
        self, org_id, app_id, pipeline_id, run_id, **kwargs
    ):  # noqa: E501
        """Restart a Run within an Pipeline by cloning it with the same trigger and inputs.  # noqa: E501

        Attempts to copy and restart the specified Run. The run must be in a completed state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_run_with_http_info(org_id, app_id, pipeline_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str run_id: The Run ID (required)
        :param str idempotency_key: The HTTP Idempotency-Key
        :return: RunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app_id",
            "pipeline_id",
            "run_id",
            "idempotency_key",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_run" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `restart_run`"
            )  # noqa: E501
        # verify the required parameter 'run_id' is set
        if "run_id" not in params or params["run_id"] is None:
            raise ValueError(
                "Missing the required parameter `run_id` when calling `restart_run`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501
        if "run_id" in params:
            path_params["runId"] = params["run_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "idempotency_key" in params:
            header_params["Idempotency-Key"] = params["idempotency_key"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}/runs/{runId}/restart",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RunResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def tokens_get(self, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.tokens_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_with_http_info(self, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/tokens",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="dict(str, object)",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def tokens_token_id_delete(self, token_id, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_token_id_delete(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: The token ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.tokens_token_id_delete_with_http_info(
                token_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.tokens_token_id_delete_with_http_info(
                token_id, **kwargs
            )  # noqa: E501
            return data

    def tokens_token_id_delete_with_http_info(self, token_id, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_token_id_delete_with_http_info(token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: The token ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["token_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'token_id' is set
        if "token_id" not in params or params["token_id"] is None:
            raise ValueError(
                "Missing the required parameter `token_id` when calling `tokens_token_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "token_id" in params:
            path_params["tokenId"] = params["token_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/tokens/{tokenId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_pipeline(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """update a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_pipeline_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_pipeline_with_http_info(
                body, org_id, app_id, pipeline_id, **kwargs
            )  # noqa: E501
            return data

    def update_pipeline_with_http_info(
        self, body, org_id, app_id, pipeline_id, **kwargs
    ):  # noqa: E501
        """update a Pipeline within an Application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_with_http_info(body, org_id, app_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str org_id: The Organization ID (required)
        :param str app_id: The Application ID (required)
        :param str pipeline_id: The Pipeline ID (required)
        :param str if_match: Indicate that the request should only succeed if there is an etag match
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "body",
            "org_id",
            "app_id",
            "pipeline_id",
            "if_match",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pipeline" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `update_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `update_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `update_pipeline`"
            )  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if "pipeline_id" not in params or params["pipeline_id"] is None:
            raise ValueError(
                "Missing the required parameter `pipeline_id` when calling `update_pipeline`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "pipeline_id" in params:
            path_params["pipelineId"] = params["pipeline_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "if_match" in params:
            header_params["If-Match"] = params["if_match"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-yaml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/pipelines/{pipelineId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Pipeline",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def users_me_get(self, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.users_me_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_me_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_me_get_with_http_info(self, **kwargs):  # noqa: E501
        """DEPRECATED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/users/me",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="dict(str, object)",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def users_user_id_tokens_get(self, user_id, **kwargs):  # noqa: E501
        """Lists tokens associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :return: list[TokenInfoResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.users_user_id_tokens_get_with_http_info(
                user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.users_user_id_tokens_get_with_http_info(
                user_id, **kwargs
            )  # noqa: E501
            return data

    def users_user_id_tokens_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Lists tokens associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :return: list[TokenInfoResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_id_tokens_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `users_user_id_tokens_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/users/{userId}/tokens",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TokenInfoResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def users_user_id_tokens_post(self, body, user_id, **kwargs):  # noqa: E501
        """Creates a new static token for a user.  # noqa: E501

               This is only supported for users of type `service`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.users_user_id_tokens_post(body, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param TokenDefinitionRequest body: The definition of the token.

        (required)
               :param str user_id: The user ID.   (required)
               :return: TokenResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.users_user_id_tokens_post_with_http_info(
                body, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.users_user_id_tokens_post_with_http_info(
                body, user_id, **kwargs
            )  # noqa: E501
            return data

    def users_user_id_tokens_post_with_http_info(
        self, body, user_id, **kwargs
    ):  # noqa: E501
        """Creates a new static token for a user.  # noqa: E501

               This is only supported for users of type `service`.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.users_user_id_tokens_post_with_http_info(body, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param TokenDefinitionRequest body: The definition of the token.

        (required)
               :param str user_id: The user ID.   (required)
               :return: TokenResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_id_tokens_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `users_user_id_tokens_post`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `users_user_id_tokens_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/users/{userId}/tokens",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TokenResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def users_user_id_tokens_token_id_delete(
        self, user_id, token_id, **kwargs
    ):  # noqa: E501
        """Deletes a specific token associated with a user  # noqa: E501

        This is only possible for static tokens. To revoke session tokens - use `POST /auth/logout` with the required session token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_token_id_delete(user_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :param str token_id: The token ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.users_user_id_tokens_token_id_delete_with_http_info(
                user_id, token_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.users_user_id_tokens_token_id_delete_with_http_info(
                user_id, token_id, **kwargs
            )  # noqa: E501
            return data

    def users_user_id_tokens_token_id_delete_with_http_info(
        self, user_id, token_id, **kwargs
    ):  # noqa: E501
        """Deletes a specific token associated with a user  # noqa: E501

        This is only possible for static tokens. To revoke session tokens - use `POST /auth/logout` with the required session token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_token_id_delete_with_http_info(user_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :param str token_id: The token ID.   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "token_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_id_tokens_token_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `users_user_id_tokens_token_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'token_id' is set
        if "token_id" not in params or params["token_id"] is None:
            raise ValueError(
                "Missing the required parameter `token_id` when calling `users_user_id_tokens_token_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501
        if "token_id" in params:
            path_params["tokenId"] = params["token_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/users/{userId}/tokens/{tokenId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def users_user_id_tokens_token_id_get(
        self, user_id, token_id, **kwargs
    ):  # noqa: E501
        """Gets a specific token associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_token_id_get(user_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :param str token_id: The token ID.   (required)
        :return: TokenInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.users_user_id_tokens_token_id_get_with_http_info(
                user_id, token_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.users_user_id_tokens_token_id_get_with_http_info(
                user_id, token_id, **kwargs
            )  # noqa: E501
            return data

    def users_user_id_tokens_token_id_get_with_http_info(
        self, user_id, token_id, **kwargs
    ):  # noqa: E501
        """Gets a specific token associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_user_id_tokens_token_id_get_with_http_info(user_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID.   (required)
        :param str token_id: The token ID.   (required)
        :return: TokenInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "token_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_id_tokens_token_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `users_user_id_tokens_token_id_get`"
            )  # noqa: E501
        # verify the required parameter 'token_id' is set
        if "token_id" not in params or params["token_id"] is None:
            raise ValueError(
                "Missing the required parameter `token_id` when calling `users_user_id_tokens_token_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501
        if "token_id" in params:
            path_params["tokenId"] = params["token_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/users/{userId}/tokens/{tokenId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TokenInfoResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
