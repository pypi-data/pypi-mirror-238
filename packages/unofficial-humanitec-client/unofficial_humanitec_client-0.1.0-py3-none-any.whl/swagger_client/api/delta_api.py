# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DeltaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_delta(self, org_id, app_id, delta_id, **kwargs):  # noqa: E501
        """Fetch an existing Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delta(org_id, app_id, delta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str delta_id: ID of the Delta to fetch.   (required)
        :return: DeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_delta_with_http_info(
                org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_delta_with_http_info(
                org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def get_delta_with_http_info(
        self, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Fetch an existing Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delta_with_http_info(org_id, app_id, delta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str delta_id: ID of the Delta to fetch.   (required)
        :return: DeltaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delta" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `get_delta`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `get_delta`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `get_delta`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeltaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Mark a Delta as \"archived\"  # noqa: E501

               Archived Deltas are still accessible but can no longer be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: Either `true` or `false`.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Mark a Delta as \"archived\"  # noqa: E501

               Archived Deltas are still accessible but can no longer be updated.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param bool body: Either `true` or `false`.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_archived_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/archived",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the Environment of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new Environment ID. (NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the Environment of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new Environment ID. (NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_env_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/env_id",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the name of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new name.(NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Change the name of a Delta  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put_with_http_info(body, org_id, app_id, delta_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param str body: The new name.(NOTE: The string must still be JSON encoded.)

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str delta_id: ID of the Deployment Delta.   (required)
               :return: None
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_metadata_name_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/metadata/name",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_delta_id_patch(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_patch(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param list[DeltaRequest] body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: DeltaResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_delta_id_patch_with_http_info(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param list[DeltaRequest] body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: DeltaResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_delta_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `orgs_org_id_apps_app_id_deltas_delta_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DeltaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_get(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Deltas in an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_deltas_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param bool archived: If true, return archived Deltas.
        :param str env: Only return Deltas associated with the specified Environment.
        :return: list[DeltaResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Deltas in an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_deltas_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param bool archived: If true, return archived Deltas.
        :param str env: Only return Deltas associated with the specified Environment.
        :return: list[DeltaResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "archived", "env"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501
        if "env" in params:
            query_params.append(("env", params["env"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DeltaResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_deltas_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_post(body, org_id, app_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: A Deployment Delta to create.

        The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.

        NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :return: InlineResponse200
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_deltas_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_deltas_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_deltas_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Create a new Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_apps_app_id_deltas_post_with_http_info(body, org_id, app_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: A Deployment Delta to create.

        The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.

        NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response. (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :return: InlineResponse200
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_deltas_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_deltas_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse200",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_delta(self, body, org_id, app_id, delta_id, **kwargs):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.put_delta(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: None
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_delta_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_delta_with_http_info(
                body, org_id, app_id, delta_id, **kwargs
            )  # noqa: E501
            return data

    def put_delta_with_http_info(
        self, body, org_id, app_id, delta_id, **kwargs
    ):  # noqa: E501
        """Update an existing Delta  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.put_delta_with_http_info(body, org_id, app_id, delta_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param DeltaRequest body: An array of Deltas.

        The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

        * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

        * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

        * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

        Simplification involves:

        * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

        * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

        **Extension to JSON Patch**

        If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

        If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

        _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._ (required)
                :param str org_id: The Organization ID.   (required)
                :param str app_id: The Application ID.   (required)
                :param str delta_id: ID of the Delta to update.   (required)
                :return: None
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "delta_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_delta" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `put_delta`"
            )  # noqa: E501
        # verify the required parameter 'delta_id' is set
        if "delta_id" not in params or params["delta_id"] is None:
            raise ValueError(
                "Missing the required parameter `delta_id` when calling `put_delta`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "delta_id" in params:
            path_params["deltaId"] = params["delta_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
