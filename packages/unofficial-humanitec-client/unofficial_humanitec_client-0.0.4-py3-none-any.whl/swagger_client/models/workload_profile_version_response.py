# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkloadProfileVersionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'created_by': 'str',
        'features': 'dict(str, object)',
        'spec_schema': 'object',
        'spec_definition': 'WorkloadProfileVersionSpecDefinition',
        'notes': 'str',
        'org_id': 'str',
        'profile_id': 'str',
        'version': 'str',
        'workload_profile_chart': 'WorkloadProfileChartReference'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'features': 'features',
        'spec_schema': 'spec_schema',
        'spec_definition': 'spec_definition',
        'notes': 'notes',
        'org_id': 'org_id',
        'profile_id': 'profile_id',
        'version': 'version',
        'workload_profile_chart': 'workload_profile_chart'
    }

    def __init__(self, created_at=None, created_by=None, features=None, spec_schema=None, spec_definition=None, notes=None, org_id=None, profile_id=None, version=None, workload_profile_chart=None):  # noqa: E501
        """WorkloadProfileVersionResponse - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._features = None
        self._spec_schema = None
        self._spec_definition = None
        self._notes = None
        self._org_id = None
        self._profile_id = None
        self._version = None
        self._workload_profile_chart = None
        self.discriminator = None
        self.created_at = created_at
        self.created_by = created_by
        self.features = features
        self.spec_schema = spec_schema
        if spec_definition is not None:
            self.spec_definition = spec_definition
        self.notes = notes
        self.org_id = org_id
        self.profile_id = profile_id
        self.version = version
        self.workload_profile_chart = workload_profile_chart

    @property
    def created_at(self):
        """Gets the created_at of this WorkloadProfileVersionResponse.  # noqa: E501

        Creation date  # noqa: E501

        :return: The created_at of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkloadProfileVersionResponse.

        Creation date  # noqa: E501

        :param created_at: The created_at of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this WorkloadProfileVersionResponse.  # noqa: E501

        User created the profile  # noqa: E501

        :return: The created_by of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkloadProfileVersionResponse.

        User created the profile  # noqa: E501

        :param created_by: The created_by of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def features(self):
        """Gets the features of this WorkloadProfileVersionResponse.  # noqa: E501

        A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.  {  }  # noqa: E501

        :return: The features of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this WorkloadProfileVersionResponse.

        A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.  {  }  # noqa: E501

        :param features: The features of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: dict(str, object)
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def spec_schema(self):
        """Gets the spec_schema of this WorkloadProfileVersionResponse.  # noqa: E501

        OpenAPI schema used to validate the spec.  # noqa: E501

        :return: The spec_schema of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: object
        """
        return self._spec_schema

    @spec_schema.setter
    def spec_schema(self, spec_schema):
        """Sets the spec_schema of this WorkloadProfileVersionResponse.

        OpenAPI schema used to validate the spec.  # noqa: E501

        :param spec_schema: The spec_schema of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: object
        """
        if spec_schema is None:
            raise ValueError("Invalid value for `spec_schema`, must not be `None`")  # noqa: E501

        self._spec_schema = spec_schema

    @property
    def spec_definition(self):
        """Gets the spec_definition of this WorkloadProfileVersionResponse.  # noqa: E501


        :return: The spec_definition of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: WorkloadProfileVersionSpecDefinition
        """
        return self._spec_definition

    @spec_definition.setter
    def spec_definition(self, spec_definition):
        """Sets the spec_definition of this WorkloadProfileVersionResponse.


        :param spec_definition: The spec_definition of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: WorkloadProfileVersionSpecDefinition
        """

        self._spec_definition = spec_definition

    @property
    def notes(self):
        """Gets the notes of this WorkloadProfileVersionResponse.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this WorkloadProfileVersionResponse.

        Notes  # noqa: E501

        :param notes: The notes of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def org_id(self):
        """Gets the org_id of this WorkloadProfileVersionResponse.  # noqa: E501

        Organization ID  # noqa: E501

        :return: The org_id of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this WorkloadProfileVersionResponse.

        Organization ID  # noqa: E501

        :param org_id: The org_id of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def profile_id(self):
        """Gets the profile_id of this WorkloadProfileVersionResponse.  # noqa: E501

        Workload Profile ID  # noqa: E501

        :return: The profile_id of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this WorkloadProfileVersionResponse.

        Workload Profile ID  # noqa: E501

        :param profile_id: The profile_id of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")  # noqa: E501

        self._profile_id = profile_id

    @property
    def version(self):
        """Gets the version of this WorkloadProfileVersionResponse.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkloadProfileVersionResponse.

        Version  # noqa: E501

        :param version: The version of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def workload_profile_chart(self):
        """Gets the workload_profile_chart of this WorkloadProfileVersionResponse.  # noqa: E501


        :return: The workload_profile_chart of this WorkloadProfileVersionResponse.  # noqa: E501
        :rtype: WorkloadProfileChartReference
        """
        return self._workload_profile_chart

    @workload_profile_chart.setter
    def workload_profile_chart(self, workload_profile_chart):
        """Sets the workload_profile_chart of this WorkloadProfileVersionResponse.


        :param workload_profile_chart: The workload_profile_chart of this WorkloadProfileVersionResponse.  # noqa: E501
        :type: WorkloadProfileChartReference
        """
        if workload_profile_chart is None:
            raise ValueError("Invalid value for `workload_profile_chart`, must not be `None`")  # noqa: E501

        self._workload_profile_chart = workload_profile_chart

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkloadProfileVersionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkloadProfileVersionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
