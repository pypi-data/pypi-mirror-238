# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunJobStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'status': 'str',
        'status_message': 'str',
        'created_at': 'datetime',
        'completed_at': 'datetime',
        'timeout_seconds': 'int'
    }

    attribute_map = {
        'index': 'index',
        'status': 'status',
        'status_message': 'status_message',
        'created_at': 'created_at',
        'completed_at': 'completed_at',
        'timeout_seconds': 'timeout_seconds'
    }

    def __init__(self, index=None, status=None, status_message=None, created_at=None, completed_at=None, timeout_seconds=None):  # noqa: E501
        """RunJobStep - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._status = None
        self._status_message = None
        self._created_at = None
        self._completed_at = None
        self._timeout_seconds = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if created_at is not None:
            self.created_at = created_at
        if completed_at is not None:
            self.completed_at = completed_at
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds

    @property
    def index(self):
        """Gets the index of this RunJobStep.  # noqa: E501

        The index of the Step within the Pipeline Schema.  # noqa: E501

        :return: The index of this RunJobStep.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this RunJobStep.

        The index of the Step within the Pipeline Schema.  # noqa: E501

        :param index: The index of this RunJobStep.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def status(self):
        """Gets the status of this RunJobStep.  # noqa: E501

        The current status of this Step within the Job.  # noqa: E501

        :return: The status of this RunJobStep.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunJobStep.

        The current status of this Step within the Job.  # noqa: E501

        :param status: The status of this RunJobStep.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this RunJobStep.  # noqa: E501

        A human-readable message indicating the reason for the status.  # noqa: E501

        :return: The status_message of this RunJobStep.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this RunJobStep.

        A human-readable message indicating the reason for the status.  # noqa: E501

        :param status_message: The status_message of this RunJobStep.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def created_at(self):
        """Gets the created_at of this RunJobStep.  # noqa: E501

        The date and time when this Step was first created within the Job.  # noqa: E501

        :return: The created_at of this RunJobStep.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RunJobStep.

        The date and time when this Step was first created within the Job.  # noqa: E501

        :param created_at: The created_at of this RunJobStep.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def completed_at(self):
        """Gets the completed_at of this RunJobStep.  # noqa: E501

        The date and time when this Step entered a successful, failed, or cancelled status.  # noqa: E501

        :return: The completed_at of this RunJobStep.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this RunJobStep.

        The date and time when this Step entered a successful, failed, or cancelled status.  # noqa: E501

        :param completed_at: The completed_at of this RunJobStep.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this RunJobStep.  # noqa: E501

        The timeout for this Job.  # noqa: E501

        :return: The timeout_seconds of this RunJobStep.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this RunJobStep.

        The timeout for this Job.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this RunJobStep.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunJobStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunJobStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
