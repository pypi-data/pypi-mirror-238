# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'description': 'str',
        'is_secret': 'bool',
        'key': 'str',
        'secret_key': 'str',
        'secret_store_id': 'str',
        'secret_version': 'str',
        'source': 'ValueSource',
        'updated_at': 'datetime',
        'value': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'description': 'description',
        'is_secret': 'is_secret',
        'key': 'key',
        'secret_key': 'secret_key',
        'secret_store_id': 'secret_store_id',
        'secret_version': 'secret_version',
        'source': 'source',
        'updated_at': 'updated_at',
        'value': 'value'
    }

    def __init__(self, created_at=None, description=None, is_secret=None, key=None, secret_key=None, secret_store_id=None, secret_version=None, source=None, updated_at=None, value=None):  # noqa: E501
        """ValueResponse - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._description = None
        self._is_secret = None
        self._key = None
        self._secret_key = None
        self._secret_store_id = None
        self._secret_version = None
        self._source = None
        self._updated_at = None
        self._value = None
        self.discriminator = None
        self.created_at = created_at
        self.description = description
        self.is_secret = is_secret
        self.key = key
        self.secret_key = secret_key
        self.secret_store_id = secret_store_id
        self.secret_version = secret_version
        self.source = source
        self.updated_at = updated_at
        self.value = value

    @property
    def created_at(self):
        """Gets the created_at of this ValueResponse.  # noqa: E501


        :return: The created_at of this ValueResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ValueResponse.


        :param created_at: The created_at of this ValueResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ValueResponse.  # noqa: E501

        A Human friendly description of what the Shared Value is.  # noqa: E501

        :return: The description of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ValueResponse.

        A Human friendly description of what the Shared Value is.  # noqa: E501

        :param description: The description of this ValueResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def is_secret(self):
        """Gets the is_secret of this ValueResponse.  # noqa: E501

        Specified that the Shared Value contains a secret.  # noqa: E501

        :return: The is_secret of this ValueResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_secret

    @is_secret.setter
    def is_secret(self, is_secret):
        """Sets the is_secret of this ValueResponse.

        Specified that the Shared Value contains a secret.  # noqa: E501

        :param is_secret: The is_secret of this ValueResponse.  # noqa: E501
        :type: bool
        """
        if is_secret is None:
            raise ValueError("Invalid value for `is_secret`, must not be `None`")  # noqa: E501

        self._is_secret = is_secret

    @property
    def key(self):
        """Gets the key of this ValueResponse.  # noqa: E501

        The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.  # noqa: E501

        :return: The key of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ValueResponse.

        The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.  # noqa: E501

        :param key: The key of this ValueResponse.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def secret_key(self):
        """Gets the secret_key of this ValueResponse.  # noqa: E501

        Location of the secret value in the secret store.  # noqa: E501

        :return: The secret_key of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ValueResponse.

        Location of the secret value in the secret store.  # noqa: E501

        :param secret_key: The secret_key of this ValueResponse.  # noqa: E501
        :type: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    @property
    def secret_store_id(self):
        """Gets the secret_store_id of this ValueResponse.  # noqa: E501


        :return: The secret_store_id of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._secret_store_id

    @secret_store_id.setter
    def secret_store_id(self, secret_store_id):
        """Sets the secret_store_id of this ValueResponse.


        :param secret_store_id: The secret_store_id of this ValueResponse.  # noqa: E501
        :type: str
        """
        if secret_store_id is None:
            raise ValueError("Invalid value for `secret_store_id`, must not be `None`")  # noqa: E501

        self._secret_store_id = secret_store_id

    @property
    def secret_version(self):
        """Gets the secret_version of this ValueResponse.  # noqa: E501

        Version of the current secret value as returned by the secret store.  # noqa: E501

        :return: The secret_version of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this ValueResponse.

        Version of the current secret value as returned by the secret store.  # noqa: E501

        :param secret_version: The secret_version of this ValueResponse.  # noqa: E501
        :type: str
        """
        if secret_version is None:
            raise ValueError("Invalid value for `secret_version`, must not be `None`")  # noqa: E501

        self._secret_version = secret_version

    @property
    def source(self):
        """Gets the source of this ValueResponse.  # noqa: E501


        :return: The source of this ValueResponse.  # noqa: E501
        :rtype: ValueSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ValueResponse.


        :param source: The source of this ValueResponse.  # noqa: E501
        :type: ValueSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def updated_at(self):
        """Gets the updated_at of this ValueResponse.  # noqa: E501


        :return: The updated_at of this ValueResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ValueResponse.


        :param updated_at: The updated_at of this ValueResponse.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def value(self):
        """Gets the value of this ValueResponse.  # noqa: E501

        The value that will be stored. (Will be always empty for secrets.)  # noqa: E501

        :return: The value of this ValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueResponse.

        The value that will be stored. (Will be always empty for secrets.)  # noqa: E501

        :param value: The value of this ValueResponse.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
