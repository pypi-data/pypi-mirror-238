# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResourceDefinitionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete(
        self, org_id, def_id, criteria_id, **kwargs
    ):  # noqa: E501
        """Delete a Matching Criteria from a Resource Definition.  # noqa: E501

        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.  If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.  The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete(org_id, def_id, criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param str criteria_id: The Matching Criteria ID.   (required)
        :param bool force: If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
                org_id, def_id, criteria_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
                org_id, def_id, criteria_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(
        self, org_id, def_id, criteria_id, **kwargs
    ):  # noqa: E501
        """Delete a Matching Criteria from a Resource Definition.  # noqa: E501

        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.  If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.  The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete_with_http_info(org_id, def_id, criteria_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param str criteria_id: The Matching Criteria ID.   (required)
        :param bool force: If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id", "criteria_id", "force"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'criteria_id' is set
        if "criteria_id" not in params or params["criteria_id"] is None:
            raise ValueError(
                "Missing the required parameter `criteria_id` when calling `orgs_org_id_resources_defs_def_id_criteria_criteria_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501
        if "criteria_id" in params:
            path_params["criteriaId"] = params["criteria_id"]  # noqa: E501

        query_params = []
        if "force" in params:
            query_params.append(("force", params["force"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_criteria_post(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Add a new Matching Criteria to a Resource Definition.  # noqa: E501

               Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.  For example, given 3 sets of matching criteria for the same type:  ```  1. {\"env_type\":\"test\"}  2. {\"env_type\":\"development\"}  3. {\"env_type\":\"test\", \"app_id\":\"my-app\"} ```  If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resource definitions matching the criteria: #1 & #3. Definition #3 will be chosen because its matching criteria is the most specific.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_post(body, org_id, def_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param MatchingCriteriaRuleRequest body: Matching Criteria rules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str def_id: The Resource Definition ID.   (required)
               :return: MatchingCriteriaResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Add a new Matching Criteria to a Resource Definition.  # noqa: E501

               Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.  For example, given 3 sets of matching criteria for the same type:  ```  1. {\"env_type\":\"test\"}  2. {\"env_type\":\"development\"}  3. {\"env_type\":\"test\", \"app_id\":\"my-app\"} ```  If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resource definitions matching the criteria: #1 & #3. Definition #3 will be chosen because its matching criteria is the most specific.  # noqa: E501
               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_def_id_criteria_post_with_http_info(body, org_id, def_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param MatchingCriteriaRuleRequest body: Matching Criteria rules.

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str def_id: The Resource Definition ID.   (required)
               :return: MatchingCriteriaResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_criteria_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_criteria_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/criteria",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MatchingCriteriaResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_delete(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Delete a Resource Definition.  # noqa: E501

        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.  If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.  The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).  The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_delete(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param bool force: If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_delete_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_delete_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_delete_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Delete a Resource Definition.  # noqa: E501

        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.  If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.  The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).  The Resource Definition that has been marked for deletion cannot be used to provision new resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_delete_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :param bool force: If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id", "force"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []
        if "force" in params:
            query_params.append(("force", params["force"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_get(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Get a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_get(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: ResourceDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_get_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Get a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_get_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: ResourceDefinitionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_get`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_patch(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_patch(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param PatchResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.

        For the map properties, such as PatchResourceDefinitionRequest.DriverInputs, the merge operation is applied.

        Merge rules are as follows:

        - If a map property has a value, it is replaced (or added).

        - If a map property is set to `null`, it is removed.

        - If a map property is not included (missing in JSON), it remains unchanged. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_patch_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_patch_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_patch_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_patch_with_http_info(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param PatchResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.

        For the map properties, such as PatchResourceDefinitionRequest.DriverInputs, the merge operation is applied.

        Merge rules are as follows:

        - If a map property has a value, it is replaced (or added).

        - If a map property is set to `null`, it is removed.

        - If a map property is not included (missing in JSON), it remains unchanged. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_put(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_put(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param UpdateResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PUT operation updates a resource definition using the provided payload. An empty driver_account or driver_inputs property will unset the existing values.

        Currently the resource and driver types can't be changed. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_put_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_def_id_put_with_http_info(
                body, org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_put_with_http_info(
        self, body, org_id, def_id, **kwargs
    ):  # noqa: E501
        """Update a Resource Definition.  # noqa: E501

                This method makes a synchronous HTTP request by default. To make an
                asynchronous HTTP request, please pass async_req=True
                >>> thread = api.orgs_org_id_resources_defs_def_id_put_with_http_info(body, org_id, def_id, async_req=True)
                >>> result = thread.get()

                :param async_req bool
                :param UpdateResourceDefinitionRequestRequest body: The Resource Definition record details.

        The PUT operation updates a resource definition using the provided payload. An empty driver_account or driver_inputs property will unset the existing values.

        Currently the resource and driver types can't be changed. (required)
                :param str org_id: The Organization ID.   (required)
                :param str def_id: The Resource Definition ID.   (required)
                :return: ResourceDefinitionResponse
                         If the method is called asynchronously,
                         returns the request thread.
        """

        all_params = ["body", "org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_put" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_def_id_resources_get(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned via a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_resources_get(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
                org_id, def_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_def_id_resources_get_with_http_info(
        self, org_id, def_id, **kwargs
    ):  # noqa: E501
        """List Active Resources provisioned via a specific Resource Definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_def_id_resources_get_with_http_info(org_id, def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str def_id: The Resource Definition ID.   (required)
        :return: list[ActiveResourceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "def_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_def_id_resources_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_def_id_resources_get`"
            )  # noqa: E501
        # verify the required parameter 'def_id' is set
        if "def_id" not in params or params["def_id"] is None:
            raise ValueError(
                "Missing the required parameter `def_id` when calling `orgs_org_id_resources_defs_def_id_resources_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "def_id" in params:
            path_params["defId"] = params["def_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs/{defId}/resources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ActiveResourceResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_get(self, org_id, **kwargs):  # noqa: E501
        """List Resource Definitions.  # noqa: E501

        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app: (Optional) Filter Resource Definitions that may match a specific Application.
        :param str env: (Optional) Filter Resource Definitions that may match a specific Environment.
        :param str env_type: (Optional) Filter Resource Definitions that may match a specific Environment Type.
        :param str res: (Optional) Filter Resource Definitions that may match a specific Resource.
        :param str res_type: (Optional) Filter Resource Definitions that may match a specific Resource Type.
        :param str _class: (Optional) Filter Resource Definitions that may match a specific Class.
        :return: list[ResourceDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_get_with_http_info(
        self, org_id, **kwargs
    ):  # noqa: E501
        """List Resource Definitions.  # noqa: E501

        Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_resources_defs_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app: (Optional) Filter Resource Definitions that may match a specific Application.
        :param str env: (Optional) Filter Resource Definitions that may match a specific Environment.
        :param str env_type: (Optional) Filter Resource Definitions that may match a specific Environment Type.
        :param str res: (Optional) Filter Resource Definitions that may match a specific Resource.
        :param str res_type: (Optional) Filter Resource Definitions that may match a specific Resource Type.
        :param str _class: (Optional) Filter Resource Definitions that may match a specific Class.
        :return: list[ResourceDefinitionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "org_id",
            "app",
            "env",
            "env_type",
            "res",
            "res_type",
            "_class",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []
        if "app" in params:
            query_params.append(("app", params["app"]))  # noqa: E501
        if "env" in params:
            query_params.append(("env", params["env"]))  # noqa: E501
        if "env_type" in params:
            query_params.append(("env_type", params["env_type"]))  # noqa: E501
        if "res" in params:
            query_params.append(("res", params["res"]))  # noqa: E501
        if "res_type" in params:
            query_params.append(("res_type", params["res_type"]))  # noqa: E501
        if "_class" in params:
            query_params.append(("class", params["_class"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ResourceDefinitionResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_resources_defs_post(self, body, org_id, **kwargs):  # noqa: E501
        """Create a new Resource Definition.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateResourceDefinitionRequestRequest body: The Resource Definition details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ResourceDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_resources_defs_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_resources_defs_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_resources_defs_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Create a new Resource Definition.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_resources_defs_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param CreateResourceDefinitionRequestRequest body: The Resource Definition details.

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: ResourceDefinitionResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_resources_defs_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_resources_defs_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_resources_defs_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/resources/defs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ResourceDefinitionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
