# coding: utf-8

"""
    Humanitec API

    # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.  ### Bearer Authentication This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure. New Bearer tokens can be obtained via the UI:  1. Log into Humanitec at https://app.humanitec.io 1. Go to **Organization Settings** 1. Select **API tokens** 1. Enter a *name* for the new token and click on **Generate new token**  The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:  ```     curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps ```  ### JWT Authentication This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.) The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:  ```     curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps ```  ## Content Types All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning** | | --- | --- | | `200` | Success | | `201` | Success (In future, `201` will be replaced by `200`) | | `204` | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning** | | --- | --- | | `400` | General error. (Body will contain details) | | `401` | Attempt to access protected resource without `Authorization` Header. | | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. | | `404` | Resource not found. | | `405` | Method not allowed | | `409` | Conflict. Usually indicated a resource with that ID already exists. | | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429` | Too many requests - request rate limit has been reached. | | `500` | Internal Error. If it occurs repeatedly, contact support. |   # noqa: E501

    OpenAPI spec version: 0.24.1
    Contact: apiteam@humanitec.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserRoleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orgs_org_id_apps_app_id_users_get(self, org_id, app_id, **kwargs):  # noqa: E501
        """List Users with roles in an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_get(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_get_with_http_info(
                org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_get_with_http_info(
        self, org_id, app_id, **kwargs
    ):  # noqa: E501
        """List Users with roles in an App  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_get_with_http_info(org_id, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_post(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Adds a User to an Application with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_post(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_post_with_http_info(
                body, org_id, app_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_post_with_http_info(
        self, body, org_id, app_id, **kwargs
    ):  # noqa: E501
        """Adds a User to an Application with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_post_with_http_info(body, org_id, app_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_delete(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_delete(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_delete_with_http_info(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_get(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_get(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
                org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_get_with_http_info(
        self, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_apps_app_id_users_user_id_get_with_http_info(org_id, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str app_id: The Application ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_apps_app_id_users_user_id_patch(
        self, body, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Application  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_user_id_patch(body, org_id, app_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
                body, org_id, app_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
                body, org_id, app_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(
        self, body, org_id, app_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Application  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_apps_app_id_users_user_id_patch_with_http_info(body, org_id, app_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str app_id: The Application ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "app_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_apps_app_id_users_user_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'app_id' is set
        if "app_id" not in params or params["app_id"] is None:
            raise ValueError(
                "Missing the required parameter `app_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_apps_app_id_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "app_id" in params:
            path_params["appId"] = params["app_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/apps/{appId}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_post(
        self, body, org_id, env_type, **kwargs
    ):  # noqa: E501
        """Adds a User to an Environment Type with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_post(body, org_id, env_type, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_users_post_with_http_info(
                body, org_id, env_type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_env_types_env_type_users_post_with_http_info(
                body, org_id, env_type, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_post_with_http_info(
        self, body, org_id, env_type, **kwargs
    ):  # noqa: E501
        """Adds a User to an Environment Type with a Role  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_post_with_http_info(body, org_id, env_type, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserRoleRequest body: The user ID and the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "env_type"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_delete(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_delete(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
                    org_id, env_type, user_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_delete_with_http_info(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_delete"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_get(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_get(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
                org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(
        self, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Environment Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_get_with_http_info(org_id, env_type, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str env_type: The Environment Type.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_env_types_env_type_users_user_id_patch(
        self, body, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Environment Type  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_patch(body, org_id, env_type, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
                    body, org_id, env_type, user_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
                body, org_id, env_type, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(
        self, body, org_id, env_type, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Environment Type  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_env_types_env_type_users_user_id_patch_with_http_info(body, org_id, env_type, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str env_type: The Environment Type.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "env_type", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_env_types_env_type_users_user_id_patch"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'env_type' is set
        if "env_type" not in params or params["env_type"] is None:
            raise ValueError(
                "Missing the required parameter `env_type` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_env_types_env_type_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "env_type" in params:
            path_params["envType"] = params["env_type"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/env-types/{envType}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_invitations_post(self, body, org_id, **kwargs):  # noqa: E501
        """Invites a user to an Organization with a specified role.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_invitations_post(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserInviteRequestRequest body: The email and the desired role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: list[UserRoleResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_invitations_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_invitations_post_with_http_info(
                body, org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_invitations_post_with_http_info(
        self, body, org_id, **kwargs
    ):  # noqa: E501
        """Invites a user to an Organization with a specified role.  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_invitations_post_with_http_info(body, org_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param UserInviteRequestRequest body: The email and the desired role

        (required)
               :param str org_id: The Organization ID.   (required)
               :return: list[UserRoleResponse]
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_invitations_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_invitations_post`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_invitations_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/invitations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_get(self, org_id, **kwargs):  # noqa: E501
        """List Users with roles in an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_get(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_get_with_http_info(
                org_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_get_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """List Users with roles in an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_get_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :return: list[UserRoleResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserRoleResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_delete(self, org_id, user_id, **kwargs):  # noqa: E501
        """Remove the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_delete(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_delete_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_delete_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_delete_with_http_info(
        self, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Remove the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_delete_with_http_info(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_delete`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_get(self, org_id, user_id, **kwargs):  # noqa: E501
        """Get the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_get(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_get_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_get_with_http_info(
                org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_get_with_http_info(
        self, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Get the role of a User on an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_org_id_users_user_id_get_with_http_info(org_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The Organization ID.   (required)
        :param str user_id: The User ID   (required)
        :return: UserRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_get`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def orgs_org_id_users_user_id_patch(
        self, body, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Organization  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_user_id_patch(body, org_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.orgs_org_id_users_user_id_patch_with_http_info(
                body, org_id, user_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.orgs_org_id_users_user_id_patch_with_http_info(
                body, org_id, user_id, **kwargs
            )  # noqa: E501
            return data

    def orgs_org_id_users_user_id_patch_with_http_info(
        self, body, org_id, user_id, **kwargs
    ):  # noqa: E501
        """Update the role of a User on an Organization  # noqa: E501

               This method makes a synchronous HTTP request by default. To make an
               asynchronous HTTP request, please pass async_req=True
               >>> thread = api.orgs_org_id_users_user_id_patch_with_http_info(body, org_id, user_id, async_req=True)
               >>> result = thread.get()

               :param async_req bool
               :param RoleRequest body: The new user the role

        (required)
               :param str org_id: The Organization ID.   (required)
               :param str user_id: The User ID   (required)
               :return: UserRoleResponse
                        If the method is called asynchronously,
                        returns the request thread.
        """

        all_params = ["body", "org_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_org_id_users_user_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'org_id' is set
        if "org_id" not in params or params["org_id"] is None:
            raise ValueError(
                "Missing the required parameter `org_id` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError(
                "Missing the required parameter `user_id` when calling `orgs_org_id_users_user_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "org_id" in params:
            path_params["orgId"] = params["org_id"]  # noqa: E501
        if "user_id" in params:
            path_params["userId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = (
            self.api_client.configuration.auth_settings().keys()
        )  # noqa: E501

        return self.api_client.call_api(
            "/orgs/{orgId}/users/{userId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserRoleResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
