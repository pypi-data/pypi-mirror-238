# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bgrafana-api.models.query_data_response import QueryDataResponse  # noqa: E501

class TestQueryDataResponse(unittest.TestCase):
    """QueryDataResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryDataResponse:
        """Test QueryDataResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryDataResponse`
        """
        model = QueryDataResponse()  # noqa: E501
        if include_optional:
            return QueryDataResponse(
                responses = {
                    'key' : bgrafana-api.models.data_response_contains_the_results_from_a_data_query/.DataResponse contains the results from a DataQuery.(
                        error = '', 
                        frames = [
                            bgrafana-api.models.frame_is_a_columnar_data_structure_where_each_column_is_a_field/.Frame is a columnar data structure where each column is a Field.(
                                fields = [
                                    bgrafana-api.models.field_represents_a_typed_column_of_data_within_a_frame/.Field represents a typed column of data within a Frame.(
                                        config = bgrafana-api.models.field_config_represents_the_display_properties_for_a_field/.FieldConfig represents the display properties for a Field.(
                                            color = bgrafana-api.models.color.color(), 
                                            custom = bgrafana-api.models.custom.custom(), 
                                            decimals = 56, 
                                            description = '', 
                                            display_name = '', 
                                            display_name_from_ds = '', 
                                            filterable = True, 
                                            interval = 1.337, 
                                            links = [
                                                bgrafana-api.models.data_link.DataLink(
                                                    target_blank = True, 
                                                    title = '', 
                                                    url = '', )
                                                ], 
                                            mappings = [
                                                bgrafana-api.models.value_mapping.ValueMapping()
                                                ], 
                                            max = 1.337, 
                                            min = 1.337, 
                                            no_value = '', 
                                            path = '', 
                                            thresholds = bgrafana-api.models.thresholds_config.ThresholdsConfig(
                                                mode = '', 
                                                steps = [
                                                    bgrafana-api.models.threshold.Threshold(
                                                        color = '', 
                                                        state = '', 
                                                        value = 1.337, )
                                                    ], ), 
                                            type = bgrafana-api.models.field_type_config.FieldTypeConfig(
                                                enum = bgrafana-api.models.enum_field_config.EnumFieldConfig(
                                                    color = [
                                                        ''
                                                        ], 
                                                    description = [
                                                        ''
                                                        ], 
                                                    icon = [
                                                        ''
                                                        ], 
                                                    text = [
                                                        ''
                                                        ], ), ), 
                                            unit = '', 
                                            writeable = True, ), 
                                        labels = {
                                            'key' : ''
                                            }, 
                                        name = '', )
                                    ], 
                                meta = bgrafana-api.models.frame_meta_matches:.FrameMeta matches:(
                                    channel = '', 
                                    custom = null, 
                                    data_topic = '', 
                                    executed_query_string = '', 
                                    notices = [
                                        bgrafana-api.models.notice_provides_a_structure_for_presenting_notifications_in_grafana's_user_interface/.Notice provides a structure for presenting notifications in Grafana's user interface.(
                                            inspect = 56, 
                                            link = '', 
                                            severity = 56, )
                                        ], 
                                    path = '', 
                                    path_separator = '', 
                                    preferred_visualisation_type = '', 
                                    stats = [
                                        bgrafana-api.models.query_stat_is_used_for_storing_arbitrary_statistics_metadata_related_to_a_query_and_its_result,_e/g/_total_request_time,_data_processing_time/.QueryStat is used for storing arbitrary statistics metadata related to a query and its result, e.g. total request time, data processing time.(
                                            custom = bgrafana-api.models.custom.custom(), 
                                            decimals = 56, 
                                            display_name = '', 
                                            display_name_from_ds = '', 
                                            filterable = True, 
                                            interval = 1.337, 
                                            mappings = [
                                                bgrafana-api.models.value_mapping.ValueMapping()
                                                ], 
                                            max = 1.337, 
                                            min = 1.337, 
                                            no_value = '', 
                                            path = '', 
                                            unit = '', 
                                            writeable = True, )
                                        ], 
                                    type_version = [
                                        56
                                        ], ), 
                                name = '', 
                                ref_id = '', )
                            ], 
                        status = 56, )
                    }
            )
        else:
            return QueryDataResponse(
        )
        """

    def testQueryDataResponse(self):
        """Test QueryDataResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
