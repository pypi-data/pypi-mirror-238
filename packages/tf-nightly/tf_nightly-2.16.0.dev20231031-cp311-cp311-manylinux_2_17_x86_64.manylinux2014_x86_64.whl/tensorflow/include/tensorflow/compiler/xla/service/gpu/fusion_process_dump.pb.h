// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/gpu/fusion_process_dump.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto;
namespace xla {
namespace gpu {
class FusionProcessDumpProto;
struct FusionProcessDumpProtoDefaultTypeInternal;
extern FusionProcessDumpProtoDefaultTypeInternal _FusionProcessDumpProto_default_instance_;
class FusionStep;
struct FusionStepDefaultTypeInternal;
extern FusionStepDefaultTypeInternal _FusionStep_default_instance_;
}  // namespace gpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::gpu::FusionProcessDumpProto* Arena::CreateMaybeMessage<::xla::gpu::FusionProcessDumpProto>(Arena*);
template<> ::xla::gpu::FusionStep* Arena::CreateMaybeMessage<::xla::gpu::FusionStep>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace gpu {

// ===================================================================

class FusionStep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.FusionStep) */ {
 public:
  inline FusionStep() : FusionStep(nullptr) {}
  ~FusionStep() override;
  explicit PROTOBUF_CONSTEXPR FusionStep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionStep(const FusionStep& from);
  FusionStep(FusionStep&& from) noexcept
    : FusionStep() {
    *this = ::std::move(from);
  }

  inline FusionStep& operator=(const FusionStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionStep& operator=(FusionStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionStep* internal_default_instance() {
    return reinterpret_cast<const FusionStep*>(
               &_FusionStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FusionStep& a, FusionStep& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionStep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionStep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionStep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FusionStep& from) {
    FusionStep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionStep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.FusionStep";
  }
  protected:
  explicit FusionStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFusionNameFieldNumber = 1,
    kProducerNameFieldNumber = 2,
    kConsumerNameFieldNumber = 3,
  };
  // string fusion_name = 1;
  void clear_fusion_name();
  const std::string& fusion_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fusion_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fusion_name();
  PROTOBUF_NODISCARD std::string* release_fusion_name();
  void set_allocated_fusion_name(std::string* fusion_name);
  private:
  const std::string& _internal_fusion_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fusion_name(const std::string& value);
  std::string* _internal_mutable_fusion_name();
  public:

  // string producer_name = 2;
  void clear_producer_name();
  const std::string& producer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producer_name();
  PROTOBUF_NODISCARD std::string* release_producer_name();
  void set_allocated_producer_name(std::string* producer_name);
  private:
  const std::string& _internal_producer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name(const std::string& value);
  std::string* _internal_mutable_producer_name();
  public:

  // string consumer_name = 3;
  void clear_consumer_name();
  const std::string& consumer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumer_name();
  PROTOBUF_NODISCARD std::string* release_consumer_name();
  void set_allocated_consumer_name(std::string* consumer_name);
  private:
  const std::string& _internal_consumer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_name(const std::string& value);
  std::string* _internal_mutable_consumer_name();
  public:

  // @@protoc_insertion_point(class_scope:xla.gpu.FusionStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fusion_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto;
};
// -------------------------------------------------------------------

class FusionProcessDumpProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.FusionProcessDumpProto) */ {
 public:
  inline FusionProcessDumpProto() : FusionProcessDumpProto(nullptr) {}
  ~FusionProcessDumpProto() override;
  explicit PROTOBUF_CONSTEXPR FusionProcessDumpProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionProcessDumpProto(const FusionProcessDumpProto& from);
  FusionProcessDumpProto(FusionProcessDumpProto&& from) noexcept
    : FusionProcessDumpProto() {
    *this = ::std::move(from);
  }

  inline FusionProcessDumpProto& operator=(const FusionProcessDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionProcessDumpProto& operator=(FusionProcessDumpProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionProcessDumpProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionProcessDumpProto* internal_default_instance() {
    return reinterpret_cast<const FusionProcessDumpProto*>(
               &_FusionProcessDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FusionProcessDumpProto& a, FusionProcessDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionProcessDumpProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionProcessDumpProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionProcessDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionProcessDumpProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionProcessDumpProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FusionProcessDumpProto& from) {
    FusionProcessDumpProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionProcessDumpProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.FusionProcessDumpProto";
  }
  protected:
  explicit FusionProcessDumpProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFusionStepsFieldNumber = 1,
  };
  // repeated .xla.gpu.FusionStep fusion_steps = 1;
  int fusion_steps_size() const;
  private:
  int _internal_fusion_steps_size() const;
  public:
  void clear_fusion_steps();
  ::xla::gpu::FusionStep* mutable_fusion_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::FusionStep >*
      mutable_fusion_steps();
  private:
  const ::xla::gpu::FusionStep& _internal_fusion_steps(int index) const;
  ::xla::gpu::FusionStep* _internal_add_fusion_steps();
  public:
  const ::xla::gpu::FusionStep& fusion_steps(int index) const;
  ::xla::gpu::FusionStep* add_fusion_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::FusionStep >&
      fusion_steps() const;

  // @@protoc_insertion_point(class_scope:xla.gpu.FusionProcessDumpProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::FusionStep > fusion_steps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionStep

// string fusion_name = 1;
inline void FusionStep::clear_fusion_name() {
  _impl_.fusion_name_.ClearToEmpty();
}
inline const std::string& FusionStep::fusion_name() const {
  // @@protoc_insertion_point(field_get:xla.gpu.FusionStep.fusion_name)
  return _internal_fusion_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FusionStep::set_fusion_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fusion_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.FusionStep.fusion_name)
}
inline std::string* FusionStep::mutable_fusion_name() {
  std::string* _s = _internal_mutable_fusion_name();
  // @@protoc_insertion_point(field_mutable:xla.gpu.FusionStep.fusion_name)
  return _s;
}
inline const std::string& FusionStep::_internal_fusion_name() const {
  return _impl_.fusion_name_.Get();
}
inline void FusionStep::_internal_set_fusion_name(const std::string& value) {
  
  _impl_.fusion_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FusionStep::_internal_mutable_fusion_name() {
  
  return _impl_.fusion_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FusionStep::release_fusion_name() {
  // @@protoc_insertion_point(field_release:xla.gpu.FusionStep.fusion_name)
  return _impl_.fusion_name_.Release();
}
inline void FusionStep::set_allocated_fusion_name(std::string* fusion_name) {
  if (fusion_name != nullptr) {
    
  } else {
    
  }
  _impl_.fusion_name_.SetAllocated(fusion_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fusion_name_.IsDefault()) {
    _impl_.fusion_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.FusionStep.fusion_name)
}

// string producer_name = 2;
inline void FusionStep::clear_producer_name() {
  _impl_.producer_name_.ClearToEmpty();
}
inline const std::string& FusionStep::producer_name() const {
  // @@protoc_insertion_point(field_get:xla.gpu.FusionStep.producer_name)
  return _internal_producer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FusionStep::set_producer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.producer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.FusionStep.producer_name)
}
inline std::string* FusionStep::mutable_producer_name() {
  std::string* _s = _internal_mutable_producer_name();
  // @@protoc_insertion_point(field_mutable:xla.gpu.FusionStep.producer_name)
  return _s;
}
inline const std::string& FusionStep::_internal_producer_name() const {
  return _impl_.producer_name_.Get();
}
inline void FusionStep::_internal_set_producer_name(const std::string& value) {
  
  _impl_.producer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FusionStep::_internal_mutable_producer_name() {
  
  return _impl_.producer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FusionStep::release_producer_name() {
  // @@protoc_insertion_point(field_release:xla.gpu.FusionStep.producer_name)
  return _impl_.producer_name_.Release();
}
inline void FusionStep::set_allocated_producer_name(std::string* producer_name) {
  if (producer_name != nullptr) {
    
  } else {
    
  }
  _impl_.producer_name_.SetAllocated(producer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.producer_name_.IsDefault()) {
    _impl_.producer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.FusionStep.producer_name)
}

// string consumer_name = 3;
inline void FusionStep::clear_consumer_name() {
  _impl_.consumer_name_.ClearToEmpty();
}
inline const std::string& FusionStep::consumer_name() const {
  // @@protoc_insertion_point(field_get:xla.gpu.FusionStep.consumer_name)
  return _internal_consumer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FusionStep::set_consumer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.FusionStep.consumer_name)
}
inline std::string* FusionStep::mutable_consumer_name() {
  std::string* _s = _internal_mutable_consumer_name();
  // @@protoc_insertion_point(field_mutable:xla.gpu.FusionStep.consumer_name)
  return _s;
}
inline const std::string& FusionStep::_internal_consumer_name() const {
  return _impl_.consumer_name_.Get();
}
inline void FusionStep::_internal_set_consumer_name(const std::string& value) {
  
  _impl_.consumer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FusionStep::_internal_mutable_consumer_name() {
  
  return _impl_.consumer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FusionStep::release_consumer_name() {
  // @@protoc_insertion_point(field_release:xla.gpu.FusionStep.consumer_name)
  return _impl_.consumer_name_.Release();
}
inline void FusionStep::set_allocated_consumer_name(std::string* consumer_name) {
  if (consumer_name != nullptr) {
    
  } else {
    
  }
  _impl_.consumer_name_.SetAllocated(consumer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumer_name_.IsDefault()) {
    _impl_.consumer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.FusionStep.consumer_name)
}

// -------------------------------------------------------------------

// FusionProcessDumpProto

// repeated .xla.gpu.FusionStep fusion_steps = 1;
inline int FusionProcessDumpProto::_internal_fusion_steps_size() const {
  return _impl_.fusion_steps_.size();
}
inline int FusionProcessDumpProto::fusion_steps_size() const {
  return _internal_fusion_steps_size();
}
inline void FusionProcessDumpProto::clear_fusion_steps() {
  _impl_.fusion_steps_.Clear();
}
inline ::xla::gpu::FusionStep* FusionProcessDumpProto::mutable_fusion_steps(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.FusionProcessDumpProto.fusion_steps)
  return _impl_.fusion_steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::FusionStep >*
FusionProcessDumpProto::mutable_fusion_steps() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.FusionProcessDumpProto.fusion_steps)
  return &_impl_.fusion_steps_;
}
inline const ::xla::gpu::FusionStep& FusionProcessDumpProto::_internal_fusion_steps(int index) const {
  return _impl_.fusion_steps_.Get(index);
}
inline const ::xla::gpu::FusionStep& FusionProcessDumpProto::fusion_steps(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.FusionProcessDumpProto.fusion_steps)
  return _internal_fusion_steps(index);
}
inline ::xla::gpu::FusionStep* FusionProcessDumpProto::_internal_add_fusion_steps() {
  return _impl_.fusion_steps_.Add();
}
inline ::xla::gpu::FusionStep* FusionProcessDumpProto::add_fusion_steps() {
  ::xla::gpu::FusionStep* _add = _internal_add_fusion_steps();
  // @@protoc_insertion_point(field_add:xla.gpu.FusionProcessDumpProto.fusion_steps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::FusionStep >&
FusionProcessDumpProto::fusion_steps() const {
  // @@protoc_insertion_point(field_list:xla.gpu.FusionProcessDumpProto.fusion_steps)
  return _impl_.fusion_steps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2ffusion_5fprocess_5fdump_2eproto
