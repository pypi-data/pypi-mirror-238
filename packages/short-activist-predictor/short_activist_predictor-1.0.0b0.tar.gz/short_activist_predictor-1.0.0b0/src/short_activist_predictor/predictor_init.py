# ---------------------------------------------------------------
# Project Name: short-activist-report
# Created by: Daglox Kankwanda
# Username: DanGlChris
# Creation Date: October 21, 2023
#
# Copyright: All rights reserved
# ---------------------------------------------------------------

import pandas as pd
from . import owner

from bertopic import BERTopic
from huggingface_hub import login, hf_hub_download

from transformers import AutoTokenizer, AutoModel
from sentence_transformers import SentenceTransformer


class Predictor_init:
    ##
    # class description
    ##
    _encoding = "UTF-8"
    Data_, Data_save = [], []

    name_file_Data_ = "Data_.csv"
    name_file_Data_save = "Data_save.csv"


    def __init__(self, token_: str):
        self.data_save = None
        self.data_ = None
        self.topic_model = None
        self.embedding_model = None
        self.model = None
        self.tokenizer = None
        self.login_pass: bool = False
        self.topic_model_Data_first_month_predicted_constant_succeed = None
        self.topic_model_Data_first_month_predicted_constant_failed = None
        self.topic_model_Data_first_month_predicted_succeed = None
        self.topic_model_Data_first_month_predicted_failed = None
        self.topic_model_Data_first_week_to_month_predicted_constant_succeed = None
        self.topic_model_Data_first_week_to_month_predicted_constant_failed = None
        self.topic_model_Data_first_week_predicted_constant_failed = None
        self.topic_model_Data_first_week_predicted_failed = None
        self.topic_model_Data_first_week_predicted_succeed = None
        self.topic_model_Data_first_day_to_week_predicted_constant_failed = None
        self.topic_model_Data_first_day_to_week_predicted_constant_succeed = None
        self.topic_model_Data_first_day_to_month_predicted_constant_failed = None
        self.topic_model_Data_first_week_predicted_constant_succeed = None
        self.topic_model_Data_first_day_to_month_predicted_constant_succeed = None
        self.topic_model_Data_first_day_predicted_failed = None
        self.topic_model_Data_first_day_predicted_succeed = None
        self.topic_model_Data_first_day_predicted_constant_failed = None
        self.topic_model_Data_first_day_predicted_constant_succeed = None

        ## Check token type
        if not isinstance(token_, str):
            raise ValueError("Invalid value type: the token must be str type")
        else:
            self._token = token_

    #
    # Method to upload data used to train model
    def upload_data(self, encoding=_encoding):
        for idx in range(0, 2):
            try:
                self.Data_ = pd.read_csv(self.data_, encoding=encoding)
                self.Data_save = pd.read_csv(self.data_save,encoding=encoding)
            except FileNotFoundError:
                print(f"Error: The file({idx + 1}) was not found.")
            except pd.errors.EmptyDataError:
                print(f"Error: The file({idx + 1})  is empty.")
            except pd.errors.ParserError:
                print(f"Error: There is a problem parsing the file({idx + 1}) .")
            except UnicodeDecodeError:
                print(f"Error: The file({idx + 1}) is not encoded in {encoding}.")
            except Exception as e:
                print(f"Error: An unexpected error occurred. Error details: {e}")
            finally:
                print("Finished attempting to read the CSV file.")

    def set_token(self, token_=None):
        if not isinstance(token_, str):
            raise ValueError("Invalid value type: the token must be str type")
        else:
            self._token = token_

    def __login_on_hugging_face(self):
        # Access request to hugging face repository
        # Enter the token generated by hugging face to have access to the model
        try:
            login(token=self._token)
        except ValueError:
            print(f"Error: Token not valid")
            self.login_pass = False
        finally:
            self.login_pass = True

    # model_path is the model path on hugging face
    def __get_model(self, model_path):
        # check valid path
        if not model_path: raise ValueError("The provided path is empty")
        full_model_path = owner.path_on_hugging_face + model_path

        topic_model = BERTopic.load(full_model_path)
        print(f"successfully loaded the model {model_path}")
        return topic_model

    def load_all_models(self):
        # ask token for access
        self.__login_on_hugging_face()
        if self.is_login():
            self.topic_model_Data_first_day_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_day_predicted_constant_succeed)
            self.topic_model_Data_first_day_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_day_predicted_constant_failed)
            self.topic_model_Data_first_day_predicted_succeed = self.__get_model(
                owner.path_topic_model_Data_first_day_predicted_succeed)
            self.topic_model_Data_first_day_predicted_failed = self.__get_model(
                owner.path_topic_model_Data_first_day_predicted_failed)
            self.topic_model_Data_first_day_to_month_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_day_to_month_predicted_constant_succeed)
            self.topic_model_Data_first_day_to_month_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_day_to_month_predicted_constant_failed)
            self.topic_model_Data_first_day_to_week_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_day_to_week_predicted_constant_succeed)
            self.topic_model_Data_first_day_to_week_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_day_to_week_predicted_constant_failed)
            self.topic_model_Data_first_week_predicted_succeed = self.__get_model(
                owner.path_topic_model_Data_first_week_predicted_succeed)
            self.topic_model_Data_first_week_predicted_failed = self.__get_model(
                owner.path_topic_model_Data_first_week_predicted_failed)
            self.topic_model_Data_first_week_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_week_predicted_constant_succeed)
            self.topic_model_Data_first_week_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_week_predicted_constant_failed)
            self.topic_model_Data_first_week_to_month_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_week_to_month_predicted_constant_failed)
            self.topic_model_Data_first_week_to_month_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_week_to_month_predicted_constant_succeed)
            self.topic_model_Data_first_month_predicted_failed = self.__get_model(
                owner.path_topic_model_Data_first_month_predicted_failed)
            self.topic_model_Data_first_month_predicted_succeed = self.__get_model(
                owner.path_topic_model_Data_first_month_predicted_succeed)
            self.topic_model_Data_first_month_predicted_constant_failed = self.__get_model(
                owner.path_topic_model_Data_first_month_predicted_constant_failed)
            self.topic_model_Data_first_month_predicted_constant_succeed = self.__get_model(
                owner.path_topic_model_Data_first_month_predicted_constant_succeed)

    # check if login passed
    def is_login(self):
        return self.login_pass

    def load_data(self):
        if(not self.is_login()):
            self.__login_on_hugging_face()
        try:
            self.data_ = hf_hub_download(repo_id = owner.path_data_on_hugging_face, filename="Data_.csv", repo_type="dataset")
            self.data_save = hf_hub_download(repo_id = owner.path_data_on_hugging_face, filename="Data_save.csv", repo_type="dataset")
        except Exception as e:
            print(f"An error occurred: {e}")
