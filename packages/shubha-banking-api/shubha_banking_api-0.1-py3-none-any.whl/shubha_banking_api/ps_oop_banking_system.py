# -*- coding: utf-8 -*-
"""PS OOP banking system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yEpIqBHayVLkUIxyElY9VVuWg--SJQ_R
"""

#task 1

class Account():

    def _init_(self, account_number, account_holder_name, balance=0):
        self.account_number = account_number
        self.account_holder_name = account_holder_name
        self.balance = balance

    # Method to deposit money into the account
    def deposit(self, amount):
        if amount <= 0:
            raise ValueError("Deposit amount must be positive")
        self.balance += amount

    # Method to withdraw money from the account
    def withdraw(self, amount):
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive")
        if amount > self.balance:
            raise ValueError("Insufficient funds")
        self.balance -= amount

    # Method to get the current balance of the account
    def get_balance(self):
        return self.balance

#task 2

class AccountCreationError(Exception):
    def _init_(self, account_number):
        self.account_number = account_number
        super()._init_(f"Account number {account_number} already exists.")

class BankAccount:
    # Class-level variable to store all created account numbers
    all_account_numbers = set()

    def _init_(self, account_number,account_name, balance=0):
        if account_number in BankAccount.all_account_numbers:
            raise AccountCreationError(account_number)
        self.account_number = account_number
        self.account_name= account_name
        self.balance = balance
        # Add the new account number to the set
        BankAccount.all_account_numbers.add(account_number)

#task 3

class SavingsAccount(Account):
    pass

# Subclass for a Current Account, inheriting from the base Account class
class CurrentAccount(Account):
    def _init_(self, account_number, account_holder_name, balance=0, overdraft_limit=0):
        super()._init_(account_number, account_holder_name, balance)
        self.overdraft_limit = overdraft_limit

    # Override the withdraw method for CurrentAccount
    def withdraw(self, amount):
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive")
        if amount > (self.balance + self.overdraft_limit):
            print("Overdraft limit reached!")
        else:
            self.balance -= amount