# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_posx.ipynb.

# %% auto 0
__all__ = ['dict1st', 'iter1st', 'flag1st', 'key1st', 'val1st', 'idx1st', 'arg1st']

# %% ../nbs/06_posx.ipynb 6
import copy, inspect
from inspect import ismethod
from inspect import Signature, Parameter, FullArgSpec, getfullargspec, signature, _empty as Empty, ismethod
from importlib import import_module
from itertools import chain, zip_longest
from functools import wraps, partial

# %% ../nbs/06_posx.ipynb 8
from types import ModuleType
from typing import Any, Union, Tuple, Callable, Iterable, TypeAlias, ParamSpec, Sequence

# %% ../nbs/06_posx.ipynb 10
#| export


# %% ../nbs/06_posx.ipynb 12
from atyp import AnyQ, IntQ, BoolQ, CallQ, DictQ, TupleQ, Bool01, BoolFunc, CallQ
from nchr import U1, DOT
from nlit import __ALL__, __DOC__,  __NAME__, __MODULE__,  INPLACE
from chck import isany, isdict, istuple, isnone, notnone, isditer, isrange
from idfunc import idfunc

# %% ../nbs/06_posx.ipynb 14
from .atyp import P, VArgs
from .args import getbound
from .util import filtdict
from .tups import pack
from .itrs import fallback

# %% ../nbs/06_posx.ipynb 16
def dict1st(dct: dict, flag: BoolFunc = notnone, keys: list = None):
    for idx, key in enumerate((keys or dct.keys())):
        if (val := dct.get(key)) and flag(val): return idx, key, val
            
def iter1st(arr: list, flag: BoolFunc = notnone):
    for idx, val in enumerate(arr):
        if flag(val): return idx, val
    
def flag1st(itr: Union[list, dict], flag: BoolFunc = notnone, keys: list = None):
    if isdict(itr): return pack(dict1st(itr, flag, keys), n=3)
    else: return pack(iter1st(itr, flag), n=2)

def key1st(dct: dict, keys: list = None, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):    
    _, key, _ = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(key): return key
    return fallback(dct.keys(), default, uselast)

def val1st(dct: dict, keys: list = None, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):    
    *_, val = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(val): return val
    return fallback(dct.values(), default, uselast)

def idx1st(*args, flag: BoolFunc = notnone, default: IntQ = None, uselast: bool = True):
    idx, *_ = flag1st(args, flag)
    if notnone(idx): return idx    
    return fallback(tuple(range(len(args))), default, uselast)

def arg1st(*args, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):
    *_, val = flag1st(args, flag)
    if notnone(val): return val
    return fallback(args, default, uselast)
