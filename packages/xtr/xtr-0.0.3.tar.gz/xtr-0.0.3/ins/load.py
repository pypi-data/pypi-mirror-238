# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_load.ipynb.

# %% auto 0
__all__ = ['getall', 'getalls', 'fromstar', 'fromstars', 'frommods']

# %% ../nbs/05_load.ipynb 6
from itertools import chain
from importlib import import_module

# %% ../nbs/05_load.ipynb 8
from types import ModuleType

# %% ../nbs/05_load.ipynb 10
#| export


# %% ../nbs/05_load.ipynb 12
from nlit import __ALL__, __MODULE__

# %% ../nbs/05_load.ipynb 14
from .util import (dostar)
from .strs import (modstr, pkgstr, pkgstr, modstr)

# %% ../nbs/05_load.ipynb 16
def getall(mod: ModuleType) -> list[str]:
    if hasattr(mod, __ALL__): return getattr(mod, __ALL__)
    if hasattr(mod, __MODULE__): return getall(import_module(getattr(mod, __MODULE__)))
    raise AttributeError(f'''module {mod} has no attribute '__all__' or '__module__'.''')

def getalls(*mods: ModuleType) -> list[str]:
    return sorted(set(chain(*[getall(mod) for mod in mods])))

# %% ../nbs/05_load.ipynb 17
def fromstar(lib: str, *pkgs: str):
    mod = import_module(modstr(lib, *pkgs))

    global globals
    globals().update({var: getattr(mod, var) for var in dir(mod) if dostar(var)})

def fromstars(lib: str, *subs: str | tuple[str]):
    for pkgs in subs: fromstar(lib, pkgstr(pkgs))

def frommods(lib, *subs: str):
    global globals
    res = ()
    for pkgs in subs:
        pkg = pkgstr(pkgs)
        mod = import_module(modstr(lib, pkg))
        globals().update({pkg: mod})
        res += (mod,)
    return tuple(res)
