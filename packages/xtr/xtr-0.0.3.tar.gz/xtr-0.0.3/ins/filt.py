# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_filt.ipynb.

# %% auto 0
__all__ = ['P', 'VArgs', 'usearg0', 'getaidx', 'argsadj0', 'getfargs', 'iskw', 'getfkwds', 'kws2args', 'filtargs', 'filtcall']

# %% ../nbs/02_filt.ipynb 6
import inspect
from inspect import Signature, Parameter, FullArgSpec, getfullargspec, signature, _empty as Empty, ismethod
from itertools import chain, zip_longest
from functools import wraps, partial

# %% ../nbs/02_filt.ipynb 8
from types import ModuleType
from typing import Any, Union, Tuple, TypeAlias, ParamSpec, Sequence, Callable

P = ParamSpec('P')
VArgs: TypeAlias = Union[Any, tuple]

# %% ../nbs/02_filt.ipynb 10
#| export


# %% ../nbs/02_filt.ipynb 12
from atyp import AnyQ, IntQ, BoolQ, Bool01, BoolFunc, CallQ
from chck import isany, istuple, isfunc, isvarpos, isvarkwd, isnone, notnone, isclsarg, isself
from nlit import __DOC__, __NAME__
from idfunc import idfunc

# %% ../nbs/02_filt.ipynb 14
from .nugs import renone, tovargs, jointups
from .insp import getsig, getspec, hasvarargs, hasvarkwds

# %% ../nbs/02_filt.ipynb 16
def usearg0(spec: FullArgSpec) -> bool:
    '''0 if `self` / 'cls` not included in spec.args'''
    if len(spec.args) >= 1 and spec.args[0] in {'self', 'cls'}: return True
    return False

def getaidx(spec: FullArgSpec, aidx: IntQ = None) -> Bool01:
    '''Get the arg index (`aidx`) to start at for the given spec'''
    return int(usearg0(spec)) if isnone(aidx) else aidx

def argsadj0(spec: FullArgSpec, aidx: IntQ = None, *args: P.args, **kwargs: P.kwargs):
    '''get args adjusted for `self` / `cls`'''
    # NOTE: if `self` or `cls` this will drop args from the end of the list
    aidx= getaidx(spec, aidx)
    args = spec.args if kwargs.get('retnames', False) else args
    # drop args from the end of the list
    start = kwargs.get('fromend', True)
    fargs = args[:len(spec.args) - aidx] if start else args[aidx:len(spec.args)]
    kwargs.pop('fromend', None)
    kwargs.pop('retnames', None)
    return fargs

def getfargs(spec: FullArgSpec, aidx: IntQ = None, *args: P.args, **kwargs: P.kwargs) -> tuple:
    '''Filter args and kwargs for the given `spec`'''
    return argsadj0(spec, aidx, *args, **kwargs)

def iskw(k: str, spec: FullArgSpec, aidx: IntQ = None, *args: P.args, **kwargs: P.kwargs) -> bool:
    '''Check if `k` is a kwarg in `spec` either as an optional keyword (in args) or as a kwonly arg'''  
    kwargs.update({'retnames': True})
    return k in argsadj0(spec, aidx, *args, **kwargs) or k in spec.kwonlyargs
    
def getfkwds(spec: FullArgSpec, aidx: IntQ = None, *args: P.args, **kwargs: P.kwargs) -> dict:
    # Filter keyword arguments
    fkwds = {k: v for k, v in kwargs.items() if iskw(k, spec, aidx, *args, **kwargs)}
    fkwds.pop('retnames', None)
    return fkwds

# %% ../nbs/02_filt.ipynb 17
def kws2args(spec: FullArgSpec, aidx: IntQ = None, *args: P.args, **kwargs: P.kwargs):
    '''Move keyword values to args if they are in the spec'''
    rargs = list(args)
    (rkwds := kwargs.copy()).update({'retnames': True})
    names = argsadj0(spec, aidx, *args, **rkwds)    
    for i, a in enumerate(names):
        if a not in rkwds: continue
        if i >= len(rargs): break
        rargs[i] = rkwds.pop(a)
    rkwds.pop('fromend', None)
    rkwds.pop('retnames', None)
    return tuple(rargs), rkwds

# %% ../nbs/02_filt.ipynb 18
def filtargs(f: Callable, *args: P.args, **kwargs: P.kwargs) -> tuple:
    '''Filter args and kwargs for the given `fn`'''    
    aidx  = getaidx(spec := getspec(f))

    varg, vkws = kwargs.pop('varg', ()), kwargs.pop('vkws', dict())
    varg, vkws = jointups(varg, args), {**vkws, **kwargs}    
    
    fargs = list(getfargs(spec, aidx, *varg, **vkws))
    fkwds = getfkwds(spec, aidx, *varg, **vkws)
    
    fargs, fkwds = kws2args(spec, aidx, *fargs, **fkwds)
    fkwds.pop('fromend', None)
    fkwds.pop('retnames', None)
    return fargs, fkwds

# %% ../nbs/02_filt.ipynb 20
def filtcall(fn: Callable, *args: P.args, **kwargs: P.kwargs):
    '''Filter args and kwargs for the given `fn` and then call it.'''
    fargs, fkwds = filtargs(fn, *args, **kwargs)
    return fn(*fargs, **fkwds)
