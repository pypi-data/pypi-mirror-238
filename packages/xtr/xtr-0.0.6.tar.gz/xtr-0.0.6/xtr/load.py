# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_load.ipynb.

# %% auto 0
__all__ = ['getall', 'getalls', 'fromstar', 'fromstars', 'frommods']

# %% ../nbs/08_load.ipynb 6
import copy, inspect
from inspect import ismethod
from inspect import Signature, Parameter, FullArgSpec, getfullargspec, signature, _empty as Empty, ismethod
from importlib import import_module
from itertools import chain, zip_longest
from functools import wraps, partial

# %% ../nbs/08_load.ipynb 8
from types import ModuleType
from typing import Any, Union, Tuple, Callable, Iterable, TypeAlias, ParamSpec, Sequence

# %% ../nbs/08_load.ipynb 10
#| export


# %% ../nbs/08_load.ipynb 12
from atyp import AnyQ, IntQ, BoolQ, CallQ, DictQ, TupleQ, Bool01, BoolFunc, CallQ
from nchr import U1, DOT
from nlit import __ALL__, __DOC__,  __NAME__, __MODULE__,  INPLACE
from chck import isany, isdict, istuple, isnone, notnone, isditer, isrange
from idfunc import idfunc

# %% ../nbs/08_load.ipynb 14
from .atyp import P, VArgs
from .args import getbound
from .util import filtdict
from .tups import pack, argtup
from .itrs import fallback
from .strs import dotstr, pkgstr, modstr, dostar

# %% ../nbs/08_load.ipynb 16
def getall(mod: ModuleType) -> list[str]:
    if hasattr(mod, __ALL__): return getattr(mod, __ALL__)
    if hasattr(mod, __MODULE__): return getall(import_module(getattr(mod, __MODULE__)))
    raise AttributeError(f'''module {mod} has no attribute '__all__' or '__module__'.''')

def getalls(*mods: ModuleType) -> list[str]:
    return sorted(set(chain(*[getall(mod) for mod in mods])))

# %% ../nbs/08_load.ipynb 18
def fromstar(lib: str, *pkgs: str, scope = globals()):
    scope = scope or globals()
    mod = import_module(modstr(lib, *pkgs))
    scope.update({var: getattr(mod, var) for var in dir(mod) if dostar(var)})

def fromstars(lib: str, *subs: str | tuple[str], scope = globals()):
    scope = scope or globals()
    for pkgs in subs: fromstar(lib, pkgstr(pkgs), scope=scope)

def frommods(lib, *subs: str,  scope = globals()):
    global globals
    scope = scope or globals()
    res = ()
    for pkgs in subs:
        pkg = pkgstr(pkgs)
        mod = import_module(modstr(lib, pkg))
        scope.update({pkg: mod})
        res += (mod,)
    return tuple(res)
