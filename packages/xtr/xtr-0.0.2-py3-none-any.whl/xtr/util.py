# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_util.ipynb.

# %% auto 0
__all__ = ['tup2args', 'dct2args', 'rng2args', 'val2tup', 'jointups']

# %% ../nbs/01_util.ipynb 6
from itertools import zip_longest

# %% ../nbs/01_util.ipynb 8
#| export


# %% ../nbs/01_util.ipynb 10
#| export


# %% ../nbs/01_util.ipynb 12
from nchr import U1
from chck import notnone, istuple, isrange, isdictiter

# %% ../nbs/01_util.ipynb 14
from .atyp import P, VArgs

# %% ../nbs/01_util.ipynb 16
def tup2args(*args: VArgs) -> tuple:
    '''Deconstruct `*args` until the first argument is not a one-element tuple
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> tup2args(1), tup2args((1, )), tup2args(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> tup2args(1, 2), tup2args('a', (1, )), tup2args('a', 1, ), tup2args(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> tup2args([]), tup2args(*[])
    (([],), ())
    '''
    return tup2args(*args[0]) if len(args) == 1 and istuple(args[0]) else args

def dct2args(*args: VArgs) -> tuple:
    args = tup2args(*args)
    return dct2args(*args[0]) if len(args) == 1 and isdictiter(args[0]) else args

def rng2args(*args: VArgs) -> tuple:
    args = tup2args(*args)
    return rng2args(*args[0]) if len(args) == 1 and isrange(args[0]) else args

def val2tup(val) -> tuple:
    '''Wrap `val` in a tuple if it is not already a tuple'''
    return val if istuple(val := dct2args(val)) else (val, )

def jointups(*tups: tuple) -> tuple:
    return tuple(next((x for x in item if notnone(x)), None) for item in zip_longest(*tups))
