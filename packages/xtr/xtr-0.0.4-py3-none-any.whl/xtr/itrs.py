# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_itrs.ipynb.

# %% auto 0
__all__ = ['nextnone', 'safenext', 'last', 'fallback']

# %% ../nbs/03_itrs.ipynb 6
from itertools import zip_longest

# %% ../nbs/03_itrs.ipynb 8
from typing import Iterable

# %% ../nbs/03_itrs.ipynb 10
#| export


# %% ../nbs/03_itrs.ipynb 12
from nchr import U1
from chck import notnone, istuple, isrange, isdictiter

# %% ../nbs/03_itrs.ipynb 14
from .atyp import P, VArgs
from .tups import argtup

# %% ../nbs/03_itrs.ipynb 16
def nextnone(*args: VArgs):
    '''Return the first value in `args` or None'''
    return next(iter(argtup(args)))

def safenext(*args: VArgs): 
    '''Return the first non-None value in `args` or None'''
    return next(filter(notnone, argtup(args)), None)

def last(*args: VArgs): return next(reversed(argtup(args)), None)

def fallback(vals: Iterable, default = None, uselast: bool = True):
    '''Fallback to the last value of `vals` if `default is None` and `uselast` is `True`'''
    return default if notnone(default) else last(vals) if uselast else None
