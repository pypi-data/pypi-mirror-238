# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_nugs.ipynb.

# %% auto 0
__all__ = ['P', 'VArgs', 'tovargs', 'jointups', 'renone']

# %% ../nbs/00_nugs.ipynb 6
import inspect
from inspect import Signature, Parameter, FullArgSpec, getfullargspec, signature, _empty as Empty, ismethod
from itertools import chain, zip_longest
from functools import wraps, partial

# %% ../nbs/00_nugs.ipynb 8
from types import ModuleType
from typing import Any, Union, Tuple, TypeAlias, ParamSpec, Sequence, Callable

P = ParamSpec('P')
VArgs: TypeAlias = Union[Any, tuple]

# %% ../nbs/00_nugs.ipynb 10
#| export


# %% ../nbs/00_nugs.ipynb 12
from atyp import AnyQ, IntQ, BoolQ, Bool01, BoolFunc, CallQ
from chck import isany, istuple, isfunc, isvarpos, isvarkwd, isnone, notnone, isclsarg, isself
from nlit import __DOC__, __NAME__
from idfunc import idfunc

# %% ../nbs/00_nugs.ipynb 15
def tovargs(*args: VArgs) -> tuple:
    if len(args) == 1 and istuple(args[0]): return tovargs(*args[0])
    return args if istuple(args) else (args, )

def jointups(*tups: tuple) -> tuple:
    return tuple(next((x for x in item if notnone(x)), None) for item in zip_longest(*tups))

def renone(v, retnone: bool = True): return None if retnone else v
